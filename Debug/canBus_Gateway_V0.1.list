
canBus_Gateway_V0.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004fb0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000154  080050bc  080050bc  000150bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005210  08005210  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08005210  08005210  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005210  08005210  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005210  08005210  00015210  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005214  08005214  00015214  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08005218  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000298  20000074  0800528c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000030c  0800528c  0002030c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011365  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000265e  00000000  00000000  00031402  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f48  00000000  00000000  00033a60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e68  00000000  00000000  000349a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018ff4  00000000  00000000  00035810  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000114b2  00000000  00000000  0004e804  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000899ba  00000000  00000000  0005fcb6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e9670  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004370  00000000  00000000  000e96c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000074 	.word	0x20000074
 8000128:	00000000 	.word	0x00000000
 800012c:	080050a4 	.word	0x080050a4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000078 	.word	0x20000078
 8000148:	080050a4 	.word	0x080050a4

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <searchI2cDevice>:
 * adresin LSB biti (R/W biti) her zaman sabit 0 olarak döndürülür

 * Fonk. -1 döndüryorsa I2C hat üzerinde herhangi bir cihaz bulunamamistir
 */
int searchI2cDevice(I2C_HandleTypeDef *I2Cx)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b084      	sub	sp, #16
 8000160:	af00      	add	r7, sp, #0
 8000162:	6078      	str	r0, [r7, #4]
	for (uint8_t i = 0; i < 255; ++i)
 8000164:	2300      	movs	r3, #0
 8000166:	73fb      	strb	r3, [r7, #15]
 8000168:	e00f      	b.n	800018a <searchI2cDevice+0x2e>
	{
		if (HAL_I2C_IsDeviceReady(I2Cx, i, 10, HAL_MAX_DELAY) == HAL_OK)
 800016a:	7bfb      	ldrb	r3, [r7, #15]
 800016c:	b299      	uxth	r1, r3
 800016e:	f04f 33ff 	mov.w	r3, #4294967295
 8000172:	220a      	movs	r2, #10
 8000174:	6878      	ldr	r0, [r7, #4]
 8000176:	f002 fdbf 	bl	8002cf8 <HAL_I2C_IsDeviceReady>
 800017a:	4603      	mov	r3, r0
 800017c:	2b00      	cmp	r3, #0
 800017e:	d101      	bne.n	8000184 <searchI2cDevice+0x28>
			return i;                                                           //cihaz adresini dondurur
 8000180:	7bfb      	ldrb	r3, [r7, #15]
 8000182:	e006      	b.n	8000192 <searchI2cDevice+0x36>
	for (uint8_t i = 0; i < 255; ++i)
 8000184:	7bfb      	ldrb	r3, [r7, #15]
 8000186:	3301      	adds	r3, #1
 8000188:	73fb      	strb	r3, [r7, #15]
 800018a:	7bfb      	ldrb	r3, [r7, #15]
 800018c:	2bff      	cmp	r3, #255	; 0xff
 800018e:	d1ec      	bne.n	800016a <searchI2cDevice+0xe>
	}
	return HAL_ERROR;                                                                     //cihaz bulunamadi
 8000190:	2301      	movs	r3, #1
}
 8000192:	4618      	mov	r0, r3
 8000194:	3710      	adds	r7, #16
 8000196:	46bd      	mov	sp, r7
 8000198:	bd80      	pop	{r7, pc}
	...

0800019c <Init_CanA>:
//  Parameters  : void
//  Returns     :
//  Scope       :
//  Function    :
/*--------------------------------------------------------*/
void Init_CanA() {
 800019c:	b580      	push	{r7, lr}
 800019e:	af00      	add	r7, sp, #0
	canfil.FilterBank = 0;
 80001a0:	4b2f      	ldr	r3, [pc, #188]	; (8000260 <Init_CanA+0xc4>)
 80001a2:	2200      	movs	r2, #0
 80001a4:	615a      	str	r2, [r3, #20]
	canfil.FilterMode = CAN_FILTERMODE_IDMASK;
 80001a6:	4b2e      	ldr	r3, [pc, #184]	; (8000260 <Init_CanA+0xc4>)
 80001a8:	2200      	movs	r2, #0
 80001aa:	619a      	str	r2, [r3, #24]
	canfil.FilterFIFOAssignment = CAN_RX_FIFO0;
 80001ac:	4b2c      	ldr	r3, [pc, #176]	; (8000260 <Init_CanA+0xc4>)
 80001ae:	2200      	movs	r2, #0
 80001b0:	611a      	str	r2, [r3, #16]
	canfil.FilterIdHigh = 0;
 80001b2:	4b2b      	ldr	r3, [pc, #172]	; (8000260 <Init_CanA+0xc4>)
 80001b4:	2200      	movs	r2, #0
 80001b6:	601a      	str	r2, [r3, #0]
	canfil.FilterIdLow = 0;
 80001b8:	4b29      	ldr	r3, [pc, #164]	; (8000260 <Init_CanA+0xc4>)
 80001ba:	2200      	movs	r2, #0
 80001bc:	605a      	str	r2, [r3, #4]
	canfil.FilterMaskIdHigh = 0;
 80001be:	4b28      	ldr	r3, [pc, #160]	; (8000260 <Init_CanA+0xc4>)
 80001c0:	2200      	movs	r2, #0
 80001c2:	609a      	str	r2, [r3, #8]
	canfil.FilterMaskIdLow = 0;
 80001c4:	4b26      	ldr	r3, [pc, #152]	; (8000260 <Init_CanA+0xc4>)
 80001c6:	2200      	movs	r2, #0
 80001c8:	60da      	str	r2, [r3, #12]
	canfil.FilterScale = CAN_FILTERSCALE_32BIT;
 80001ca:	4b25      	ldr	r3, [pc, #148]	; (8000260 <Init_CanA+0xc4>)
 80001cc:	2201      	movs	r2, #1
 80001ce:	61da      	str	r2, [r3, #28]
	canfil.FilterActivation = ENABLE;
 80001d0:	4b23      	ldr	r3, [pc, #140]	; (8000260 <Init_CanA+0xc4>)
 80001d2:	2201      	movs	r2, #1
 80001d4:	621a      	str	r2, [r3, #32]
	canfil.SlaveStartFilterBank = 14;
 80001d6:	4b22      	ldr	r3, [pc, #136]	; (8000260 <Init_CanA+0xc4>)
 80001d8:	220e      	movs	r2, #14
 80001da:	625a      	str	r2, [r3, #36]	; 0x24

	txHeader.DLC = 8;
 80001dc:	4b21      	ldr	r3, [pc, #132]	; (8000264 <Init_CanA+0xc8>)
 80001de:	2208      	movs	r2, #8
 80001e0:	611a      	str	r2, [r3, #16]
	txHeader.IDE = CAN_ID_STD;
 80001e2:	4b20      	ldr	r3, [pc, #128]	; (8000264 <Init_CanA+0xc8>)
 80001e4:	2200      	movs	r2, #0
 80001e6:	609a      	str	r2, [r3, #8]
	txHeader.RTR = CAN_RTR_DATA;
 80001e8:	4b1e      	ldr	r3, [pc, #120]	; (8000264 <Init_CanA+0xc8>)
 80001ea:	2200      	movs	r2, #0
 80001ec:	60da      	str	r2, [r3, #12]
	txHeader.StdId = 0x7FF;
 80001ee:	4b1d      	ldr	r3, [pc, #116]	; (8000264 <Init_CanA+0xc8>)
 80001f0:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80001f4:	601a      	str	r2, [r3, #0]
	txHeader.ExtId = 0x1FFFFFFF;
 80001f6:	4b1b      	ldr	r3, [pc, #108]	; (8000264 <Init_CanA+0xc8>)
 80001f8:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
 80001fc:	605a      	str	r2, [r3, #4]
	txHeader.TransmitGlobalTime = DISABLE;
 80001fe:	4b19      	ldr	r3, [pc, #100]	; (8000264 <Init_CanA+0xc8>)
 8000200:	2200      	movs	r2, #0
 8000202:	751a      	strb	r2, [r3, #20]

	if(HAL_OK != HAL_CAN_ConfigFilter(&hcan, &canfil))
 8000204:	4916      	ldr	r1, [pc, #88]	; (8000260 <Init_CanA+0xc4>)
 8000206:	4818      	ldr	r0, [pc, #96]	; (8000268 <Init_CanA+0xcc>)
 8000208:	f001 fcdf 	bl	8001bca <HAL_CAN_ConfigFilter>
 800020c:	4603      	mov	r3, r0
 800020e:	2b00      	cmp	r3, #0
 8000210:	d006      	beq.n	8000220 <Init_CanA+0x84>
	{
		debugPrintf("CAN_A_FAIL\n");
 8000212:	4816      	ldr	r0, [pc, #88]	; (800026c <Init_CanA+0xd0>)
 8000214:	f000 f910 	bl	8000438 <dbgPrintf>
		period_of_led_blink = _100_MS;
 8000218:	4b15      	ldr	r3, [pc, #84]	; (8000270 <Init_CanA+0xd4>)
 800021a:	2264      	movs	r2, #100	; 0x64
 800021c:	601a      	str	r2, [r3, #0]
		return;
 800021e:	e01d      	b.n	800025c <Init_CanA+0xc0>
	}

	if(HAL_OK != HAL_CAN_Start(&hcan))
 8000220:	4811      	ldr	r0, [pc, #68]	; (8000268 <Init_CanA+0xcc>)
 8000222:	f001 fd9b 	bl	8001d5c <HAL_CAN_Start>
 8000226:	4603      	mov	r3, r0
 8000228:	2b00      	cmp	r3, #0
 800022a:	d006      	beq.n	800023a <Init_CanA+0x9e>
	{
		debugPrintf("CAN_A_FAIL\n");
 800022c:	480f      	ldr	r0, [pc, #60]	; (800026c <Init_CanA+0xd0>)
 800022e:	f000 f903 	bl	8000438 <dbgPrintf>
		period_of_led_blink = _100_MS;
 8000232:	4b0f      	ldr	r3, [pc, #60]	; (8000270 <Init_CanA+0xd4>)
 8000234:	2264      	movs	r2, #100	; 0x64
 8000236:	601a      	str	r2, [r3, #0]
		return;
 8000238:	e010      	b.n	800025c <Init_CanA+0xc0>
	}

	if(HAL_OK != HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING))
 800023a:	2102      	movs	r1, #2
 800023c:	480a      	ldr	r0, [pc, #40]	; (8000268 <Init_CanA+0xcc>)
 800023e:	f001 fef2 	bl	8002026 <HAL_CAN_ActivateNotification>
 8000242:	4603      	mov	r3, r0
 8000244:	2b00      	cmp	r3, #0
 8000246:	d006      	beq.n	8000256 <Init_CanA+0xba>
	{
		debugPrintf("CAN_A_FAIL\n");
 8000248:	4808      	ldr	r0, [pc, #32]	; (800026c <Init_CanA+0xd0>)
 800024a:	f000 f8f5 	bl	8000438 <dbgPrintf>
		period_of_led_blink = _100_MS;
 800024e:	4b08      	ldr	r3, [pc, #32]	; (8000270 <Init_CanA+0xd4>)
 8000250:	2264      	movs	r2, #100	; 0x64
 8000252:	601a      	str	r2, [r3, #0]
		return;
 8000254:	e002      	b.n	800025c <Init_CanA+0xc0>
	}
	debugPrintf("CAN_A_OK\n");
 8000256:	4807      	ldr	r0, [pc, #28]	; (8000274 <Init_CanA+0xd8>)
 8000258:	f000 f8ee 	bl	8000438 <dbgPrintf>
}
 800025c:	bd80      	pop	{r7, pc}
 800025e:	bf00      	nop
 8000260:	200002b8 	.word	0x200002b8
 8000264:	20000284 	.word	0x20000284
 8000268:	2000010c 	.word	0x2000010c
 800026c:	080050bc 	.word	0x080050bc
 8000270:	20000000 	.word	0x20000000
 8000274:	080050c8 	.word	0x080050c8

08000278 <Init_Eeprom>:
//  Returns     :
//  Scope       :
//  Function    :
/*--------------------------------------------------------*/
void Init_Eeprom()
{
 8000278:	b580      	push	{r7, lr}
 800027a:	af00      	add	r7, sp, #0
	EEPROM_DEVICE_ADR = searchI2cDevice(&hi2c1);
 800027c:	480c      	ldr	r0, [pc, #48]	; (80002b0 <Init_Eeprom+0x38>)
 800027e:	f7ff ff6d 	bl	800015c <searchI2cDevice>
 8000282:	4603      	mov	r3, r0
 8000284:	4a0b      	ldr	r2, [pc, #44]	; (80002b4 <Init_Eeprom+0x3c>)
 8000286:	6013      	str	r3, [r2, #0]

	if(EEPROM_DEVICE_ADR != HAL_ERROR)
 8000288:	4b0a      	ldr	r3, [pc, #40]	; (80002b4 <Init_Eeprom+0x3c>)
 800028a:	681b      	ldr	r3, [r3, #0]
 800028c:	2b01      	cmp	r3, #1
 800028e:	d006      	beq.n	800029e <Init_Eeprom+0x26>
	{
		debugPrintf("EEPROM_OK,  adr: %x\n", EEPROM_DEVICE_ADR);
 8000290:	4b08      	ldr	r3, [pc, #32]	; (80002b4 <Init_Eeprom+0x3c>)
 8000292:	681b      	ldr	r3, [r3, #0]
 8000294:	4619      	mov	r1, r3
 8000296:	4808      	ldr	r0, [pc, #32]	; (80002b8 <Init_Eeprom+0x40>)
 8000298:	f000 f8ce 	bl	8000438 <dbgPrintf>
	else
	{
		period_of_led_blink = _100_MS;
		debugPrint("eeprom init FAIL\n ");
	}
}
 800029c:	e005      	b.n	80002aa <Init_Eeprom+0x32>
		period_of_led_blink = _100_MS;
 800029e:	4b07      	ldr	r3, [pc, #28]	; (80002bc <Init_Eeprom+0x44>)
 80002a0:	2264      	movs	r2, #100	; 0x64
 80002a2:	601a      	str	r2, [r3, #0]
		debugPrint("eeprom init FAIL\n ");
 80002a4:	4806      	ldr	r0, [pc, #24]	; (80002c0 <Init_Eeprom+0x48>)
 80002a6:	f000 f8f5 	bl	8000494 <dbgPrint>
}
 80002aa:	bf00      	nop
 80002ac:	bd80      	pop	{r7, pc}
 80002ae:	bf00      	nop
 80002b0:	20000134 	.word	0x20000134
 80002b4:	20000090 	.word	0x20000090
 80002b8:	080050d4 	.word	0x080050d4
 80002bc:	20000000 	.word	0x20000000
 80002c0:	080050ec 	.word	0x080050ec

080002c4 <Init_CanB>:
//  Returns     :
//  Scope       :
//  Function    :
/*--------------------------------------------------------*/
void Init_CanB()
 {
 80002c4:	b580      	push	{r7, lr}
 80002c6:	b082      	sub	sp, #8
 80002c8:	af00      	add	r7, sp, #0
	/****CanB***/
	// declaring  hardware related pointer func.
	cfgCanB.ChipSelectFp = &ChipSelectFpB;
 80002ca:	4b14      	ldr	r3, [pc, #80]	; (800031c <Init_CanB+0x58>)
 80002cc:	4a14      	ldr	r2, [pc, #80]	; (8000320 <Init_CanB+0x5c>)
 80002ce:	615a      	str	r2, [r3, #20]
	cfgCanB.ChipUnSelectFp = &ChipUnSelectFpB;
 80002d0:	4b12      	ldr	r3, [pc, #72]	; (800031c <Init_CanB+0x58>)
 80002d2:	4a14      	ldr	r2, [pc, #80]	; (8000324 <Init_CanB+0x60>)
 80002d4:	619a      	str	r2, [r3, #24]
	cfgCanB.SPIReadFp = &SPIReadFpB;
 80002d6:	4b11      	ldr	r3, [pc, #68]	; (800031c <Init_CanB+0x58>)
 80002d8:	4a13      	ldr	r2, [pc, #76]	; (8000328 <Init_CanB+0x64>)
 80002da:	625a      	str	r2, [r3, #36]	; 0x24
	cfgCanB.SPIReadWriteFp = &SPIReadWriteFpB;
 80002dc:	4b0f      	ldr	r3, [pc, #60]	; (800031c <Init_CanB+0x58>)
 80002de:	4a13      	ldr	r2, [pc, #76]	; (800032c <Init_CanB+0x68>)
 80002e0:	61da      	str	r2, [r3, #28]
	cfgCanB.SPIWriteFp = &SPIWriteFpB;
 80002e2:	4b0e      	ldr	r3, [pc, #56]	; (800031c <Init_CanB+0x58>)
 80002e4:	4a12      	ldr	r2, [pc, #72]	; (8000330 <Init_CanB+0x6c>)
 80002e6:	621a      	str	r2, [r3, #32]

	// init
	ChipUnSelectFpB();
 80002e8:	f000 ffb0 	bl	800124c <ChipUnSelectFpB>

	uint8_t result = begin(&cfgCanB, CAN_500KBPS, MCP_8MHz);
 80002ec:	2203      	movs	r2, #3
 80002ee:	2110      	movs	r1, #16
 80002f0:	480a      	ldr	r0, [pc, #40]	; (800031c <Init_CanB+0x58>)
 80002f2:	f000 ff91 	bl	8001218 <begin>
 80002f6:	4603      	mov	r3, r0
 80002f8:	71fb      	strb	r3, [r7, #7]
	// can the CAN run
	if (result == CAN_OK) {
 80002fa:	79fb      	ldrb	r3, [r7, #7]
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d103      	bne.n	8000308 <Init_CanB+0x44>
		debugPrint("CAN_B_OK\n");
 8000300:	480c      	ldr	r0, [pc, #48]	; (8000334 <Init_CanB+0x70>)
 8000302:	f000 f8c7 	bl	8000494 <dbgPrint>
	else {
		period_of_led_blink = _100_MS;
		debugPrint("CAN_B_FAIL\n");
	}

}
 8000306:	e005      	b.n	8000314 <Init_CanB+0x50>
		period_of_led_blink = _100_MS;
 8000308:	4b0b      	ldr	r3, [pc, #44]	; (8000338 <Init_CanB+0x74>)
 800030a:	2264      	movs	r2, #100	; 0x64
 800030c:	601a      	str	r2, [r3, #0]
		debugPrint("CAN_B_FAIL\n");
 800030e:	480b      	ldr	r0, [pc, #44]	; (800033c <Init_CanB+0x78>)
 8000310:	f000 f8c0 	bl	8000494 <dbgPrint>
}
 8000314:	bf00      	nop
 8000316:	3708      	adds	r7, #8
 8000318:	46bd      	mov	sp, r7
 800031a:	bd80      	pop	{r7, pc}
 800031c:	20000094 	.word	0x20000094
 8000320:	08001265 	.word	0x08001265
 8000324:	0800124d 	.word	0x0800124d
 8000328:	080012c5 	.word	0x080012c5
 800032c:	0800127d 	.word	0x0800127d
 8000330:	080012a1 	.word	0x080012a1
 8000334:	08005100 	.word	0x08005100
 8000338:	20000000 	.word	0x20000000
 800033c:	0800510c 	.word	0x0800510c

08000340 <Init_CanC>:
//  Parameters  : void
//  Returns     :
//  Scope       :
//  Function    :
/*--------------------------------------------------------*/
void Init_CanC() {
 8000340:	b580      	push	{r7, lr}
 8000342:	b082      	sub	sp, #8
 8000344:	af00      	add	r7, sp, #0
	/****CanC***/
	// declaring  hardware related pointer func.
	cfgCanC.ChipSelectFp = &ChipSelectFpC;
 8000346:	4b14      	ldr	r3, [pc, #80]	; (8000398 <Init_CanC+0x58>)
 8000348:	4a14      	ldr	r2, [pc, #80]	; (800039c <Init_CanC+0x5c>)
 800034a:	615a      	str	r2, [r3, #20]
	cfgCanC.ChipUnSelectFp = &ChipUnSelectFpC;
 800034c:	4b12      	ldr	r3, [pc, #72]	; (8000398 <Init_CanC+0x58>)
 800034e:	4a14      	ldr	r2, [pc, #80]	; (80003a0 <Init_CanC+0x60>)
 8000350:	619a      	str	r2, [r3, #24]
	cfgCanC.SPIReadFp = &SPIReadFpC;
 8000352:	4b11      	ldr	r3, [pc, #68]	; (8000398 <Init_CanC+0x58>)
 8000354:	4a13      	ldr	r2, [pc, #76]	; (80003a4 <Init_CanC+0x64>)
 8000356:	625a      	str	r2, [r3, #36]	; 0x24
	cfgCanC.SPIReadWriteFp = &SPIReadWriteFpC;
 8000358:	4b0f      	ldr	r3, [pc, #60]	; (8000398 <Init_CanC+0x58>)
 800035a:	4a13      	ldr	r2, [pc, #76]	; (80003a8 <Init_CanC+0x68>)
 800035c:	61da      	str	r2, [r3, #28]
	cfgCanC.SPIWriteFp = &SPIWriteFpC;
 800035e:	4b0e      	ldr	r3, [pc, #56]	; (8000398 <Init_CanC+0x58>)
 8000360:	4a12      	ldr	r2, [pc, #72]	; (80003ac <Init_CanC+0x6c>)
 8000362:	621a      	str	r2, [r3, #32]

	// init
	ChipUnSelectFpC();
 8000364:	f000 ffc0 	bl	80012e8 <ChipUnSelectFpC>

	uint8_t result = begin(&cfgCanC, CAN_500KBPS, MCP_8MHz);
 8000368:	2203      	movs	r2, #3
 800036a:	2110      	movs	r1, #16
 800036c:	480a      	ldr	r0, [pc, #40]	; (8000398 <Init_CanC+0x58>)
 800036e:	f000 ff53 	bl	8001218 <begin>
 8000372:	4603      	mov	r3, r0
 8000374:	71fb      	strb	r3, [r7, #7]
	//can the CAN run
	if (result == CAN_OK) {
 8000376:	79fb      	ldrb	r3, [r7, #7]
 8000378:	2b00      	cmp	r3, #0
 800037a:	d103      	bne.n	8000384 <Init_CanC+0x44>
		debugPrint("CAN_C_OK\n");
 800037c:	480c      	ldr	r0, [pc, #48]	; (80003b0 <Init_CanC+0x70>)
 800037e:	f000 f889 	bl	8000494 <dbgPrint>
	}
	else {
		period_of_led_blink = _100_MS;
		debugPrint("CAN_C_FAIL\n");
	}
}
 8000382:	e005      	b.n	8000390 <Init_CanC+0x50>
		period_of_led_blink = _100_MS;
 8000384:	4b0b      	ldr	r3, [pc, #44]	; (80003b4 <Init_CanC+0x74>)
 8000386:	2264      	movs	r2, #100	; 0x64
 8000388:	601a      	str	r2, [r3, #0]
		debugPrint("CAN_C_FAIL\n");
 800038a:	480b      	ldr	r0, [pc, #44]	; (80003b8 <Init_CanC+0x78>)
 800038c:	f000 f882 	bl	8000494 <dbgPrint>
}
 8000390:	bf00      	nop
 8000392:	3708      	adds	r7, #8
 8000394:	46bd      	mov	sp, r7
 8000396:	bd80      	pop	{r7, pc}
 8000398:	200000bc 	.word	0x200000bc
 800039c:	08001301 	.word	0x08001301
 80003a0:	080012e9 	.word	0x080012e9
 80003a4:	08001361 	.word	0x08001361
 80003a8:	08001319 	.word	0x08001319
 80003ac:	0800133d 	.word	0x0800133d
 80003b0:	08005118 	.word	0x08005118
 80003b4:	20000000 	.word	0x20000000
 80003b8:	08005124 	.word	0x08005124

080003bc <Init_CanD>:
//  Returns     :
//  Scope       :
//  Function    :
/*--------------------------------------------------------*/
void Init_CanD()
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	b082      	sub	sp, #8
 80003c0:	af00      	add	r7, sp, #0
	/****CanC***/
	// declaring  hardware related pointer func.
	cfgCanD.ChipSelectFp = &ChipSelectFpD;
 80003c2:	4b14      	ldr	r3, [pc, #80]	; (8000414 <Init_CanD+0x58>)
 80003c4:	4a14      	ldr	r2, [pc, #80]	; (8000418 <Init_CanD+0x5c>)
 80003c6:	615a      	str	r2, [r3, #20]
	cfgCanD.ChipUnSelectFp = &ChipUnSelectFpD;
 80003c8:	4b12      	ldr	r3, [pc, #72]	; (8000414 <Init_CanD+0x58>)
 80003ca:	4a14      	ldr	r2, [pc, #80]	; (800041c <Init_CanD+0x60>)
 80003cc:	619a      	str	r2, [r3, #24]
	cfgCanD.SPIReadFp = &SPIReadFpD;
 80003ce:	4b11      	ldr	r3, [pc, #68]	; (8000414 <Init_CanD+0x58>)
 80003d0:	4a13      	ldr	r2, [pc, #76]	; (8000420 <Init_CanD+0x64>)
 80003d2:	625a      	str	r2, [r3, #36]	; 0x24
	cfgCanD.SPIReadWriteFp = &SPIReadWriteFpD;
 80003d4:	4b0f      	ldr	r3, [pc, #60]	; (8000414 <Init_CanD+0x58>)
 80003d6:	4a13      	ldr	r2, [pc, #76]	; (8000424 <Init_CanD+0x68>)
 80003d8:	61da      	str	r2, [r3, #28]
	cfgCanD.SPIWriteFp = &SPIWriteFpD;
 80003da:	4b0e      	ldr	r3, [pc, #56]	; (8000414 <Init_CanD+0x58>)
 80003dc:	4a12      	ldr	r2, [pc, #72]	; (8000428 <Init_CanD+0x6c>)
 80003de:	621a      	str	r2, [r3, #32]

	// init
	ChipUnSelectFpD();
 80003e0:	f000 ffd0 	bl	8001384 <ChipUnSelectFpD>

	uint8_t result = begin(&cfgCanD, CAN_500KBPS, MCP_8MHz);
 80003e4:	2203      	movs	r2, #3
 80003e6:	2110      	movs	r1, #16
 80003e8:	480a      	ldr	r0, [pc, #40]	; (8000414 <Init_CanD+0x58>)
 80003ea:	f000 ff15 	bl	8001218 <begin>
 80003ee:	4603      	mov	r3, r0
 80003f0:	71fb      	strb	r3, [r7, #7]
	//can the CAN run
	if (result == CAN_OK) {
 80003f2:	79fb      	ldrb	r3, [r7, #7]
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d103      	bne.n	8000400 <Init_CanD+0x44>
		debugPrint("CAN_D_OK\n");
 80003f8:	480c      	ldr	r0, [pc, #48]	; (800042c <Init_CanD+0x70>)
 80003fa:	f000 f84b 	bl	8000494 <dbgPrint>
	else {
		period_of_led_blink = _100_MS;
		debugPrint("CAN_D_FAIL\n");
	}

}
 80003fe:	e005      	b.n	800040c <Init_CanD+0x50>
		period_of_led_blink = _100_MS;
 8000400:	4b0b      	ldr	r3, [pc, #44]	; (8000430 <Init_CanD+0x74>)
 8000402:	2264      	movs	r2, #100	; 0x64
 8000404:	601a      	str	r2, [r3, #0]
		debugPrint("CAN_D_FAIL\n");
 8000406:	480b      	ldr	r0, [pc, #44]	; (8000434 <Init_CanD+0x78>)
 8000408:	f000 f844 	bl	8000494 <dbgPrint>
}
 800040c:	bf00      	nop
 800040e:	3708      	adds	r7, #8
 8000410:	46bd      	mov	sp, r7
 8000412:	bd80      	pop	{r7, pc}
 8000414:	200000e4 	.word	0x200000e4
 8000418:	0800139d 	.word	0x0800139d
 800041c:	08001385 	.word	0x08001385
 8000420:	080013fd 	.word	0x080013fd
 8000424:	080013b5 	.word	0x080013b5
 8000428:	080013d9 	.word	0x080013d9
 800042c:	08005130 	.word	0x08005130
 8000430:	20000000 	.word	0x20000000
 8000434:	0800513c 	.word	0x0800513c

08000438 <dbgPrintf>:
#include "stdarg.h"

extern UART_HandleTypeDef huart1;

void dbgPrintf(char *fmt, ...)
{
 8000438:	b40f      	push	{r0, r1, r2, r3}
 800043a:	b580      	push	{r7, lr}
 800043c:	b0c2      	sub	sp, #264	; 0x108
 800043e:	af00      	add	r7, sp, #0
  char dbgBuf[256];
  va_list args;
  va_start(args, fmt);
 8000440:	f507 728a 	add.w	r2, r7, #276	; 0x114
 8000444:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000448:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800044c:	601a      	str	r2, [r3, #0]
  int rc = vsnprintf(dbgBuf, sizeof(dbgBuf), fmt, args);
 800044e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000452:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000456:	1d38      	adds	r0, r7, #4
 8000458:	681b      	ldr	r3, [r3, #0]
 800045a:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 800045e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000462:	f004 f9b7 	bl	80047d4 <vsniprintf>
 8000466:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
  va_end(args);

  HAL_UART_Transmit(&huart1, dbgBuf, strlen(dbgBuf), 10);
 800046a:	1d3b      	adds	r3, r7, #4
 800046c:	4618      	mov	r0, r3
 800046e:	f7ff fe6d 	bl	800014c <strlen>
 8000472:	4603      	mov	r3, r0
 8000474:	b29a      	uxth	r2, r3
 8000476:	1d39      	adds	r1, r7, #4
 8000478:	230a      	movs	r3, #10
 800047a:	4805      	ldr	r0, [pc, #20]	; (8000490 <dbgPrintf+0x58>)
 800047c:	f003 ffcc 	bl	8004418 <HAL_UART_Transmit>
}
 8000480:	bf00      	nop
 8000482:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8000486:	46bd      	mov	sp, r7
 8000488:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800048c:	b004      	add	sp, #16
 800048e:	4770      	bx	lr
 8000490:	20000238 	.word	0x20000238

08000494 <dbgPrint>:

void dbgPrint(char *str)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	b082      	sub	sp, #8
 8000498:	af00      	add	r7, sp, #0
 800049a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, str, strlen(str), 10);
 800049c:	6878      	ldr	r0, [r7, #4]
 800049e:	f7ff fe55 	bl	800014c <strlen>
 80004a2:	4603      	mov	r3, r0
 80004a4:	b29a      	uxth	r2, r3
 80004a6:	230a      	movs	r3, #10
 80004a8:	6879      	ldr	r1, [r7, #4]
 80004aa:	4803      	ldr	r0, [pc, #12]	; (80004b8 <dbgPrint+0x24>)
 80004ac:	f003 ffb4 	bl	8004418 <HAL_UART_Transmit>
}
 80004b0:	bf00      	nop
 80004b2:	3708      	adds	r7, #8
 80004b4:	46bd      	mov	sp, r7
 80004b6:	bd80      	pop	{r7, pc}
 80004b8:	20000238 	.word	0x20000238

080004bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c0:	f001 fa02 	bl	80018c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c4:	f000 f878 	bl	80005b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004c8:	f000 f9b8 	bl	800083c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80004cc:	f000 f98c 	bl	80007e8 <MX_USART1_UART_Init>
  MX_CAN_Init();
 80004d0:	f000 f8b8 	bl	8000644 <MX_CAN_Init>
  MX_I2C1_Init();
 80004d4:	f000 f8ee 	bl	80006b4 <MX_I2C1_Init>
  MX_SPI1_Init();
 80004d8:	f000 f91a 	bl	8000710 <MX_SPI1_Init>
  MX_SPI2_Init();
 80004dc:	f000 f94e 	bl	800077c <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  debugPrint("/* USER CODE BEGIN 2 */\n");
 80004e0:	4828      	ldr	r0, [pc, #160]	; (8000584 <main+0xc8>)
 80004e2:	f7ff ffd7 	bl	8000494 <dbgPrint>

  Init_CanA();
 80004e6:	f7ff fe59 	bl	800019c <Init_CanA>
  Init_Eeprom();
 80004ea:	f7ff fec5 	bl	8000278 <Init_Eeprom>
  Init_CanB();
 80004ee:	f7ff fee9 	bl	80002c4 <Init_CanB>
  Init_CanC();
 80004f2:	f7ff ff25 	bl	8000340 <Init_CanC>
  Init_CanD();
 80004f6:	f7ff ff61 	bl	80003bc <Init_CanD>


  debugPrint("/* USER CODE  END  2 */\n");
 80004fa:	4823      	ldr	r0, [pc, #140]	; (8000588 <main+0xcc>)
 80004fc:	f7ff ffca 	bl	8000494 <dbgPrint>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(isCAN_A_RXed == 1)
 8000500:	4b22      	ldr	r3, [pc, #136]	; (800058c <main+0xd0>)
 8000502:	781b      	ldrb	r3, [r3, #0]
 8000504:	b2db      	uxtb	r3, r3
 8000506:	2b01      	cmp	r3, #1
 8000508:	d105      	bne.n	8000516 <main+0x5a>
	  {
		  isCAN_A_RXed = 0;
 800050a:	4b20      	ldr	r3, [pc, #128]	; (800058c <main+0xd0>)
 800050c:	2200      	movs	r2, #0
 800050e:	701a      	strb	r2, [r3, #0]

		  debugPrint("AAA\n");
 8000510:	481f      	ldr	r0, [pc, #124]	; (8000590 <main+0xd4>)
 8000512:	f7ff ffbf 	bl	8000494 <dbgPrint>
	  }

	  if(isCAN_B_RXed == 1)
 8000516:	4b1f      	ldr	r3, [pc, #124]	; (8000594 <main+0xd8>)
 8000518:	781b      	ldrb	r3, [r3, #0]
 800051a:	b2db      	uxtb	r3, r3
 800051c:	2b01      	cmp	r3, #1
 800051e:	d105      	bne.n	800052c <main+0x70>
	  {
		  isCAN_B_RXed = 0;
 8000520:	4b1c      	ldr	r3, [pc, #112]	; (8000594 <main+0xd8>)
 8000522:	2200      	movs	r2, #0
 8000524:	701a      	strb	r2, [r3, #0]

		  debugPrint("BBB\n");
 8000526:	481c      	ldr	r0, [pc, #112]	; (8000598 <main+0xdc>)
 8000528:	f7ff ffb4 	bl	8000494 <dbgPrint>
	  }

	  if(isCAN_C_RXed == 1)
 800052c:	4b1b      	ldr	r3, [pc, #108]	; (800059c <main+0xe0>)
 800052e:	781b      	ldrb	r3, [r3, #0]
 8000530:	b2db      	uxtb	r3, r3
 8000532:	2b01      	cmp	r3, #1
 8000534:	d105      	bne.n	8000542 <main+0x86>
	  {
		  isCAN_C_RXed = 0;
 8000536:	4b19      	ldr	r3, [pc, #100]	; (800059c <main+0xe0>)
 8000538:	2200      	movs	r2, #0
 800053a:	701a      	strb	r2, [r3, #0]

		  debugPrint("CCC\n");
 800053c:	4818      	ldr	r0, [pc, #96]	; (80005a0 <main+0xe4>)
 800053e:	f7ff ffa9 	bl	8000494 <dbgPrint>
	  }

	  if(isCAN_D_RXed == 1)
 8000542:	4b18      	ldr	r3, [pc, #96]	; (80005a4 <main+0xe8>)
 8000544:	781b      	ldrb	r3, [r3, #0]
 8000546:	b2db      	uxtb	r3, r3
 8000548:	2b01      	cmp	r3, #1
 800054a:	d105      	bne.n	8000558 <main+0x9c>
	  {
		  isCAN_D_RXed = 0;
 800054c:	4b15      	ldr	r3, [pc, #84]	; (80005a4 <main+0xe8>)
 800054e:	2200      	movs	r2, #0
 8000550:	701a      	strb	r2, [r3, #0]

		  debugPrint("DDD\n");
 8000552:	4815      	ldr	r0, [pc, #84]	; (80005a8 <main+0xec>)
 8000554:	f7ff ff9e 	bl	8000494 <dbgPrint>
	  }

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(HAL_GetTick() - last_time > period_of_led_blink)
 8000558:	f001 fa0e 	bl	8001978 <HAL_GetTick>
 800055c:	4602      	mov	r2, r0
 800055e:	4b13      	ldr	r3, [pc, #76]	; (80005ac <main+0xf0>)
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	1ad2      	subs	r2, r2, r3
 8000564:	4b12      	ldr	r3, [pc, #72]	; (80005b0 <main+0xf4>)
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	429a      	cmp	r2, r3
 800056a:	d9c9      	bls.n	8000500 <main+0x44>
	  {
		  last_time = HAL_GetTick();
 800056c:	f001 fa04 	bl	8001978 <HAL_GetTick>
 8000570:	4603      	mov	r3, r0
 8000572:	4a0e      	ldr	r2, [pc, #56]	; (80005ac <main+0xf0>)
 8000574:	6013      	str	r3, [r2, #0]

		  HAL_GPIO_TogglePin(LED_BLINK_GPIO_Port, LED_BLINK_Pin);
 8000576:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800057a:	480e      	ldr	r0, [pc, #56]	; (80005b4 <main+0xf8>)
 800057c:	f002 fa46 	bl	8002a0c <HAL_GPIO_TogglePin>
	  if(isCAN_A_RXed == 1)
 8000580:	e7be      	b.n	8000500 <main+0x44>
 8000582:	bf00      	nop
 8000584:	08005148 	.word	0x08005148
 8000588:	08005164 	.word	0x08005164
 800058c:	200002e0 	.word	0x200002e0
 8000590:	08005180 	.word	0x08005180
 8000594:	200002e1 	.word	0x200002e1
 8000598:	08005188 	.word	0x08005188
 800059c:	200002e2 	.word	0x200002e2
 80005a0:	08005190 	.word	0x08005190
 80005a4:	200002e3 	.word	0x200002e3
 80005a8:	08005198 	.word	0x08005198
 80005ac:	20000280 	.word	0x20000280
 80005b0:	20000000 	.word	0x20000000
 80005b4:	40011000 	.word	0x40011000

080005b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b090      	sub	sp, #64	; 0x40
 80005bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005be:	f107 0318 	add.w	r3, r7, #24
 80005c2:	2228      	movs	r2, #40	; 0x28
 80005c4:	2100      	movs	r1, #0
 80005c6:	4618      	mov	r0, r3
 80005c8:	f004 f8d0 	bl	800476c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005cc:	1d3b      	adds	r3, r7, #4
 80005ce:	2200      	movs	r2, #0
 80005d0:	601a      	str	r2, [r3, #0]
 80005d2:	605a      	str	r2, [r3, #4]
 80005d4:	609a      	str	r2, [r3, #8]
 80005d6:	60da      	str	r2, [r3, #12]
 80005d8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005da:	2301      	movs	r3, #1
 80005dc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005de:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005e2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80005e4:	2300      	movs	r3, #0
 80005e6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005e8:	2301      	movs	r3, #1
 80005ea:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005ec:	2302      	movs	r3, #2
 80005ee:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005f0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005f4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80005f6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80005fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005fc:	f107 0318 	add.w	r3, r7, #24
 8000600:	4618      	mov	r0, r3
 8000602:	f002 fd21 	bl	8003048 <HAL_RCC_OscConfig>
 8000606:	4603      	mov	r3, r0
 8000608:	2b00      	cmp	r3, #0
 800060a:	d001      	beq.n	8000610 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800060c:	f000 fa32 	bl	8000a74 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000610:	230f      	movs	r3, #15
 8000612:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000614:	2302      	movs	r3, #2
 8000616:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000618:	2300      	movs	r3, #0
 800061a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800061c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000620:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000622:	2300      	movs	r3, #0
 8000624:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000626:	1d3b      	adds	r3, r7, #4
 8000628:	2102      	movs	r1, #2
 800062a:	4618      	mov	r0, r3
 800062c:	f002 ff8e 	bl	800354c <HAL_RCC_ClockConfig>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d001      	beq.n	800063a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000636:	f000 fa1d 	bl	8000a74 <Error_Handler>
  }
}
 800063a:	bf00      	nop
 800063c:	3740      	adds	r7, #64	; 0x40
 800063e:	46bd      	mov	sp, r7
 8000640:	bd80      	pop	{r7, pc}
	...

08000644 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8000648:	4b18      	ldr	r3, [pc, #96]	; (80006ac <MX_CAN_Init+0x68>)
 800064a:	4a19      	ldr	r2, [pc, #100]	; (80006b0 <MX_CAN_Init+0x6c>)
 800064c:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 9;
 800064e:	4b17      	ldr	r3, [pc, #92]	; (80006ac <MX_CAN_Init+0x68>)
 8000650:	2209      	movs	r2, #9
 8000652:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000654:	4b15      	ldr	r3, [pc, #84]	; (80006ac <MX_CAN_Init+0x68>)
 8000656:	2200      	movs	r2, #0
 8000658:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_2TQ;
 800065a:	4b14      	ldr	r3, [pc, #80]	; (80006ac <MX_CAN_Init+0x68>)
 800065c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000660:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_3TQ;
 8000662:	4b12      	ldr	r3, [pc, #72]	; (80006ac <MX_CAN_Init+0x68>)
 8000664:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000668:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_4TQ;
 800066a:	4b10      	ldr	r3, [pc, #64]	; (80006ac <MX_CAN_Init+0x68>)
 800066c:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8000670:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000672:	4b0e      	ldr	r3, [pc, #56]	; (80006ac <MX_CAN_Init+0x68>)
 8000674:	2200      	movs	r2, #0
 8000676:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000678:	4b0c      	ldr	r3, [pc, #48]	; (80006ac <MX_CAN_Init+0x68>)
 800067a:	2200      	movs	r2, #0
 800067c:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 800067e:	4b0b      	ldr	r3, [pc, #44]	; (80006ac <MX_CAN_Init+0x68>)
 8000680:	2200      	movs	r2, #0
 8000682:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000684:	4b09      	ldr	r3, [pc, #36]	; (80006ac <MX_CAN_Init+0x68>)
 8000686:	2200      	movs	r2, #0
 8000688:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 800068a:	4b08      	ldr	r3, [pc, #32]	; (80006ac <MX_CAN_Init+0x68>)
 800068c:	2200      	movs	r2, #0
 800068e:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000690:	4b06      	ldr	r3, [pc, #24]	; (80006ac <MX_CAN_Init+0x68>)
 8000692:	2200      	movs	r2, #0
 8000694:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000696:	4805      	ldr	r0, [pc, #20]	; (80006ac <MX_CAN_Init+0x68>)
 8000698:	f001 f99c 	bl	80019d4 <HAL_CAN_Init>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d001      	beq.n	80006a6 <MX_CAN_Init+0x62>
  {
    Error_Handler();
 80006a2:	f000 f9e7 	bl	8000a74 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 80006a6:	bf00      	nop
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	2000010c 	.word	0x2000010c
 80006b0:	40006400 	.word	0x40006400

080006b4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006b8:	4b12      	ldr	r3, [pc, #72]	; (8000704 <MX_I2C1_Init+0x50>)
 80006ba:	4a13      	ldr	r2, [pc, #76]	; (8000708 <MX_I2C1_Init+0x54>)
 80006bc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80006be:	4b11      	ldr	r3, [pc, #68]	; (8000704 <MX_I2C1_Init+0x50>)
 80006c0:	4a12      	ldr	r2, [pc, #72]	; (800070c <MX_I2C1_Init+0x58>)
 80006c2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006c4:	4b0f      	ldr	r3, [pc, #60]	; (8000704 <MX_I2C1_Init+0x50>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80006ca:	4b0e      	ldr	r3, [pc, #56]	; (8000704 <MX_I2C1_Init+0x50>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006d0:	4b0c      	ldr	r3, [pc, #48]	; (8000704 <MX_I2C1_Init+0x50>)
 80006d2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006d6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006d8:	4b0a      	ldr	r3, [pc, #40]	; (8000704 <MX_I2C1_Init+0x50>)
 80006da:	2200      	movs	r2, #0
 80006dc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80006de:	4b09      	ldr	r3, [pc, #36]	; (8000704 <MX_I2C1_Init+0x50>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006e4:	4b07      	ldr	r3, [pc, #28]	; (8000704 <MX_I2C1_Init+0x50>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006ea:	4b06      	ldr	r3, [pc, #24]	; (8000704 <MX_I2C1_Init+0x50>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006f0:	4804      	ldr	r0, [pc, #16]	; (8000704 <MX_I2C1_Init+0x50>)
 80006f2:	f002 f9bd 	bl	8002a70 <HAL_I2C_Init>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d001      	beq.n	8000700 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80006fc:	f000 f9ba 	bl	8000a74 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000700:	bf00      	nop
 8000702:	bd80      	pop	{r7, pc}
 8000704:	20000134 	.word	0x20000134
 8000708:	40005400 	.word	0x40005400
 800070c:	00061a80 	.word	0x00061a80

08000710 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000714:	4b17      	ldr	r3, [pc, #92]	; (8000774 <MX_SPI1_Init+0x64>)
 8000716:	4a18      	ldr	r2, [pc, #96]	; (8000778 <MX_SPI1_Init+0x68>)
 8000718:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800071a:	4b16      	ldr	r3, [pc, #88]	; (8000774 <MX_SPI1_Init+0x64>)
 800071c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000720:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000722:	4b14      	ldr	r3, [pc, #80]	; (8000774 <MX_SPI1_Init+0x64>)
 8000724:	2200      	movs	r2, #0
 8000726:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000728:	4b12      	ldr	r3, [pc, #72]	; (8000774 <MX_SPI1_Init+0x64>)
 800072a:	2200      	movs	r2, #0
 800072c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800072e:	4b11      	ldr	r3, [pc, #68]	; (8000774 <MX_SPI1_Init+0x64>)
 8000730:	2200      	movs	r2, #0
 8000732:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000734:	4b0f      	ldr	r3, [pc, #60]	; (8000774 <MX_SPI1_Init+0x64>)
 8000736:	2200      	movs	r2, #0
 8000738:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800073a:	4b0e      	ldr	r3, [pc, #56]	; (8000774 <MX_SPI1_Init+0x64>)
 800073c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000740:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000742:	4b0c      	ldr	r3, [pc, #48]	; (8000774 <MX_SPI1_Init+0x64>)
 8000744:	2210      	movs	r2, #16
 8000746:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000748:	4b0a      	ldr	r3, [pc, #40]	; (8000774 <MX_SPI1_Init+0x64>)
 800074a:	2200      	movs	r2, #0
 800074c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800074e:	4b09      	ldr	r3, [pc, #36]	; (8000774 <MX_SPI1_Init+0x64>)
 8000750:	2200      	movs	r2, #0
 8000752:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000754:	4b07      	ldr	r3, [pc, #28]	; (8000774 <MX_SPI1_Init+0x64>)
 8000756:	2200      	movs	r2, #0
 8000758:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800075a:	4b06      	ldr	r3, [pc, #24]	; (8000774 <MX_SPI1_Init+0x64>)
 800075c:	220a      	movs	r2, #10
 800075e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000760:	4804      	ldr	r0, [pc, #16]	; (8000774 <MX_SPI1_Init+0x64>)
 8000762:	f003 f881 	bl	8003868 <HAL_SPI_Init>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d001      	beq.n	8000770 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800076c:	f000 f982 	bl	8000a74 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000770:	bf00      	nop
 8000772:	bd80      	pop	{r7, pc}
 8000774:	20000188 	.word	0x20000188
 8000778:	40013000 	.word	0x40013000

0800077c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000780:	4b17      	ldr	r3, [pc, #92]	; (80007e0 <MX_SPI2_Init+0x64>)
 8000782:	4a18      	ldr	r2, [pc, #96]	; (80007e4 <MX_SPI2_Init+0x68>)
 8000784:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000786:	4b16      	ldr	r3, [pc, #88]	; (80007e0 <MX_SPI2_Init+0x64>)
 8000788:	f44f 7282 	mov.w	r2, #260	; 0x104
 800078c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800078e:	4b14      	ldr	r3, [pc, #80]	; (80007e0 <MX_SPI2_Init+0x64>)
 8000790:	2200      	movs	r2, #0
 8000792:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000794:	4b12      	ldr	r3, [pc, #72]	; (80007e0 <MX_SPI2_Init+0x64>)
 8000796:	2200      	movs	r2, #0
 8000798:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800079a:	4b11      	ldr	r3, [pc, #68]	; (80007e0 <MX_SPI2_Init+0x64>)
 800079c:	2200      	movs	r2, #0
 800079e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007a0:	4b0f      	ldr	r3, [pc, #60]	; (80007e0 <MX_SPI2_Init+0x64>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80007a6:	4b0e      	ldr	r3, [pc, #56]	; (80007e0 <MX_SPI2_Init+0x64>)
 80007a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007ac:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80007ae:	4b0c      	ldr	r3, [pc, #48]	; (80007e0 <MX_SPI2_Init+0x64>)
 80007b0:	2208      	movs	r2, #8
 80007b2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007b4:	4b0a      	ldr	r3, [pc, #40]	; (80007e0 <MX_SPI2_Init+0x64>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80007ba:	4b09      	ldr	r3, [pc, #36]	; (80007e0 <MX_SPI2_Init+0x64>)
 80007bc:	2200      	movs	r2, #0
 80007be:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007c0:	4b07      	ldr	r3, [pc, #28]	; (80007e0 <MX_SPI2_Init+0x64>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80007c6:	4b06      	ldr	r3, [pc, #24]	; (80007e0 <MX_SPI2_Init+0x64>)
 80007c8:	220a      	movs	r2, #10
 80007ca:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80007cc:	4804      	ldr	r0, [pc, #16]	; (80007e0 <MX_SPI2_Init+0x64>)
 80007ce:	f003 f84b 	bl	8003868 <HAL_SPI_Init>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d001      	beq.n	80007dc <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80007d8:	f000 f94c 	bl	8000a74 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80007dc:	bf00      	nop
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	200001e0 	.word	0x200001e0
 80007e4:	40003800 	.word	0x40003800

080007e8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80007ec:	4b11      	ldr	r3, [pc, #68]	; (8000834 <MX_USART1_UART_Init+0x4c>)
 80007ee:	4a12      	ldr	r2, [pc, #72]	; (8000838 <MX_USART1_UART_Init+0x50>)
 80007f0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80007f2:	4b10      	ldr	r3, [pc, #64]	; (8000834 <MX_USART1_UART_Init+0x4c>)
 80007f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007f8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007fa:	4b0e      	ldr	r3, [pc, #56]	; (8000834 <MX_USART1_UART_Init+0x4c>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000800:	4b0c      	ldr	r3, [pc, #48]	; (8000834 <MX_USART1_UART_Init+0x4c>)
 8000802:	2200      	movs	r2, #0
 8000804:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000806:	4b0b      	ldr	r3, [pc, #44]	; (8000834 <MX_USART1_UART_Init+0x4c>)
 8000808:	2200      	movs	r2, #0
 800080a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800080c:	4b09      	ldr	r3, [pc, #36]	; (8000834 <MX_USART1_UART_Init+0x4c>)
 800080e:	220c      	movs	r2, #12
 8000810:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000812:	4b08      	ldr	r3, [pc, #32]	; (8000834 <MX_USART1_UART_Init+0x4c>)
 8000814:	2200      	movs	r2, #0
 8000816:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000818:	4b06      	ldr	r3, [pc, #24]	; (8000834 <MX_USART1_UART_Init+0x4c>)
 800081a:	2200      	movs	r2, #0
 800081c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800081e:	4805      	ldr	r0, [pc, #20]	; (8000834 <MX_USART1_UART_Init+0x4c>)
 8000820:	f003 fdaa 	bl	8004378 <HAL_UART_Init>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800082a:	f000 f923 	bl	8000a74 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800082e:	bf00      	nop
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	20000238 	.word	0x20000238
 8000838:	40013800 	.word	0x40013800

0800083c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b088      	sub	sp, #32
 8000840:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000842:	f107 0310 	add.w	r3, r7, #16
 8000846:	2200      	movs	r2, #0
 8000848:	601a      	str	r2, [r3, #0]
 800084a:	605a      	str	r2, [r3, #4]
 800084c:	609a      	str	r2, [r3, #8]
 800084e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000850:	4b57      	ldr	r3, [pc, #348]	; (80009b0 <MX_GPIO_Init+0x174>)
 8000852:	699b      	ldr	r3, [r3, #24]
 8000854:	4a56      	ldr	r2, [pc, #344]	; (80009b0 <MX_GPIO_Init+0x174>)
 8000856:	f043 0310 	orr.w	r3, r3, #16
 800085a:	6193      	str	r3, [r2, #24]
 800085c:	4b54      	ldr	r3, [pc, #336]	; (80009b0 <MX_GPIO_Init+0x174>)
 800085e:	699b      	ldr	r3, [r3, #24]
 8000860:	f003 0310 	and.w	r3, r3, #16
 8000864:	60fb      	str	r3, [r7, #12]
 8000866:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000868:	4b51      	ldr	r3, [pc, #324]	; (80009b0 <MX_GPIO_Init+0x174>)
 800086a:	699b      	ldr	r3, [r3, #24]
 800086c:	4a50      	ldr	r2, [pc, #320]	; (80009b0 <MX_GPIO_Init+0x174>)
 800086e:	f043 0320 	orr.w	r3, r3, #32
 8000872:	6193      	str	r3, [r2, #24]
 8000874:	4b4e      	ldr	r3, [pc, #312]	; (80009b0 <MX_GPIO_Init+0x174>)
 8000876:	699b      	ldr	r3, [r3, #24]
 8000878:	f003 0320 	and.w	r3, r3, #32
 800087c:	60bb      	str	r3, [r7, #8]
 800087e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000880:	4b4b      	ldr	r3, [pc, #300]	; (80009b0 <MX_GPIO_Init+0x174>)
 8000882:	699b      	ldr	r3, [r3, #24]
 8000884:	4a4a      	ldr	r2, [pc, #296]	; (80009b0 <MX_GPIO_Init+0x174>)
 8000886:	f043 0304 	orr.w	r3, r3, #4
 800088a:	6193      	str	r3, [r2, #24]
 800088c:	4b48      	ldr	r3, [pc, #288]	; (80009b0 <MX_GPIO_Init+0x174>)
 800088e:	699b      	ldr	r3, [r3, #24]
 8000890:	f003 0304 	and.w	r3, r3, #4
 8000894:	607b      	str	r3, [r7, #4]
 8000896:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000898:	4b45      	ldr	r3, [pc, #276]	; (80009b0 <MX_GPIO_Init+0x174>)
 800089a:	699b      	ldr	r3, [r3, #24]
 800089c:	4a44      	ldr	r2, [pc, #272]	; (80009b0 <MX_GPIO_Init+0x174>)
 800089e:	f043 0308 	orr.w	r3, r3, #8
 80008a2:	6193      	str	r3, [r2, #24]
 80008a4:	4b42      	ldr	r3, [pc, #264]	; (80009b0 <MX_GPIO_Init+0x174>)
 80008a6:	699b      	ldr	r3, [r3, #24]
 80008a8:	f003 0308 	and.w	r3, r3, #8
 80008ac:	603b      	str	r3, [r7, #0]
 80008ae:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_BLINK_GPIO_Port, LED_BLINK_Pin, GPIO_PIN_RESET);
 80008b0:	2200      	movs	r2, #0
 80008b2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008b6:	483f      	ldr	r0, [pc, #252]	; (80009b4 <MX_GPIO_Init+0x178>)
 80008b8:	f002 f890 	bl	80029dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CS_CAN_D_Pin|RST_CAND_IC_Pin|RST_CANB_IC_Pin|CS_CAN_C_Pin
 80008bc:	2201      	movs	r2, #1
 80008be:	f640 110e 	movw	r1, #2318	; 0x90e
 80008c2:	483d      	ldr	r0, [pc, #244]	; (80009b8 <MX_GPIO_Init+0x17c>)
 80008c4:	f002 f88a 	bl	80029dc <HAL_GPIO_WritePin>
                          |RST_CANC_IC_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_CAN_B_GPIO_Port, CS_CAN_B_Pin, GPIO_PIN_SET);
 80008c8:	2201      	movs	r2, #1
 80008ca:	2101      	movs	r1, #1
 80008cc:	483b      	ldr	r0, [pc, #236]	; (80009bc <MX_GPIO_Init+0x180>)
 80008ce:	f002 f885 	bl	80029dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CAN_D_LED_Pin|CAN_B_LED_Pin|CAN_A_LED_Pin, GPIO_PIN_RESET);
 80008d2:	2200      	movs	r2, #0
 80008d4:	f241 010a 	movw	r1, #4106	; 0x100a
 80008d8:	4838      	ldr	r0, [pc, #224]	; (80009bc <MX_GPIO_Init+0x180>)
 80008da:	f002 f87f 	bl	80029dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CAN_C_LED_GPIO_Port, CAN_C_LED_Pin, GPIO_PIN_RESET);
 80008de:	2200      	movs	r2, #0
 80008e0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80008e4:	4834      	ldr	r0, [pc, #208]	; (80009b8 <MX_GPIO_Init+0x17c>)
 80008e6:	f002 f879 	bl	80029dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_BLINK_Pin */
  GPIO_InitStruct.Pin = LED_BLINK_Pin;
 80008ea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008ee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f0:	2301      	movs	r3, #1
 80008f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f4:	2300      	movs	r3, #0
 80008f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f8:	2302      	movs	r3, #2
 80008fa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_BLINK_GPIO_Port, &GPIO_InitStruct);
 80008fc:	f107 0310 	add.w	r3, r7, #16
 8000900:	4619      	mov	r1, r3
 8000902:	482c      	ldr	r0, [pc, #176]	; (80009b4 <MX_GPIO_Init+0x178>)
 8000904:	f001 fee6 	bl	80026d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : CAND_INT_Pin CANB_INT_Pin CANC_INT_Pin */
  GPIO_InitStruct.Pin = CAND_INT_Pin|CANB_INT_Pin|CANC_INT_Pin;
 8000908:	f248 0311 	movw	r3, #32785	; 0x8011
 800090c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800090e:	4b2c      	ldr	r3, [pc, #176]	; (80009c0 <MX_GPIO_Init+0x184>)
 8000910:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000912:	2300      	movs	r3, #0
 8000914:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000916:	f107 0310 	add.w	r3, r7, #16
 800091a:	4619      	mov	r1, r3
 800091c:	4826      	ldr	r0, [pc, #152]	; (80009b8 <MX_GPIO_Init+0x17c>)
 800091e:	f001 fed9 	bl	80026d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_CAN_D_Pin RST_CAND_IC_Pin RST_CANB_IC_Pin CS_CAN_C_Pin
                           RST_CANC_IC_Pin CAN_C_LED_Pin */
  GPIO_InitStruct.Pin = CS_CAN_D_Pin|RST_CAND_IC_Pin|RST_CANB_IC_Pin|CS_CAN_C_Pin
 8000922:	f641 130e 	movw	r3, #6414	; 0x190e
 8000926:	613b      	str	r3, [r7, #16]
                          |RST_CANC_IC_Pin|CAN_C_LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000928:	2301      	movs	r3, #1
 800092a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092c:	2300      	movs	r3, #0
 800092e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000930:	2302      	movs	r3, #2
 8000932:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000934:	f107 0310 	add.w	r3, r7, #16
 8000938:	4619      	mov	r1, r3
 800093a:	481f      	ldr	r0, [pc, #124]	; (80009b8 <MX_GPIO_Init+0x17c>)
 800093c:	f001 feca 	bl	80026d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_CAN_B_Pin CAN_D_LED_Pin CAN_B_LED_Pin CAN_A_LED_Pin */
  GPIO_InitStruct.Pin = CS_CAN_B_Pin|CAN_D_LED_Pin|CAN_B_LED_Pin|CAN_A_LED_Pin;
 8000940:	f241 030b 	movw	r3, #4107	; 0x100b
 8000944:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000946:	2301      	movs	r3, #1
 8000948:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094a:	2300      	movs	r3, #0
 800094c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800094e:	2302      	movs	r3, #2
 8000950:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000952:	f107 0310 	add.w	r3, r7, #16
 8000956:	4619      	mov	r1, r3
 8000958:	4818      	ldr	r0, [pc, #96]	; (80009bc <MX_GPIO_Init+0x180>)
 800095a:	f001 febb 	bl	80026d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN_0_Pin BTN_1_Pin */
  GPIO_InitStruct.Pin = BTN_0_Pin|BTN_1_Pin;
 800095e:	f44f 6382 	mov.w	r3, #1040	; 0x410
 8000962:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000964:	2300      	movs	r3, #0
 8000966:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000968:	2300      	movs	r3, #0
 800096a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800096c:	f107 0310 	add.w	r3, r7, #16
 8000970:	4619      	mov	r1, r3
 8000972:	4812      	ldr	r0, [pc, #72]	; (80009bc <MX_GPIO_Init+0x180>)
 8000974:	f001 feae 	bl	80026d4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000978:	2200      	movs	r2, #0
 800097a:	2100      	movs	r1, #0
 800097c:	2006      	movs	r0, #6
 800097e:	f001 fe72 	bl	8002666 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000982:	2006      	movs	r0, #6
 8000984:	f001 fe8b 	bl	800269e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8000988:	2200      	movs	r2, #0
 800098a:	2100      	movs	r1, #0
 800098c:	200a      	movs	r0, #10
 800098e:	f001 fe6a 	bl	8002666 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000992:	200a      	movs	r0, #10
 8000994:	f001 fe83 	bl	800269e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000998:	2200      	movs	r2, #0
 800099a:	2100      	movs	r1, #0
 800099c:	2028      	movs	r0, #40	; 0x28
 800099e:	f001 fe62 	bl	8002666 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80009a2:	2028      	movs	r0, #40	; 0x28
 80009a4:	f001 fe7b 	bl	800269e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009a8:	bf00      	nop
 80009aa:	3720      	adds	r7, #32
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	40021000 	.word	0x40021000
 80009b4:	40011000 	.word	0x40011000
 80009b8:	40010800 	.word	0x40010800
 80009bc:	40010c00 	.word	0x40010c00
 80009c0:	10210000 	.word	0x10210000

080009c4 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b082      	sub	sp, #8
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	4603      	mov	r3, r0
 80009cc:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == CANB_INT_Pin)
 80009ce:	88fb      	ldrh	r3, [r7, #6]
 80009d0:	2b10      	cmp	r3, #16
 80009d2:	d108      	bne.n	80009e6 <HAL_GPIO_EXTI_Callback+0x22>
	{
		isCAN_B_RXed = 1;
 80009d4:	4b11      	ldr	r3, [pc, #68]	; (8000a1c <HAL_GPIO_EXTI_Callback+0x58>)
 80009d6:	2201      	movs	r2, #1
 80009d8:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_TogglePin(CAN_B_LED_GPIO_Port, CAN_B_LED_Pin);
 80009da:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009de:	4810      	ldr	r0, [pc, #64]	; (8000a20 <HAL_GPIO_EXTI_Callback+0x5c>)
 80009e0:	f002 f814 	bl	8002a0c <HAL_GPIO_TogglePin>
	else if(GPIO_Pin == CAND_INT_Pin)
	{
		isCAN_D_RXed = 1;
		HAL_GPIO_TogglePin(CAN_D_LED_GPIO_Port, CAN_D_LED_Pin);
	}
}
 80009e4:	e016      	b.n	8000a14 <HAL_GPIO_EXTI_Callback+0x50>
	else if(GPIO_Pin == CANC_INT_Pin)
 80009e6:	88fb      	ldrh	r3, [r7, #6]
 80009e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80009ec:	d108      	bne.n	8000a00 <HAL_GPIO_EXTI_Callback+0x3c>
		isCAN_C_RXed = 1;
 80009ee:	4b0d      	ldr	r3, [pc, #52]	; (8000a24 <HAL_GPIO_EXTI_Callback+0x60>)
 80009f0:	2201      	movs	r2, #1
 80009f2:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_TogglePin(CAN_C_LED_GPIO_Port, CAN_C_LED_Pin);
 80009f4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009f8:	480b      	ldr	r0, [pc, #44]	; (8000a28 <HAL_GPIO_EXTI_Callback+0x64>)
 80009fa:	f002 f807 	bl	8002a0c <HAL_GPIO_TogglePin>
}
 80009fe:	e009      	b.n	8000a14 <HAL_GPIO_EXTI_Callback+0x50>
	else if(GPIO_Pin == CAND_INT_Pin)
 8000a00:	88fb      	ldrh	r3, [r7, #6]
 8000a02:	2b01      	cmp	r3, #1
 8000a04:	d106      	bne.n	8000a14 <HAL_GPIO_EXTI_Callback+0x50>
		isCAN_D_RXed = 1;
 8000a06:	4b09      	ldr	r3, [pc, #36]	; (8000a2c <HAL_GPIO_EXTI_Callback+0x68>)
 8000a08:	2201      	movs	r2, #1
 8000a0a:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_TogglePin(CAN_D_LED_GPIO_Port, CAN_D_LED_Pin);
 8000a0c:	2102      	movs	r1, #2
 8000a0e:	4804      	ldr	r0, [pc, #16]	; (8000a20 <HAL_GPIO_EXTI_Callback+0x5c>)
 8000a10:	f001 fffc 	bl	8002a0c <HAL_GPIO_TogglePin>
}
 8000a14:	bf00      	nop
 8000a16:	3708      	adds	r7, #8
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bd80      	pop	{r7, pc}
 8000a1c:	200002e1 	.word	0x200002e1
 8000a20:	40010c00 	.word	0x40010c00
 8000a24:	200002e2 	.word	0x200002e2
 8000a28:	40010800 	.word	0x40010800
 8000a2c:	200002e3 	.word	0x200002e3

08000a30 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b082      	sub	sp, #8
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
	if(HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &rxHeader, tmpCanMsg.dataBuf) != HAL_OK)
 8000a38:	4b0a      	ldr	r3, [pc, #40]	; (8000a64 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 8000a3a:	4a0b      	ldr	r2, [pc, #44]	; (8000a68 <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 8000a3c:	2100      	movs	r1, #0
 8000a3e:	6878      	ldr	r0, [r7, #4]
 8000a40:	f001 f9d0 	bl	8001de4 <HAL_CAN_GetRxMessage>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d004      	beq.n	8000a54 <HAL_CAN_RxFifo0MsgPendingCallback+0x24>
	{
		debugPrint("fail CAN A RX \n");
 8000a4a:	4808      	ldr	r0, [pc, #32]	; (8000a6c <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>)
 8000a4c:	f7ff fd22 	bl	8000494 <dbgPrint>
		Error_Handler();
 8000a50:	f000 f810 	bl	8000a74 <Error_Handler>
	}
	isCAN_A_RXed = 1;
 8000a54:	4b06      	ldr	r3, [pc, #24]	; (8000a70 <HAL_CAN_RxFifo0MsgPendingCallback+0x40>)
 8000a56:	2201      	movs	r2, #1
 8000a58:	701a      	strb	r2, [r3, #0]
}
 8000a5a:	bf00      	nop
 8000a5c:	3708      	adds	r7, #8
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	200002eb 	.word	0x200002eb
 8000a68:	2000029c 	.word	0x2000029c
 8000a6c:	080051a0 	.word	0x080051a0
 8000a70:	200002e0 	.word	0x200002e0

08000a74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a78:	b672      	cpsid	i
}
 8000a7a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a7c:	e7fe      	b.n	8000a7c <Error_Handler+0x8>

08000a7e <mcp2515_reset>:
/*********************************************************************************************************
** Function name:           mcp2515_reset
** Descriptions:            reset the device
*********************************************************************************************************/
void mcp2515_reset(CanbusConfig_t* canCfg)
{
 8000a7e:	b580      	push	{r7, lr}
 8000a80:	b082      	sub	sp, #8
 8000a82:	af00      	add	r7, sp, #0
 8000a84:	6078      	str	r0, [r7, #4]
    canCfg->ChipSelectFp();
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	695b      	ldr	r3, [r3, #20]
 8000a8a:	4798      	blx	r3
    canCfg->SPIReadWriteFp(MCP_RESET);
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	69db      	ldr	r3, [r3, #28]
 8000a90:	20c0      	movs	r0, #192	; 0xc0
 8000a92:	4798      	blx	r3
    canCfg->ChipUnSelectFp();
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	699b      	ldr	r3, [r3, #24]
 8000a98:	4798      	blx	r3

    HW_DELAY(10);
 8000a9a:	200a      	movs	r0, #10
 8000a9c:	f000 ff76 	bl	800198c <HAL_Delay>
}
 8000aa0:	bf00      	nop
 8000aa2:	3708      	adds	r7, #8
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}

08000aa8 <mcp2515_readRegister>:
/*********************************************************************************************************
** Function name:           mcp2515_readRegister
** Descriptions:            read register
*********************************************************************************************************/
uint8_t mcp2515_readRegister(CanbusConfig_t* canCfg,const uint8_t address)
 {
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b084      	sub	sp, #16
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
 8000ab0:	460b      	mov	r3, r1
 8000ab2:	70fb      	strb	r3, [r7, #3]
    uint8_t ret;

    canCfg->ChipSelectFp();
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	695b      	ldr	r3, [r3, #20]
 8000ab8:	4798      	blx	r3
    canCfg->SPIReadWriteFp(MCP_READ);
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	69db      	ldr	r3, [r3, #28]
 8000abe:	2003      	movs	r0, #3
 8000ac0:	4798      	blx	r3
    canCfg->SPIReadWriteFp(address);
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	69db      	ldr	r3, [r3, #28]
 8000ac6:	78fa      	ldrb	r2, [r7, #3]
 8000ac8:	4610      	mov	r0, r2
 8000aca:	4798      	blx	r3
    ret = canCfg->SPIReadFp();
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ad0:	4798      	blx	r3
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	73fb      	strb	r3, [r7, #15]
    canCfg->ChipUnSelectFp();
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	699b      	ldr	r3, [r3, #24]
 8000ada:	4798      	blx	r3

    return ret;
 8000adc:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ade:	4618      	mov	r0, r3
 8000ae0:	3710      	adds	r7, #16
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}

08000ae6 <mcp2515_setRegister>:
/*********************************************************************************************************
** Function name:           mcp2515_setRegister
** Descriptions:            set register
*********************************************************************************************************/
void mcp2515_setRegister(CanbusConfig_t* canCfg,const uint8_t address, const uint8_t value)
{
 8000ae6:	b580      	push	{r7, lr}
 8000ae8:	b082      	sub	sp, #8
 8000aea:	af00      	add	r7, sp, #0
 8000aec:	6078      	str	r0, [r7, #4]
 8000aee:	460b      	mov	r3, r1
 8000af0:	70fb      	strb	r3, [r7, #3]
 8000af2:	4613      	mov	r3, r2
 8000af4:	70bb      	strb	r3, [r7, #2]
    canCfg->ChipSelectFp();
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	695b      	ldr	r3, [r3, #20]
 8000afa:	4798      	blx	r3
    canCfg->SPIReadWriteFp(MCP_WRITE);
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	69db      	ldr	r3, [r3, #28]
 8000b00:	2002      	movs	r0, #2
 8000b02:	4798      	blx	r3
    canCfg->SPIReadWriteFp(address);
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	69db      	ldr	r3, [r3, #28]
 8000b08:	78fa      	ldrb	r2, [r7, #3]
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4798      	blx	r3
    canCfg->SPIReadWriteFp(value);
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	69db      	ldr	r3, [r3, #28]
 8000b12:	78ba      	ldrb	r2, [r7, #2]
 8000b14:	4610      	mov	r0, r2
 8000b16:	4798      	blx	r3
    canCfg->ChipUnSelectFp();
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	699b      	ldr	r3, [r3, #24]
 8000b1c:	4798      	blx	r3
}
 8000b1e:	bf00      	nop
 8000b20:	3708      	adds	r7, #8
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}

08000b26 <mcp2515_modifyRegister>:
/*********************************************************************************************************
** Function name:           mcp2515_modifyRegister
** Descriptions:            set bit of one register
*********************************************************************************************************/
void mcp2515_modifyRegister(CanbusConfig_t* canCfg,const uint8_t address, const uint8_t mask, const uint8_t data)
{
 8000b26:	b580      	push	{r7, lr}
 8000b28:	b082      	sub	sp, #8
 8000b2a:	af00      	add	r7, sp, #0
 8000b2c:	6078      	str	r0, [r7, #4]
 8000b2e:	4608      	mov	r0, r1
 8000b30:	4611      	mov	r1, r2
 8000b32:	461a      	mov	r2, r3
 8000b34:	4603      	mov	r3, r0
 8000b36:	70fb      	strb	r3, [r7, #3]
 8000b38:	460b      	mov	r3, r1
 8000b3a:	70bb      	strb	r3, [r7, #2]
 8000b3c:	4613      	mov	r3, r2
 8000b3e:	707b      	strb	r3, [r7, #1]
    canCfg->ChipSelectFp();
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	695b      	ldr	r3, [r3, #20]
 8000b44:	4798      	blx	r3
    canCfg->SPIReadWriteFp(MCP_BITMOD);
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	69db      	ldr	r3, [r3, #28]
 8000b4a:	2005      	movs	r0, #5
 8000b4c:	4798      	blx	r3
    canCfg->SPIReadWriteFp(address);
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	69db      	ldr	r3, [r3, #28]
 8000b52:	78fa      	ldrb	r2, [r7, #3]
 8000b54:	4610      	mov	r0, r2
 8000b56:	4798      	blx	r3
    canCfg->SPIReadWriteFp(mask);
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	69db      	ldr	r3, [r3, #28]
 8000b5c:	78ba      	ldrb	r2, [r7, #2]
 8000b5e:	4610      	mov	r0, r2
 8000b60:	4798      	blx	r3
    canCfg->SPIReadWriteFp(data);
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	69db      	ldr	r3, [r3, #28]
 8000b66:	787a      	ldrb	r2, [r7, #1]
 8000b68:	4610      	mov	r0, r2
 8000b6a:	4798      	blx	r3
    canCfg->ChipUnSelectFp();
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	699b      	ldr	r3, [r3, #24]
 8000b70:	4798      	blx	r3
}
 8000b72:	bf00      	nop
 8000b74:	3708      	adds	r7, #8
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}

08000b7a <setMode>:
/*********************************************************************************************************
** Function name:           setMode
** Descriptions:            Sets control mode
*********************************************************************************************************/
uint8_t setMode(CanbusConfig_t* canCfg,const uint8_t opMode)
 {
 8000b7a:	b580      	push	{r7, lr}
 8000b7c:	b082      	sub	sp, #8
 8000b7e:	af00      	add	r7, sp, #0
 8000b80:	6078      	str	r0, [r7, #4]
 8000b82:	460b      	mov	r3, r1
 8000b84:	70fb      	strb	r3, [r7, #3]
    if (opMode != MODE_SLEEP)
 8000b86:	78fb      	ldrb	r3, [r7, #3]
 8000b88:	2b20      	cmp	r3, #32
 8000b8a:	d002      	beq.n	8000b92 <setMode+0x18>
	{ // if going to sleep, the value stored in opMode is not changed so that we can return to it later
    	canCfg->mcpMode = opMode;
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	78fa      	ldrb	r2, [r7, #3]
 8000b90:	725a      	strb	r2, [r3, #9]
    }

    return mcp2515_setCANCTRL_Mode(canCfg,opMode);
 8000b92:	78fb      	ldrb	r3, [r7, #3]
 8000b94:	4619      	mov	r1, r3
 8000b96:	6878      	ldr	r0, [r7, #4]
 8000b98:	f000 f815 	bl	8000bc6 <mcp2515_setCANCTRL_Mode>
 8000b9c:	4603      	mov	r3, r0
}
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	3708      	adds	r7, #8
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}

08000ba6 <getMode>:
/*********************************************************************************************************
** Function name:           getMode
** Descriptions:            Returns current control mode
*********************************************************************************************************/
uint8_t getMode(CanbusConfig_t* canCfg)
{
 8000ba6:	b580      	push	{r7, lr}
 8000ba8:	b082      	sub	sp, #8
 8000baa:	af00      	add	r7, sp, #0
 8000bac:	6078      	str	r0, [r7, #4]
    return (mcp2515_readRegister(canCfg,MCP_CANSTAT) & MODE_MASK);
 8000bae:	210e      	movs	r1, #14
 8000bb0:	6878      	ldr	r0, [r7, #4]
 8000bb2:	f7ff ff79 	bl	8000aa8 <mcp2515_readRegister>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	f023 031f 	bic.w	r3, r3, #31
 8000bbc:	b2db      	uxtb	r3, r3
}
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	3708      	adds	r7, #8
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}

08000bc6 <mcp2515_setCANCTRL_Mode>:
/*********************************************************************************************************
** Function name:           mcp2515_setCANCTRL_Mode
** Descriptions:            set control mode
*********************************************************************************************************/
uint8_t mcp2515_setCANCTRL_Mode(CanbusConfig_t* canCfg,const uint8_t newmode)
 {
 8000bc6:	b580      	push	{r7, lr}
 8000bc8:	b084      	sub	sp, #16
 8000bca:	af00      	add	r7, sp, #0
 8000bcc:	6078      	str	r0, [r7, #4]
 8000bce:	460b      	mov	r3, r1
 8000bd0:	70fb      	strb	r3, [r7, #3]
    // If the chip is asleep and we want to change mode then a manual wake needs to be done
    // This is done by setting the wake up interrupt flag
    // This undocumented trick was found at https://github.com/mkleemann/can/blob/master/can_sleep_mcp2515.c


    if ((getMode(canCfg)) == MODE_SLEEP && (newmode != MODE_SLEEP))
 8000bd2:	6878      	ldr	r0, [r7, #4]
 8000bd4:	f7ff ffe7 	bl	8000ba6 <getMode>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	2b20      	cmp	r3, #32
 8000bdc:	d12b      	bne.n	8000c36 <mcp2515_setCANCTRL_Mode+0x70>
 8000bde:	78fb      	ldrb	r3, [r7, #3]
 8000be0:	2b20      	cmp	r3, #32
 8000be2:	d028      	beq.n	8000c36 <mcp2515_setCANCTRL_Mode+0x70>
	{
        // Make sure wake interrupt is enabled
        uint8_t wakeIntEnabled = (mcp2515_readRegister(canCfg,MCP_CANINTE) & MCP_WAKIF);
 8000be4:	212b      	movs	r1, #43	; 0x2b
 8000be6:	6878      	ldr	r0, [r7, #4]
 8000be8:	f7ff ff5e 	bl	8000aa8 <mcp2515_readRegister>
 8000bec:	4603      	mov	r3, r0
 8000bee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000bf2:	73fb      	strb	r3, [r7, #15]

        if (!wakeIntEnabled)
 8000bf4:	7bfb      	ldrb	r3, [r7, #15]
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d105      	bne.n	8000c06 <mcp2515_setCANCTRL_Mode+0x40>
		{
            mcp2515_modifyRegister(canCfg,MCP_CANINTE, MCP_WAKIF, MCP_WAKIF);
 8000bfa:	2340      	movs	r3, #64	; 0x40
 8000bfc:	2240      	movs	r2, #64	; 0x40
 8000bfe:	212b      	movs	r1, #43	; 0x2b
 8000c00:	6878      	ldr	r0, [r7, #4]
 8000c02:	f7ff ff90 	bl	8000b26 <mcp2515_modifyRegister>
        }

        // Set wake flag (this does the actual waking up)
        mcp2515_modifyRegister(canCfg,MCP_CANINTF, MCP_WAKIF, MCP_WAKIF);
 8000c06:	2340      	movs	r3, #64	; 0x40
 8000c08:	2240      	movs	r2, #64	; 0x40
 8000c0a:	212c      	movs	r1, #44	; 0x2c
 8000c0c:	6878      	ldr	r0, [r7, #4]
 8000c0e:	f7ff ff8a 	bl	8000b26 <mcp2515_modifyRegister>

        // If the chip is not connected to a CAN bus (or the bus has no other powered nodes) it will sometimes trigger the wake interrupt as soon
        // as it's put to sleep, but it will stay in SLEEP mode instead of automatically switching to LISTENONLY mode.
        // In this situation the mode needs to be manually set to LISTENONLY.

        if (mcp2515_requestNewMode(canCfg,MODE_LISTENONLY) != MCP2515_OK)
 8000c12:	2160      	movs	r1, #96	; 0x60
 8000c14:	6878      	ldr	r0, [r7, #4]
 8000c16:	f000 f81e 	bl	8000c56 <mcp2515_requestNewMode>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d001      	beq.n	8000c24 <mcp2515_setCANCTRL_Mode+0x5e>
		{
            return MCP2515_FAIL;
 8000c20:	2301      	movs	r3, #1
 8000c22:	e014      	b.n	8000c4e <mcp2515_setCANCTRL_Mode+0x88>
        }

        // Turn wake interrupt back off if it was originally off
        if (!wakeIntEnabled)
 8000c24:	7bfb      	ldrb	r3, [r7, #15]
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d105      	bne.n	8000c36 <mcp2515_setCANCTRL_Mode+0x70>
		{
            mcp2515_modifyRegister(canCfg,MCP_CANINTE, MCP_WAKIF, 0);
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	2240      	movs	r2, #64	; 0x40
 8000c2e:	212b      	movs	r1, #43	; 0x2b
 8000c30:	6878      	ldr	r0, [r7, #4]
 8000c32:	f7ff ff78 	bl	8000b26 <mcp2515_modifyRegister>
        }
    }

    // Clear wake flag
    mcp2515_modifyRegister(canCfg,MCP_CANINTF, MCP_WAKIF, 0);
 8000c36:	2300      	movs	r3, #0
 8000c38:	2240      	movs	r2, #64	; 0x40
 8000c3a:	212c      	movs	r1, #44	; 0x2c
 8000c3c:	6878      	ldr	r0, [r7, #4]
 8000c3e:	f7ff ff72 	bl	8000b26 <mcp2515_modifyRegister>

    return mcp2515_requestNewMode(canCfg,newmode);
 8000c42:	78fb      	ldrb	r3, [r7, #3]
 8000c44:	4619      	mov	r1, r3
 8000c46:	6878      	ldr	r0, [r7, #4]
 8000c48:	f000 f805 	bl	8000c56 <mcp2515_requestNewMode>
 8000c4c:	4603      	mov	r3, r0
}
 8000c4e:	4618      	mov	r0, r3
 8000c50:	3710      	adds	r7, #16
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}

08000c56 <mcp2515_requestNewMode>:
/*********************************************************************************************************
** Function name:           mcp2515_requestNewMode
** Descriptions:            Set control mode
*********************************************************************************************************/
uint8_t mcp2515_requestNewMode(CanbusConfig_t* canCfg,const uint8_t newmode)
{
 8000c56:	b580      	push	{r7, lr}
 8000c58:	b084      	sub	sp, #16
 8000c5a:	af00      	add	r7, sp, #0
 8000c5c:	6078      	str	r0, [r7, #4]
 8000c5e:	460b      	mov	r3, r1
 8000c60:	70fb      	strb	r3, [r7, #3]
    unsigned long startTime = GET_TICK_MS();
 8000c62:	f000 fe89 	bl	8001978 <HAL_GetTick>
 8000c66:	60f8      	str	r0, [r7, #12]
    // Spam new mode request and wait for the operation  to complete
    while (1)
	{
        // Request new mode
        // This is inside the loop as sometimes requesting the new mode once doesn't work (usually when attempting to sleep)
        mcp2515_modifyRegister(canCfg,MCP_CANCTRL, MODE_MASK, newmode);
 8000c68:	78fb      	ldrb	r3, [r7, #3]
 8000c6a:	22e0      	movs	r2, #224	; 0xe0
 8000c6c:	210f      	movs	r1, #15
 8000c6e:	6878      	ldr	r0, [r7, #4]
 8000c70:	f7ff ff59 	bl	8000b26 <mcp2515_modifyRegister>

        uint8_t statReg = mcp2515_readRegister(canCfg,MCP_CANSTAT);
 8000c74:	210e      	movs	r1, #14
 8000c76:	6878      	ldr	r0, [r7, #4]
 8000c78:	f7ff ff16 	bl	8000aa8 <mcp2515_readRegister>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	72fb      	strb	r3, [r7, #11]

        if ((statReg & MODE_MASK) == newmode)
 8000c80:	7afb      	ldrb	r3, [r7, #11]
 8000c82:	f003 02e0 	and.w	r2, r3, #224	; 0xe0
 8000c86:	78fb      	ldrb	r3, [r7, #3]
 8000c88:	429a      	cmp	r2, r3
 8000c8a:	d101      	bne.n	8000c90 <mcp2515_requestNewMode+0x3a>
		{ // We're now in the new mode
            return MCP2515_OK;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	e007      	b.n	8000ca0 <mcp2515_requestNewMode+0x4a>
        }
		else if ((GET_TICK_MS() - startTime) > 200)
 8000c90:	f000 fe72 	bl	8001978 <HAL_GetTick>
 8000c94:	4602      	mov	r2, r0
 8000c96:	68fb      	ldr	r3, [r7, #12]
 8000c98:	1ad3      	subs	r3, r2, r3
 8000c9a:	2bc8      	cmp	r3, #200	; 0xc8
 8000c9c:	d9e4      	bls.n	8000c68 <mcp2515_requestNewMode+0x12>
		{ // Wait no more than 200ms for the operation to complete
            return MCP2515_FAIL;
 8000c9e:	2301      	movs	r3, #1
        }
    }
}
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	3710      	adds	r7, #16
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}

08000ca8 <mcp2515_configRate>:
/*********************************************************************************************************
** Function name:           mcp2515_configRate
** Descriptions:            set baudrate
*********************************************************************************************************/
uint8_t mcp2515_configRate(CanbusConfig_t* canCfg,const uint8_t canSpeed, const uint8_t clock)
 {
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b084      	sub	sp, #16
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
 8000cb0:	460b      	mov	r3, r1
 8000cb2:	70fb      	strb	r3, [r7, #3]
 8000cb4:	4613      	mov	r3, r2
 8000cb6:	70bb      	strb	r3, [r7, #2]
    uint8_t set, cfg1, cfg2, cfg3;
    set = 1;
 8000cb8:	2301      	movs	r3, #1
 8000cba:	73fb      	strb	r3, [r7, #15]
    switch (clock) {
 8000cbc:	78bb      	ldrb	r3, [r7, #2]
 8000cbe:	2b03      	cmp	r3, #3
 8000cc0:	f000 8160 	beq.w	8000f84 <mcp2515_configRate+0x2dc>
 8000cc4:	2b03      	cmp	r3, #3
 8000cc6:	f300 81f1 	bgt.w	80010ac <mcp2515_configRate+0x404>
 8000cca:	2b01      	cmp	r3, #1
 8000ccc:	d003      	beq.n	8000cd6 <mcp2515_configRate+0x2e>
 8000cce:	2b02      	cmp	r3, #2
 8000cd0:	f000 80b9 	beq.w	8000e46 <mcp2515_configRate+0x19e>
 8000cd4:	e1ea      	b.n	80010ac <mcp2515_configRate+0x404>
        case (MCP_16MHz) :
            switch (canSpeed) {
 8000cd6:	78fb      	ldrb	r3, [r7, #3]
 8000cd8:	3b01      	subs	r3, #1
 8000cda:	2b12      	cmp	r3, #18
 8000cdc:	f200 80af 	bhi.w	8000e3e <mcp2515_configRate+0x196>
 8000ce0:	a201      	add	r2, pc, #4	; (adr r2, 8000ce8 <mcp2515_configRate+0x40>)
 8000ce2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ce6:	bf00      	nop
 8000ce8:	08000d35 	.word	0x08000d35
 8000cec:	08000d43 	.word	0x08000d43
 8000cf0:	08000d51 	.word	0x08000d51
 8000cf4:	08000d5f 	.word	0x08000d5f
 8000cf8:	08000d6d 	.word	0x08000d6d
 8000cfc:	08000d7b 	.word	0x08000d7b
 8000d00:	08000d89 	.word	0x08000d89
 8000d04:	08000d97 	.word	0x08000d97
 8000d08:	08000da5 	.word	0x08000da5
 8000d0c:	08000db3 	.word	0x08000db3
 8000d10:	08000dc1 	.word	0x08000dc1
 8000d14:	08000dcf 	.word	0x08000dcf
 8000d18:	08000ddd 	.word	0x08000ddd
 8000d1c:	08000deb 	.word	0x08000deb
 8000d20:	08000df9 	.word	0x08000df9
 8000d24:	08000e07 	.word	0x08000e07
 8000d28:	08000e15 	.word	0x08000e15
 8000d2c:	08000e23 	.word	0x08000e23
 8000d30:	08000e31 	.word	0x08000e31
                case (CAN_5KBPS):
                    cfg1 = MCP_16MHz_5kBPS_CFG1;
 8000d34:	233f      	movs	r3, #63	; 0x3f
 8000d36:	73bb      	strb	r3, [r7, #14]
                    cfg2 = MCP_16MHz_5kBPS_CFG2;
 8000d38:	23ff      	movs	r3, #255	; 0xff
 8000d3a:	737b      	strb	r3, [r7, #13]
                    cfg3 = MCP_16MHz_5kBPS_CFG3;
 8000d3c:	2387      	movs	r3, #135	; 0x87
 8000d3e:	733b      	strb	r3, [r7, #12]
                    break;
 8000d40:	e080      	b.n	8000e44 <mcp2515_configRate+0x19c>

                case (CAN_10KBPS):
                    cfg1 = MCP_16MHz_10kBPS_CFG1;
 8000d42:	231f      	movs	r3, #31
 8000d44:	73bb      	strb	r3, [r7, #14]
                    cfg2 = MCP_16MHz_10kBPS_CFG2;
 8000d46:	23ff      	movs	r3, #255	; 0xff
 8000d48:	737b      	strb	r3, [r7, #13]
                    cfg3 = MCP_16MHz_10kBPS_CFG3;
 8000d4a:	2387      	movs	r3, #135	; 0x87
 8000d4c:	733b      	strb	r3, [r7, #12]
                    break;
 8000d4e:	e079      	b.n	8000e44 <mcp2515_configRate+0x19c>

                case (CAN_20KBPS):
                    cfg1 = MCP_16MHz_20kBPS_CFG1;
 8000d50:	230f      	movs	r3, #15
 8000d52:	73bb      	strb	r3, [r7, #14]
                    cfg2 = MCP_16MHz_20kBPS_CFG2;
 8000d54:	23ff      	movs	r3, #255	; 0xff
 8000d56:	737b      	strb	r3, [r7, #13]
                    cfg3 = MCP_16MHz_20kBPS_CFG3;
 8000d58:	2387      	movs	r3, #135	; 0x87
 8000d5a:	733b      	strb	r3, [r7, #12]
                    break;
 8000d5c:	e072      	b.n	8000e44 <mcp2515_configRate+0x19c>

                case (CAN_25KBPS):
                    cfg1 = MCP_16MHz_25kBPS_CFG1;
 8000d5e:	230f      	movs	r3, #15
 8000d60:	73bb      	strb	r3, [r7, #14]
                    cfg2 = MCP_16MHz_25kBPS_CFG2;
 8000d62:	23ba      	movs	r3, #186	; 0xba
 8000d64:	737b      	strb	r3, [r7, #13]
                    cfg3 = MCP_16MHz_25kBPS_CFG3;
 8000d66:	2307      	movs	r3, #7
 8000d68:	733b      	strb	r3, [r7, #12]
                    break;
 8000d6a:	e06b      	b.n	8000e44 <mcp2515_configRate+0x19c>

                case (CAN_31K25BPS):
                    cfg1 = MCP_16MHz_31k25BPS_CFG1;
 8000d6c:	230f      	movs	r3, #15
 8000d6e:	73bb      	strb	r3, [r7, #14]
                    cfg2 = MCP_16MHz_31k25BPS_CFG2;
 8000d70:	23f1      	movs	r3, #241	; 0xf1
 8000d72:	737b      	strb	r3, [r7, #13]
                    cfg3 = MCP_16MHz_31k25BPS_CFG3;
 8000d74:	2385      	movs	r3, #133	; 0x85
 8000d76:	733b      	strb	r3, [r7, #12]
                    break;
 8000d78:	e064      	b.n	8000e44 <mcp2515_configRate+0x19c>

                case (CAN_33KBPS):
                    cfg1 = MCP_16MHz_33kBPS_CFG1;
 8000d7a:	2309      	movs	r3, #9
 8000d7c:	73bb      	strb	r3, [r7, #14]
                    cfg2 = MCP_16MHz_33kBPS_CFG2;
 8000d7e:	23be      	movs	r3, #190	; 0xbe
 8000d80:	737b      	strb	r3, [r7, #13]
                    cfg3 = MCP_16MHz_33kBPS_CFG3;
 8000d82:	2307      	movs	r3, #7
 8000d84:	733b      	strb	r3, [r7, #12]
                    break;
 8000d86:	e05d      	b.n	8000e44 <mcp2515_configRate+0x19c>

                case (CAN_40KBPS):
                    cfg1 = MCP_16MHz_40kBPS_CFG1;
 8000d88:	2307      	movs	r3, #7
 8000d8a:	73bb      	strb	r3, [r7, #14]
                    cfg2 = MCP_16MHz_40kBPS_CFG2;
 8000d8c:	23ff      	movs	r3, #255	; 0xff
 8000d8e:	737b      	strb	r3, [r7, #13]
                    cfg3 = MCP_16MHz_40kBPS_CFG3;
 8000d90:	2387      	movs	r3, #135	; 0x87
 8000d92:	733b      	strb	r3, [r7, #12]
                    break;
 8000d94:	e056      	b.n	8000e44 <mcp2515_configRate+0x19c>

                case (CAN_50KBPS):
                    cfg1 = MCP_16MHz_50kBPS_CFG1;
 8000d96:	2307      	movs	r3, #7
 8000d98:	73bb      	strb	r3, [r7, #14]
                    cfg2 = MCP_16MHz_50kBPS_CFG2;
 8000d9a:	23fa      	movs	r3, #250	; 0xfa
 8000d9c:	737b      	strb	r3, [r7, #13]
                    cfg3 = MCP_16MHz_50kBPS_CFG3;
 8000d9e:	2387      	movs	r3, #135	; 0x87
 8000da0:	733b      	strb	r3, [r7, #12]
                    break;
 8000da2:	e04f      	b.n	8000e44 <mcp2515_configRate+0x19c>

                case (CAN_80KBPS):
                    cfg1 = MCP_16MHz_80kBPS_CFG1;
 8000da4:	2303      	movs	r3, #3
 8000da6:	73bb      	strb	r3, [r7, #14]
                    cfg2 = MCP_16MHz_80kBPS_CFG2;
 8000da8:	23ff      	movs	r3, #255	; 0xff
 8000daa:	737b      	strb	r3, [r7, #13]
                    cfg3 = MCP_16MHz_80kBPS_CFG3;
 8000dac:	2387      	movs	r3, #135	; 0x87
 8000dae:	733b      	strb	r3, [r7, #12]
                    break;
 8000db0:	e048      	b.n	8000e44 <mcp2515_configRate+0x19c>

                case (CAN_83K3BPS):
                    cfg1 = MCP_16MHz_83k3BPS_CFG1;
 8000db2:	2303      	movs	r3, #3
 8000db4:	73bb      	strb	r3, [r7, #14]
                    cfg2 = MCP_16MHz_83k3BPS_CFG2;
 8000db6:	23be      	movs	r3, #190	; 0xbe
 8000db8:	737b      	strb	r3, [r7, #13]
                    cfg3 = MCP_16MHz_83k3BPS_CFG3;
 8000dba:	2307      	movs	r3, #7
 8000dbc:	733b      	strb	r3, [r7, #12]
                    break;
 8000dbe:	e041      	b.n	8000e44 <mcp2515_configRate+0x19c>

                case (CAN_95KBPS):
                    cfg1 = MCP_16MHz_95kBPS_CFG1;
 8000dc0:	2303      	movs	r3, #3
 8000dc2:	73bb      	strb	r3, [r7, #14]
                    cfg2 = MCP_16MHz_95kBPS_CFG2;
 8000dc4:	23ad      	movs	r3, #173	; 0xad
 8000dc6:	737b      	strb	r3, [r7, #13]
                    cfg3 = MCP_16MHz_95kBPS_CFG3;
 8000dc8:	2307      	movs	r3, #7
 8000dca:	733b      	strb	r3, [r7, #12]
                    break;
 8000dcc:	e03a      	b.n	8000e44 <mcp2515_configRate+0x19c>

                case (CAN_100KBPS):
                    cfg1 = MCP_16MHz_100kBPS_CFG1;
 8000dce:	2303      	movs	r3, #3
 8000dd0:	73bb      	strb	r3, [r7, #14]
                    cfg2 = MCP_16MHz_100kBPS_CFG2;
 8000dd2:	23fa      	movs	r3, #250	; 0xfa
 8000dd4:	737b      	strb	r3, [r7, #13]
                    cfg3 = MCP_16MHz_100kBPS_CFG3;
 8000dd6:	2387      	movs	r3, #135	; 0x87
 8000dd8:	733b      	strb	r3, [r7, #12]
                    break;
 8000dda:	e033      	b.n	8000e44 <mcp2515_configRate+0x19c>

                case (CAN_125KBPS):
                    cfg1 = MCP_16MHz_125kBPS_CFG1;
 8000ddc:	2303      	movs	r3, #3
 8000dde:	73bb      	strb	r3, [r7, #14]
                    cfg2 = MCP_16MHz_125kBPS_CFG2;
 8000de0:	23f0      	movs	r3, #240	; 0xf0
 8000de2:	737b      	strb	r3, [r7, #13]
                    cfg3 = MCP_16MHz_125kBPS_CFG3;
 8000de4:	2386      	movs	r3, #134	; 0x86
 8000de6:	733b      	strb	r3, [r7, #12]
                    break;
 8000de8:	e02c      	b.n	8000e44 <mcp2515_configRate+0x19c>

                case (CAN_200KBPS):
                    cfg1 = MCP_16MHz_200kBPS_CFG1;
 8000dea:	2301      	movs	r3, #1
 8000dec:	73bb      	strb	r3, [r7, #14]
                    cfg2 = MCP_16MHz_200kBPS_CFG2;
 8000dee:	23fa      	movs	r3, #250	; 0xfa
 8000df0:	737b      	strb	r3, [r7, #13]
                    cfg3 = MCP_16MHz_200kBPS_CFG3;
 8000df2:	2387      	movs	r3, #135	; 0x87
 8000df4:	733b      	strb	r3, [r7, #12]
                    break;
 8000df6:	e025      	b.n	8000e44 <mcp2515_configRate+0x19c>

                case (CAN_250KBPS):
                    cfg1 = MCP_16MHz_250kBPS_CFG1;
 8000df8:	2341      	movs	r3, #65	; 0x41
 8000dfa:	73bb      	strb	r3, [r7, #14]
                    cfg2 = MCP_16MHz_250kBPS_CFG2;
 8000dfc:	23f1      	movs	r3, #241	; 0xf1
 8000dfe:	737b      	strb	r3, [r7, #13]
                    cfg3 = MCP_16MHz_250kBPS_CFG3;
 8000e00:	2385      	movs	r3, #133	; 0x85
 8000e02:	733b      	strb	r3, [r7, #12]
                    break;
 8000e04:	e01e      	b.n	8000e44 <mcp2515_configRate+0x19c>

                case (CAN_500KBPS):
                    cfg1 = MCP_16MHz_500kBPS_CFG1;
 8000e06:	2300      	movs	r3, #0
 8000e08:	73bb      	strb	r3, [r7, #14]
                    cfg2 = MCP_16MHz_500kBPS_CFG2;
 8000e0a:	23f0      	movs	r3, #240	; 0xf0
 8000e0c:	737b      	strb	r3, [r7, #13]
                    cfg3 = MCP_16MHz_500kBPS_CFG3;
 8000e0e:	2386      	movs	r3, #134	; 0x86
 8000e10:	733b      	strb	r3, [r7, #12]
                    break;
 8000e12:	e017      	b.n	8000e44 <mcp2515_configRate+0x19c>

                case (CAN_666KBPS):
                    cfg1 = MCP_16MHz_666kBPS_CFG1;
 8000e14:	2300      	movs	r3, #0
 8000e16:	73bb      	strb	r3, [r7, #14]
                    cfg2 = MCP_16MHz_666kBPS_CFG2;
 8000e18:	23a0      	movs	r3, #160	; 0xa0
 8000e1a:	737b      	strb	r3, [r7, #13]
                    cfg3 = MCP_16MHz_666kBPS_CFG3;
 8000e1c:	2304      	movs	r3, #4
 8000e1e:	733b      	strb	r3, [r7, #12]
                    break;
 8000e20:	e010      	b.n	8000e44 <mcp2515_configRate+0x19c>

                case (CAN_800KBPS) :
                    cfg1 = MCP_16MHz_800kBPS_CFG1;
 8000e22:	2340      	movs	r3, #64	; 0x40
 8000e24:	73bb      	strb	r3, [r7, #14]
                    cfg2 = MCP_16MHz_800kBPS_CFG2;
 8000e26:	2392      	movs	r3, #146	; 0x92
 8000e28:	737b      	strb	r3, [r7, #13]
                    cfg3 = MCP_16MHz_800kBPS_CFG3;
 8000e2a:	2302      	movs	r3, #2
 8000e2c:	733b      	strb	r3, [r7, #12]
                    break;
 8000e2e:	e009      	b.n	8000e44 <mcp2515_configRate+0x19c>

                case (CAN_1000KBPS):
                    cfg1 = MCP_16MHz_1000kBPS_CFG1;
 8000e30:	2300      	movs	r3, #0
 8000e32:	73bb      	strb	r3, [r7, #14]
                    cfg2 = MCP_16MHz_1000kBPS_CFG2;
 8000e34:	23d0      	movs	r3, #208	; 0xd0
 8000e36:	737b      	strb	r3, [r7, #13]
                    cfg3 = MCP_16MHz_1000kBPS_CFG3;
 8000e38:	2382      	movs	r3, #130	; 0x82
 8000e3a:	733b      	strb	r3, [r7, #12]
                    break;
 8000e3c:	e002      	b.n	8000e44 <mcp2515_configRate+0x19c>

                default:
                    set = 0;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	73fb      	strb	r3, [r7, #15]
                    break;
 8000e42:	bf00      	nop
            }
            break;
 8000e44:	e135      	b.n	80010b2 <mcp2515_configRate+0x40a>

        case (MCP_12MHz) :
            switch (canSpeed) {
 8000e46:	78fb      	ldrb	r3, [r7, #3]
 8000e48:	3b03      	subs	r3, #3
 8000e4a:	2b10      	cmp	r3, #16
 8000e4c:	f200 8096 	bhi.w	8000f7c <mcp2515_configRate+0x2d4>
 8000e50:	a201      	add	r2, pc, #4	; (adr r2, 8000e58 <mcp2515_configRate+0x1b0>)
 8000e52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e56:	bf00      	nop
 8000e58:	08000e9d 	.word	0x08000e9d
 8000e5c:	08000eab 	.word	0x08000eab
 8000e60:	08000eb9 	.word	0x08000eb9
 8000e64:	08000ec7 	.word	0x08000ec7
 8000e68:	08000ed5 	.word	0x08000ed5
 8000e6c:	08000ee3 	.word	0x08000ee3
 8000e70:	08000ef1 	.word	0x08000ef1
 8000e74:	08000eff 	.word	0x08000eff
 8000e78:	08000f0d 	.word	0x08000f0d
 8000e7c:	08000f1b 	.word	0x08000f1b
 8000e80:	08000f29 	.word	0x08000f29
 8000e84:	08000f37 	.word	0x08000f37
 8000e88:	08000f45 	.word	0x08000f45
 8000e8c:	08000f53 	.word	0x08000f53
 8000e90:	08000f61 	.word	0x08000f61
 8000e94:	08000f7d 	.word	0x08000f7d
 8000e98:	08000f6f 	.word	0x08000f6f
                case (CAN_20KBPS) :
                    cfg1 = MCP_12MHz_20kBPS_CFG1;
 8000e9c:	230c      	movs	r3, #12
 8000e9e:	73bb      	strb	r3, [r7, #14]
                    cfg2 = MCP_12MHz_20kBPS_CFG2;
 8000ea0:	23bf      	movs	r3, #191	; 0xbf
 8000ea2:	737b      	strb	r3, [r7, #13]
                    cfg3 = MCP_12MHz_20kBPS_CFG3;
 8000ea4:	2305      	movs	r3, #5
 8000ea6:	733b      	strb	r3, [r7, #12]
                    break;
 8000ea8:	e06b      	b.n	8000f82 <mcp2515_configRate+0x2da>

                case (CAN_25KBPS) :
                    cfg1 = MCP_12MHz_25kBPS_CFG1;
 8000eaa:	230b      	movs	r3, #11
 8000eac:	73bb      	strb	r3, [r7, #14]
                    cfg2 = MCP_12MHz_25kBPS_CFG2;
 8000eae:	23b6      	movs	r3, #182	; 0xb6
 8000eb0:	737b      	strb	r3, [r7, #13]
                    cfg3 = MCP_12MHz_25kBPS_CFG3;
 8000eb2:	2304      	movs	r3, #4
 8000eb4:	733b      	strb	r3, [r7, #12]
                    break;
 8000eb6:	e064      	b.n	8000f82 <mcp2515_configRate+0x2da>

                case (CAN_31K25BPS) :
                    cfg1 = MCP_12MHz_31k25BPS_CFG1;
 8000eb8:	230b      	movs	r3, #11
 8000eba:	73bb      	strb	r3, [r7, #14]
                    cfg2 = MCP_12MHz_31k25BPS_CFG2;
 8000ebc:	23ac      	movs	r3, #172	; 0xac
 8000ebe:	737b      	strb	r3, [r7, #13]
                    cfg3 = MCP_12MHz_31k25BPS_CFG3;
 8000ec0:	2303      	movs	r3, #3
 8000ec2:	733b      	strb	r3, [r7, #12]
                    break;
 8000ec4:	e05d      	b.n	8000f82 <mcp2515_configRate+0x2da>

                case (CAN_33KBPS) :
                    cfg1 = MCP_12MHz_33kBPS_CFG1;
 8000ec6:	230c      	movs	r3, #12
 8000ec8:	73bb      	strb	r3, [r7, #14]
                    cfg2 = MCP_12MHz_33kBPS_CFG2;
 8000eca:	23a4      	movs	r3, #164	; 0xa4
 8000ecc:	737b      	strb	r3, [r7, #13]
                    cfg3 = MCP_12MHz_33kBPS_CFG3;
 8000ece:	2302      	movs	r3, #2
 8000ed0:	733b      	strb	r3, [r7, #12]
                    break;
 8000ed2:	e056      	b.n	8000f82 <mcp2515_configRate+0x2da>

                case (CAN_40KBPS) :
                    cfg1 = MCP_12MHz_40kBPS_CFG1;
 8000ed4:	2309      	movs	r3, #9
 8000ed6:	73bb      	strb	r3, [r7, #14]
                    cfg2 = MCP_12MHz_40kBPS_CFG2;
 8000ed8:	23a4      	movs	r3, #164	; 0xa4
 8000eda:	737b      	strb	r3, [r7, #13]
                    cfg3 = MCP_12MHz_40kBPS_CFG3;
 8000edc:	2303      	movs	r3, #3
 8000ede:	733b      	strb	r3, [r7, #12]
                    break;
 8000ee0:	e04f      	b.n	8000f82 <mcp2515_configRate+0x2da>

                case (CAN_50KBPS) :
                    cfg1 = MCP_12MHz_50kBPS_CFG1;
 8000ee2:	2305      	movs	r3, #5
 8000ee4:	73bb      	strb	r3, [r7, #14]
                    cfg2 = MCP_12MHz_50kBPS_CFG2;
 8000ee6:	23b6      	movs	r3, #182	; 0xb6
 8000ee8:	737b      	strb	r3, [r7, #13]
                    cfg3 = MCP_12MHz_50kBPS_CFG3;
 8000eea:	2304      	movs	r3, #4
 8000eec:	733b      	strb	r3, [r7, #12]
                    break;
 8000eee:	e048      	b.n	8000f82 <mcp2515_configRate+0x2da>

                case (CAN_80KBPS) :
                    cfg1 = MCP_12MHz_80kBPS_CFG1;
 8000ef0:	2304      	movs	r3, #4
 8000ef2:	73bb      	strb	r3, [r7, #14]
                    cfg2 = MCP_12MHz_80kBPS_CFG2;
 8000ef4:	23a4      	movs	r3, #164	; 0xa4
 8000ef6:	737b      	strb	r3, [r7, #13]
                    cfg3 = MCP_12MHz_80kBPS_CFG3;
 8000ef8:	2303      	movs	r3, #3
 8000efa:	733b      	strb	r3, [r7, #12]
                    break;
 8000efc:	e041      	b.n	8000f82 <mcp2515_configRate+0x2da>

                case (CAN_83K3BPS) :
                    cfg1 = MCP_12MHz_83k3BPS_CFG1;
 8000efe:	2303      	movs	r3, #3
 8000f00:	73bb      	strb	r3, [r7, #14]
                    cfg2 = MCP_12MHz_83k3BPS_CFG2;
 8000f02:	23b5      	movs	r3, #181	; 0xb5
 8000f04:	737b      	strb	r3, [r7, #13]
                    cfg3 = MCP_12MHz_83k3BPS_CFG3;
 8000f06:	2303      	movs	r3, #3
 8000f08:	733b      	strb	r3, [r7, #12]
                    break;
 8000f0a:	e03a      	b.n	8000f82 <mcp2515_configRate+0x2da>

                case (CAN_95KBPS) :
                    cfg1 = MCP_12MHz_95kBPS_CFG1;
 8000f0c:	2302      	movs	r3, #2
 8000f0e:	73bb      	strb	r3, [r7, #14]
                    cfg2 = MCP_12MHz_95kBPS_CFG2;
 8000f10:	23be      	movs	r3, #190	; 0xbe
 8000f12:	737b      	strb	r3, [r7, #13]
                    cfg3 = MCP_12MHz_95kBPS_CFG3;
 8000f14:	2304      	movs	r3, #4
 8000f16:	733b      	strb	r3, [r7, #12]
                    break;
 8000f18:	e033      	b.n	8000f82 <mcp2515_configRate+0x2da>

                case (CAN_100KBPS) :
                    cfg1 = MCP_12MHz_100kBPS_CFG1;
 8000f1a:	2302      	movs	r3, #2
 8000f1c:	73bb      	strb	r3, [r7, #14]
                    cfg2 = MCP_12MHz_100kBPS_CFG2;
 8000f1e:	23b6      	movs	r3, #182	; 0xb6
 8000f20:	737b      	strb	r3, [r7, #13]
                    cfg3 = MCP_12MHz_100kBPS_CFG3;
 8000f22:	2304      	movs	r3, #4
 8000f24:	733b      	strb	r3, [r7, #12]
                    break;
 8000f26:	e02c      	b.n	8000f82 <mcp2515_configRate+0x2da>

                case (CAN_125KBPS) :
                    cfg1 = MCP_12MHz_125kBPS_CFG1;
 8000f28:	2301      	movs	r3, #1
 8000f2a:	73bb      	strb	r3, [r7, #14]
                    cfg2 = MCP_12MHz_125kBPS_CFG2;
 8000f2c:	23bf      	movs	r3, #191	; 0xbf
 8000f2e:	737b      	strb	r3, [r7, #13]
                    cfg3 = MCP_12MHz_125kBPS_CFG3;
 8000f30:	2306      	movs	r3, #6
 8000f32:	733b      	strb	r3, [r7, #12]
                    break;
 8000f34:	e025      	b.n	8000f82 <mcp2515_configRate+0x2da>

                case (CAN_200KBPS) :
                    cfg1 = MCP_12MHz_200kBPS_CFG1;
 8000f36:	2301      	movs	r3, #1
 8000f38:	73bb      	strb	r3, [r7, #14]
                    cfg2 = MCP_12MHz_200kBPS_CFG2;
 8000f3a:	23a4      	movs	r3, #164	; 0xa4
 8000f3c:	737b      	strb	r3, [r7, #13]
                    cfg3 = MCP_12MHz_200kBPS_CFG3;
 8000f3e:	2303      	movs	r3, #3
 8000f40:	733b      	strb	r3, [r7, #12]
                    break;
 8000f42:	e01e      	b.n	8000f82 <mcp2515_configRate+0x2da>

                case (CAN_250KBPS) :
                    cfg1 = MCP_12MHz_250kBPS_CFG1;
 8000f44:	2300      	movs	r3, #0
 8000f46:	73bb      	strb	r3, [r7, #14]
                    cfg2 = MCP_12MHz_250kBPS_CFG2;
 8000f48:	23bf      	movs	r3, #191	; 0xbf
 8000f4a:	737b      	strb	r3, [r7, #13]
                    cfg3 = MCP_12MHz_250kBPS_CFG3;
 8000f4c:	2306      	movs	r3, #6
 8000f4e:	733b      	strb	r3, [r7, #12]
                    break;
 8000f50:	e017      	b.n	8000f82 <mcp2515_configRate+0x2da>

                case (CAN_500KBPS) :
                    cfg1 = MCP_12MHz_500kBPS_CFG1;
 8000f52:	2300      	movs	r3, #0
 8000f54:	73bb      	strb	r3, [r7, #14]
                    cfg2 = MCP_12MHz_500kBPS_CFG2;
 8000f56:	239b      	movs	r3, #155	; 0x9b
 8000f58:	737b      	strb	r3, [r7, #13]
                    cfg3 = MCP_12MHz_500kBPS_CFG3;
 8000f5a:	2302      	movs	r3, #2
 8000f5c:	733b      	strb	r3, [r7, #12]
                    break;
 8000f5e:	e010      	b.n	8000f82 <mcp2515_configRate+0x2da>

                case (CAN_666KBPS) :
                    cfg1 = MCP_12MHz_666kBPS_CFG1;
 8000f60:	2300      	movs	r3, #0
 8000f62:	73bb      	strb	r3, [r7, #14]
                    cfg2 = MCP_12MHz_666kBPS_CFG2;
 8000f64:	2392      	movs	r3, #146	; 0x92
 8000f66:	737b      	strb	r3, [r7, #13]
                    cfg3 = MCP_12MHz_666kBPS_CFG3;
 8000f68:	2301      	movs	r3, #1
 8000f6a:	733b      	strb	r3, [r7, #12]
                    break;
 8000f6c:	e009      	b.n	8000f82 <mcp2515_configRate+0x2da>

                case (CAN_1000KBPS) :
                    cfg1 = MCP_12MHz_1000kBPS_CFG1;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	73bb      	strb	r3, [r7, #14]
                    cfg2 = MCP_12MHz_1000kBPS_CFG2;
 8000f72:	2388      	movs	r3, #136	; 0x88
 8000f74:	737b      	strb	r3, [r7, #13]
                    cfg3 = MCP_12MHz_1000kBPS_CFG3;
 8000f76:	2301      	movs	r3, #1
 8000f78:	733b      	strb	r3, [r7, #12]
                    break;
 8000f7a:	e002      	b.n	8000f82 <mcp2515_configRate+0x2da>

                default:
                    set = 0;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	73fb      	strb	r3, [r7, #15]
                    break;
 8000f80:	bf00      	nop
            }
            break;
 8000f82:	e096      	b.n	80010b2 <mcp2515_configRate+0x40a>
        case (MCP_8MHz) :
            switch (canSpeed) {
 8000f84:	78fb      	ldrb	r3, [r7, #3]
 8000f86:	3b01      	subs	r3, #1
 8000f88:	2b12      	cmp	r3, #18
 8000f8a:	f200 808b 	bhi.w	80010a4 <mcp2515_configRate+0x3fc>
 8000f8e:	a201      	add	r2, pc, #4	; (adr r2, 8000f94 <mcp2515_configRate+0x2ec>)
 8000f90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f94:	08000fe1 	.word	0x08000fe1
 8000f98:	08000fef 	.word	0x08000fef
 8000f9c:	08000ffd 	.word	0x08000ffd
 8000fa0:	080010a5 	.word	0x080010a5
 8000fa4:	0800100b 	.word	0x0800100b
 8000fa8:	080010a5 	.word	0x080010a5
 8000fac:	08001019 	.word	0x08001019
 8000fb0:	08001027 	.word	0x08001027
 8000fb4:	08001035 	.word	0x08001035
 8000fb8:	080010a5 	.word	0x080010a5
 8000fbc:	080010a5 	.word	0x080010a5
 8000fc0:	08001043 	.word	0x08001043
 8000fc4:	08001051 	.word	0x08001051
 8000fc8:	0800105f 	.word	0x0800105f
 8000fcc:	0800106d 	.word	0x0800106d
 8000fd0:	0800107b 	.word	0x0800107b
 8000fd4:	080010a5 	.word	0x080010a5
 8000fd8:	08001089 	.word	0x08001089
 8000fdc:	08001097 	.word	0x08001097
                case (CAN_5KBPS) :
                    cfg1 = MCP_8MHz_5kBPS_CFG1;
 8000fe0:	231f      	movs	r3, #31
 8000fe2:	73bb      	strb	r3, [r7, #14]
                    cfg2 = MCP_8MHz_5kBPS_CFG2;
 8000fe4:	23bf      	movs	r3, #191	; 0xbf
 8000fe6:	737b      	strb	r3, [r7, #13]
                    cfg3 = MCP_8MHz_5kBPS_CFG3;
 8000fe8:	2307      	movs	r3, #7
 8000fea:	733b      	strb	r3, [r7, #12]
                    break;
 8000fec:	e05d      	b.n	80010aa <mcp2515_configRate+0x402>

                case (CAN_10KBPS) :
                    cfg1 = MCP_8MHz_10kBPS_CFG1;
 8000fee:	230f      	movs	r3, #15
 8000ff0:	73bb      	strb	r3, [r7, #14]
                    cfg2 = MCP_8MHz_10kBPS_CFG2;
 8000ff2:	23bf      	movs	r3, #191	; 0xbf
 8000ff4:	737b      	strb	r3, [r7, #13]
                    cfg3 = MCP_8MHz_10kBPS_CFG3;
 8000ff6:	2307      	movs	r3, #7
 8000ff8:	733b      	strb	r3, [r7, #12]
                    break;
 8000ffa:	e056      	b.n	80010aa <mcp2515_configRate+0x402>

                case (CAN_20KBPS) :
                    cfg1 = MCP_8MHz_20kBPS_CFG1;
 8000ffc:	2307      	movs	r3, #7
 8000ffe:	73bb      	strb	r3, [r7, #14]
                    cfg2 = MCP_8MHz_20kBPS_CFG2;
 8001000:	23bf      	movs	r3, #191	; 0xbf
 8001002:	737b      	strb	r3, [r7, #13]
                    cfg3 = MCP_8MHz_20kBPS_CFG3;
 8001004:	2307      	movs	r3, #7
 8001006:	733b      	strb	r3, [r7, #12]
                    break;
 8001008:	e04f      	b.n	80010aa <mcp2515_configRate+0x402>

                case (CAN_31K25BPS) :
                    cfg1 = MCP_8MHz_31k25BPS_CFG1;
 800100a:	2307      	movs	r3, #7
 800100c:	73bb      	strb	r3, [r7, #14]
                    cfg2 = MCP_8MHz_31k25BPS_CFG2;
 800100e:	23a4      	movs	r3, #164	; 0xa4
 8001010:	737b      	strb	r3, [r7, #13]
                    cfg3 = MCP_8MHz_31k25BPS_CFG3;
 8001012:	2304      	movs	r3, #4
 8001014:	733b      	strb	r3, [r7, #12]
                    break;
 8001016:	e048      	b.n	80010aa <mcp2515_configRate+0x402>

                case (CAN_40KBPS) :
                    cfg1 = MCP_8MHz_40kBPS_CFG1;
 8001018:	2303      	movs	r3, #3
 800101a:	73bb      	strb	r3, [r7, #14]
                    cfg2 = MCP_8MHz_40kBPS_CFG2;
 800101c:	23bf      	movs	r3, #191	; 0xbf
 800101e:	737b      	strb	r3, [r7, #13]
                    cfg3 = MCP_8MHz_40kBPS_CFG3;
 8001020:	2307      	movs	r3, #7
 8001022:	733b      	strb	r3, [r7, #12]
                    break;
 8001024:	e041      	b.n	80010aa <mcp2515_configRate+0x402>

                case (CAN_50KBPS) :
                    cfg1 = MCP_8MHz_50kBPS_CFG1;
 8001026:	2303      	movs	r3, #3
 8001028:	73bb      	strb	r3, [r7, #14]
                    cfg2 = MCP_8MHz_50kBPS_CFG2;
 800102a:	23b4      	movs	r3, #180	; 0xb4
 800102c:	737b      	strb	r3, [r7, #13]
                    cfg3 = MCP_8MHz_50kBPS_CFG3;
 800102e:	2306      	movs	r3, #6
 8001030:	733b      	strb	r3, [r7, #12]
                    break;
 8001032:	e03a      	b.n	80010aa <mcp2515_configRate+0x402>

                case (CAN_80KBPS) :
                    cfg1 = MCP_8MHz_80kBPS_CFG1;
 8001034:	2301      	movs	r3, #1
 8001036:	73bb      	strb	r3, [r7, #14]
                    cfg2 = MCP_8MHz_80kBPS_CFG2;
 8001038:	23bf      	movs	r3, #191	; 0xbf
 800103a:	737b      	strb	r3, [r7, #13]
                    cfg3 = MCP_8MHz_80kBPS_CFG3;
 800103c:	2307      	movs	r3, #7
 800103e:	733b      	strb	r3, [r7, #12]
                    break;
 8001040:	e033      	b.n	80010aa <mcp2515_configRate+0x402>

                case (CAN_100KBPS) :
                    cfg1 = MCP_8MHz_100kBPS_CFG1;
 8001042:	2301      	movs	r3, #1
 8001044:	73bb      	strb	r3, [r7, #14]
                    cfg2 = MCP_8MHz_100kBPS_CFG2;
 8001046:	23b4      	movs	r3, #180	; 0xb4
 8001048:	737b      	strb	r3, [r7, #13]
                    cfg3 = MCP_8MHz_100kBPS_CFG3;
 800104a:	2306      	movs	r3, #6
 800104c:	733b      	strb	r3, [r7, #12]
                    break;
 800104e:	e02c      	b.n	80010aa <mcp2515_configRate+0x402>

                case (CAN_125KBPS) :
                    cfg1 = MCP_8MHz_125kBPS_CFG1;
 8001050:	2301      	movs	r3, #1
 8001052:	73bb      	strb	r3, [r7, #14]
                    cfg2 = MCP_8MHz_125kBPS_CFG2;
 8001054:	23b1      	movs	r3, #177	; 0xb1
 8001056:	737b      	strb	r3, [r7, #13]
                    cfg3 = MCP_8MHz_125kBPS_CFG3;
 8001058:	2305      	movs	r3, #5
 800105a:	733b      	strb	r3, [r7, #12]
                    break;
 800105c:	e025      	b.n	80010aa <mcp2515_configRate+0x402>

                case (CAN_200KBPS) :
                    cfg1 = MCP_8MHz_200kBPS_CFG1;
 800105e:	2300      	movs	r3, #0
 8001060:	73bb      	strb	r3, [r7, #14]
                    cfg2 = MCP_8MHz_200kBPS_CFG2;
 8001062:	23b4      	movs	r3, #180	; 0xb4
 8001064:	737b      	strb	r3, [r7, #13]
                    cfg3 = MCP_8MHz_200kBPS_CFG3;
 8001066:	2306      	movs	r3, #6
 8001068:	733b      	strb	r3, [r7, #12]
                    break;
 800106a:	e01e      	b.n	80010aa <mcp2515_configRate+0x402>

                case (CAN_250KBPS) :
                    cfg1 = MCP_8MHz_250kBPS_CFG1;
 800106c:	2300      	movs	r3, #0
 800106e:	73bb      	strb	r3, [r7, #14]
                    cfg2 = MCP_8MHz_250kBPS_CFG2;
 8001070:	23b1      	movs	r3, #177	; 0xb1
 8001072:	737b      	strb	r3, [r7, #13]
                    cfg3 = MCP_8MHz_250kBPS_CFG3;
 8001074:	2305      	movs	r3, #5
 8001076:	733b      	strb	r3, [r7, #12]
                    break;
 8001078:	e017      	b.n	80010aa <mcp2515_configRate+0x402>

                case (CAN_500KBPS) :
                    cfg1 = MCP_8MHz_500kBPS_CFG1;
 800107a:	2300      	movs	r3, #0
 800107c:	73bb      	strb	r3, [r7, #14]
                    cfg2 = MCP_8MHz_500kBPS_CFG2;
 800107e:	2390      	movs	r3, #144	; 0x90
 8001080:	737b      	strb	r3, [r7, #13]
                    cfg3 = MCP_8MHz_500kBPS_CFG3;
 8001082:	2302      	movs	r3, #2
 8001084:	733b      	strb	r3, [r7, #12]
                    break;
 8001086:	e010      	b.n	80010aa <mcp2515_configRate+0x402>

                case (CAN_800KBPS) :
                    cfg1 = MCP_8MHz_800kBPS_CFG1;
 8001088:	2300      	movs	r3, #0
 800108a:	73bb      	strb	r3, [r7, #14]
                    cfg2 = MCP_8MHz_800kBPS_CFG2;
 800108c:	2380      	movs	r3, #128	; 0x80
 800108e:	737b      	strb	r3, [r7, #13]
                    cfg3 = MCP_8MHz_800kBPS_CFG3;
 8001090:	2301      	movs	r3, #1
 8001092:	733b      	strb	r3, [r7, #12]
                    break;
 8001094:	e009      	b.n	80010aa <mcp2515_configRate+0x402>

                case (CAN_1000KBPS) :
                    cfg1 = MCP_8MHz_1000kBPS_CFG1;
 8001096:	2300      	movs	r3, #0
 8001098:	73bb      	strb	r3, [r7, #14]
                    cfg2 = MCP_8MHz_1000kBPS_CFG2;
 800109a:	2380      	movs	r3, #128	; 0x80
 800109c:	737b      	strb	r3, [r7, #13]
                    cfg3 = MCP_8MHz_1000kBPS_CFG3;
 800109e:	2300      	movs	r3, #0
 80010a0:	733b      	strb	r3, [r7, #12]
                    break;
 80010a2:	e002      	b.n	80010aa <mcp2515_configRate+0x402>

                default:
                    set = 0;
 80010a4:	2300      	movs	r3, #0
 80010a6:	73fb      	strb	r3, [r7, #15]
                    break;
 80010a8:	bf00      	nop
            }
            break;
 80010aa:	e002      	b.n	80010b2 <mcp2515_configRate+0x40a>

        default:
            set = 0;
 80010ac:	2300      	movs	r3, #0
 80010ae:	73fb      	strb	r3, [r7, #15]
            break;
 80010b0:	bf00      	nop
    }

    if (set)
 80010b2:	7bfb      	ldrb	r3, [r7, #15]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d013      	beq.n	80010e0 <mcp2515_configRate+0x438>
	{
        mcp2515_setRegister(canCfg,MCP_CNF1, cfg1);
 80010b8:	7bbb      	ldrb	r3, [r7, #14]
 80010ba:	461a      	mov	r2, r3
 80010bc:	212a      	movs	r1, #42	; 0x2a
 80010be:	6878      	ldr	r0, [r7, #4]
 80010c0:	f7ff fd11 	bl	8000ae6 <mcp2515_setRegister>
        mcp2515_setRegister(canCfg,MCP_CNF2, cfg2);
 80010c4:	7b7b      	ldrb	r3, [r7, #13]
 80010c6:	461a      	mov	r2, r3
 80010c8:	2129      	movs	r1, #41	; 0x29
 80010ca:	6878      	ldr	r0, [r7, #4]
 80010cc:	f7ff fd0b 	bl	8000ae6 <mcp2515_setRegister>
        mcp2515_setRegister(canCfg,MCP_CNF3, cfg3);
 80010d0:	7b3b      	ldrb	r3, [r7, #12]
 80010d2:	461a      	mov	r2, r3
 80010d4:	2128      	movs	r1, #40	; 0x28
 80010d6:	6878      	ldr	r0, [r7, #4]
 80010d8:	f7ff fd05 	bl	8000ae6 <mcp2515_setRegister>

        return MCP2515_OK;
 80010dc:	2300      	movs	r3, #0
 80010de:	e000      	b.n	80010e2 <mcp2515_configRate+0x43a>
    }
	else
	{
        return MCP2515_FAIL;
 80010e0:	2301      	movs	r3, #1
    }
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	3710      	adds	r7, #16
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop

080010ec <mcp2515_initCANBuffers>:
/*********************************************************************************************************
** Function name:           mcp2515_initCANBuffers
** Descriptions:            init canbuffers
*********************************************************************************************************/
void mcp2515_initCANBuffers(CanbusConfig_t* canCfg)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b084      	sub	sp, #16
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
    uint8_t i, a1, a2, a3;

    a1 = MCP_TXB0CTRL;
 80010f4:	2330      	movs	r3, #48	; 0x30
 80010f6:	73bb      	strb	r3, [r7, #14]
    a2 = MCP_TXB1CTRL;
 80010f8:	2340      	movs	r3, #64	; 0x40
 80010fa:	737b      	strb	r3, [r7, #13]
    a3 = MCP_TXB2CTRL;
 80010fc:	2350      	movs	r3, #80	; 0x50
 80010fe:	733b      	strb	r3, [r7, #12]
    for (i = 0; i < 14; i++)
 8001100:	2300      	movs	r3, #0
 8001102:	73fb      	strb	r3, [r7, #15]
 8001104:	e01d      	b.n	8001142 <mcp2515_initCANBuffers+0x56>
		{                       // in-buffer loop
        mcp2515_setRegister(canCfg,a1,0);
 8001106:	7bbb      	ldrb	r3, [r7, #14]
 8001108:	2200      	movs	r2, #0
 800110a:	4619      	mov	r1, r3
 800110c:	6878      	ldr	r0, [r7, #4]
 800110e:	f7ff fcea 	bl	8000ae6 <mcp2515_setRegister>
        mcp2515_setRegister(canCfg,a2,0);
 8001112:	7b7b      	ldrb	r3, [r7, #13]
 8001114:	2200      	movs	r2, #0
 8001116:	4619      	mov	r1, r3
 8001118:	6878      	ldr	r0, [r7, #4]
 800111a:	f7ff fce4 	bl	8000ae6 <mcp2515_setRegister>
        mcp2515_setRegister(canCfg,a3,0);
 800111e:	7b3b      	ldrb	r3, [r7, #12]
 8001120:	2200      	movs	r2, #0
 8001122:	4619      	mov	r1, r3
 8001124:	6878      	ldr	r0, [r7, #4]
 8001126:	f7ff fcde 	bl	8000ae6 <mcp2515_setRegister>
        a1++;
 800112a:	7bbb      	ldrb	r3, [r7, #14]
 800112c:	3301      	adds	r3, #1
 800112e:	73bb      	strb	r3, [r7, #14]
        a2++;
 8001130:	7b7b      	ldrb	r3, [r7, #13]
 8001132:	3301      	adds	r3, #1
 8001134:	737b      	strb	r3, [r7, #13]
        a3++;
 8001136:	7b3b      	ldrb	r3, [r7, #12]
 8001138:	3301      	adds	r3, #1
 800113a:	733b      	strb	r3, [r7, #12]
    for (i = 0; i < 14; i++)
 800113c:	7bfb      	ldrb	r3, [r7, #15]
 800113e:	3301      	adds	r3, #1
 8001140:	73fb      	strb	r3, [r7, #15]
 8001142:	7bfb      	ldrb	r3, [r7, #15]
 8001144:	2b0d      	cmp	r3, #13
 8001146:	d9de      	bls.n	8001106 <mcp2515_initCANBuffers+0x1a>
    }
    mcp2515_setRegister(canCfg,MCP_RXB0CTRL,0);
 8001148:	2200      	movs	r2, #0
 800114a:	2160      	movs	r1, #96	; 0x60
 800114c:	6878      	ldr	r0, [r7, #4]
 800114e:	f7ff fcca 	bl	8000ae6 <mcp2515_setRegister>
    mcp2515_setRegister(canCfg,MCP_RXB1CTRL,0);
 8001152:	2200      	movs	r2, #0
 8001154:	2170      	movs	r1, #112	; 0x70
 8001156:	6878      	ldr	r0, [r7, #4]
 8001158:	f7ff fcc5 	bl	8000ae6 <mcp2515_setRegister>
}
 800115c:	bf00      	nop
 800115e:	3710      	adds	r7, #16
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}

08001164 <mcp2515_init>:
/*********************************************************************************************************
** Function name:           mcp2515_init
** Descriptions:            init the device
*********************************************************************************************************/
uint8_t mcp2515_init(CanbusConfig_t* canCfg,const uint8_t canSpeed, const uint8_t clock)
 {
 8001164:	b580      	push	{r7, lr}
 8001166:	b084      	sub	sp, #16
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
 800116c:	460b      	mov	r3, r1
 800116e:	70fb      	strb	r3, [r7, #3]
 8001170:	4613      	mov	r3, r2
 8001172:	70bb      	strb	r3, [r7, #2]
    uint8_t res;

    mcp2515_reset(canCfg);
 8001174:	6878      	ldr	r0, [r7, #4]
 8001176:	f7ff fc82 	bl	8000a7e <mcp2515_reset>
    res = mcp2515_setCANCTRL_Mode(canCfg,MODE_CONFIG);
 800117a:	2180      	movs	r1, #128	; 0x80
 800117c:	6878      	ldr	r0, [r7, #4]
 800117e:	f7ff fd22 	bl	8000bc6 <mcp2515_setCANCTRL_Mode>
 8001182:	4603      	mov	r3, r0
 8001184:	73fb      	strb	r3, [r7, #15]

    if (res > 0)
 8001186:	7bfb      	ldrb	r3, [r7, #15]
 8001188:	2b00      	cmp	r3, #0
 800118a:	d004      	beq.n	8001196 <mcp2515_init+0x32>
	{
        #if DEBUG_EN
        debugPrint("Enter setting mode fail\n");
        #else
        HW_DELAY(10);
 800118c:	200a      	movs	r0, #10
 800118e:	f000 fbfd 	bl	800198c <HAL_Delay>
        #endif
        return res;
 8001192:	7bfb      	ldrb	r3, [r7, #15]
 8001194:	e03c      	b.n	8001210 <mcp2515_init+0xac>
    }
    #if DEBUG_EN
    debugPrint("Enter setting mode success\n ");
    #else
    HW_DELAY(10);
 8001196:	200a      	movs	r0, #10
 8001198:	f000 fbf8 	bl	800198c <HAL_Delay>
    #endif

    // set boadrate
    if (mcp2515_configRate(canCfg,canSpeed, clock)) {
 800119c:	78ba      	ldrb	r2, [r7, #2]
 800119e:	78fb      	ldrb	r3, [r7, #3]
 80011a0:	4619      	mov	r1, r3
 80011a2:	6878      	ldr	r0, [r7, #4]
 80011a4:	f7ff fd80 	bl	8000ca8 <mcp2515_configRate>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d004      	beq.n	80011b8 <mcp2515_init+0x54>
        #if DEBUG_EN
    	debugPrint("set rate fall!!\n");
        #else
        HW_DELAY(10);
 80011ae:	200a      	movs	r0, #10
 80011b0:	f000 fbec 	bl	800198c <HAL_Delay>
        #endif
        return res;
 80011b4:	7bfb      	ldrb	r3, [r7, #15]
 80011b6:	e02b      	b.n	8001210 <mcp2515_init+0xac>
    }
    #if DEBUG_EN
    debugPrint("set rate success!!\n");
    #else
    HW_DELAY(10);
 80011b8:	200a      	movs	r0, #10
 80011ba:	f000 fbe7 	bl	800198c <HAL_Delay>
    #endif

    if (res == MCP2515_OK) {
 80011be:	7bfb      	ldrb	r3, [r7, #15]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d124      	bne.n	800120e <mcp2515_init+0xaa>

        // init canbuffers
        mcp2515_initCANBuffers(canCfg);
 80011c4:	6878      	ldr	r0, [r7, #4]
 80011c6:	f7ff ff91 	bl	80010ec <mcp2515_initCANBuffers>

        // interrupt mode
        mcp2515_setRegister(canCfg,MCP_CANINTE, MCP_RX0IF | MCP_RX1IF);
 80011ca:	2203      	movs	r2, #3
 80011cc:	212b      	movs	r1, #43	; 0x2b
 80011ce:	6878      	ldr	r0, [r7, #4]
 80011d0:	f7ff fc89 	bl	8000ae6 <mcp2515_setRegister>
        mcp2515_modifyRegister(canCfg,MCP_RXB0CTRL,MCP_RXB_RX_MASK | MCP_RXB_BUKT_MASK,MCP_RXB_RX_ANY | MCP_RXB_BUKT_MASK);
        mcp2515_modifyRegister(canCfg,MCP_RXB1CTRL, MCP_RXB_RX_MASK, MCP_RXB_RX_ANY);
        #else


        mcp2515_modifyRegister(canCfg,MCP_RXB0CTRL,MCP_RXB_RX_MASK | MCP_RXB_BUKT_MASK,MCP_RXB_RX_STDEXT | MCP_RXB_BUKT_MASK);
 80011d4:	2304      	movs	r3, #4
 80011d6:	2264      	movs	r2, #100	; 0x64
 80011d8:	2160      	movs	r1, #96	; 0x60
 80011da:	6878      	ldr	r0, [r7, #4]
 80011dc:	f7ff fca3 	bl	8000b26 <mcp2515_modifyRegister>
        mcp2515_modifyRegister(canCfg,MCP_RXB1CTRL, MCP_RXB_RX_MASK, MCP_RXB_RX_STDEXT);
 80011e0:	2300      	movs	r3, #0
 80011e2:	2260      	movs	r2, #96	; 0x60
 80011e4:	2170      	movs	r1, #112	; 0x70
 80011e6:	6878      	ldr	r0, [r7, #4]
 80011e8:	f7ff fc9d 	bl	8000b26 <mcp2515_modifyRegister>
        #endif
        // enter normal mode
        res = setMode(canCfg,MODE_NORMAL);
 80011ec:	2100      	movs	r1, #0
 80011ee:	6878      	ldr	r0, [r7, #4]
 80011f0:	f7ff fcc3 	bl	8000b7a <setMode>
 80011f4:	4603      	mov	r3, r0
 80011f6:	73fb      	strb	r3, [r7, #15]
        if (res)
 80011f8:	7bfb      	ldrb	r3, [r7, #15]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d004      	beq.n	8001208 <mcp2515_init+0xa4>
		{
            #if DEBUG_EN
            debugPrint("Enter Normal Mode Fail!!\n");
            #else
            HW_DELAY(10);
 80011fe:	200a      	movs	r0, #10
 8001200:	f000 fbc4 	bl	800198c <HAL_Delay>
            #endif
            return res;
 8001204:	7bfb      	ldrb	r3, [r7, #15]
 8001206:	e003      	b.n	8001210 <mcp2515_init+0xac>
        }

        #if DEBUG_EN
        debugPrint("Enter Normal Mode Success!!\n");
        #else
        HW_DELAY(10);
 8001208:	200a      	movs	r0, #10
 800120a:	f000 fbbf 	bl	800198c <HAL_Delay>
        #endif
    }
    return res;
 800120e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001210:	4618      	mov	r0, r3
 8001212:	3710      	adds	r7, #16
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}

08001218 <begin>:
/*********************************************************************************************************
** Function name:           begin
** Descriptions:            init can and set speed
*********************************************************************************************************/
uint8_t begin(CanbusConfig_t* canCfg,uint32_t speedset, const uint8_t clockset)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b086      	sub	sp, #24
 800121c:	af00      	add	r7, sp, #0
 800121e:	60f8      	str	r0, [r7, #12]
 8001220:	60b9      	str	r1, [r7, #8]
 8001222:	4613      	mov	r3, r2
 8001224:	71fb      	strb	r3, [r7, #7]

    uint8_t res = mcp2515_init(canCfg,(uint8_t)speedset, clockset);
 8001226:	68bb      	ldr	r3, [r7, #8]
 8001228:	b2db      	uxtb	r3, r3
 800122a:	79fa      	ldrb	r2, [r7, #7]
 800122c:	4619      	mov	r1, r3
 800122e:	68f8      	ldr	r0, [r7, #12]
 8001230:	f7ff ff98 	bl	8001164 <mcp2515_init>
 8001234:	4603      	mov	r3, r0
 8001236:	75fb      	strb	r3, [r7, #23]

    return ((res == MCP2515_OK) ? CAN_OK : CAN_FAILINIT);
 8001238:	7dfb      	ldrb	r3, [r7, #23]
 800123a:	2b00      	cmp	r3, #0
 800123c:	bf14      	ite	ne
 800123e:	2301      	movne	r3, #1
 8001240:	2300      	moveq	r3, #0
 8001242:	b2db      	uxtb	r3, r3
}
 8001244:	4618      	mov	r0, r3
 8001246:	3718      	adds	r7, #24
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}

0800124c <ChipUnSelectFpB>:
#include "mcp2515_hardware.h"



void ChipUnSelectFpB(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CS_CAN_B_GPIO_Port, CS_CAN_B_Pin, GPIO_PIN_SET);
 8001250:	2201      	movs	r2, #1
 8001252:	2101      	movs	r1, #1
 8001254:	4802      	ldr	r0, [pc, #8]	; (8001260 <ChipUnSelectFpB+0x14>)
 8001256:	f001 fbc1 	bl	80029dc <HAL_GPIO_WritePin>
}
 800125a:	bf00      	nop
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	40010c00 	.word	0x40010c00

08001264 <ChipSelectFpB>:

void ChipSelectFpB(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CS_CAN_B_GPIO_Port, CS_CAN_B_Pin, GPIO_PIN_RESET);
 8001268:	2200      	movs	r2, #0
 800126a:	2101      	movs	r1, #1
 800126c:	4802      	ldr	r0, [pc, #8]	; (8001278 <ChipSelectFpB+0x14>)
 800126e:	f001 fbb5 	bl	80029dc <HAL_GPIO_WritePin>
}
 8001272:	bf00      	nop
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	40010c00 	.word	0x40010c00

0800127c <SPIReadWriteFpB>:

void SPIReadWriteFpB(uint8_t data)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0
 8001282:	4603      	mov	r3, r0
 8001284:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&data, 1, 100);
 8001286:	1df9      	adds	r1, r7, #7
 8001288:	2364      	movs	r3, #100	; 0x64
 800128a:	2201      	movs	r2, #1
 800128c:	4803      	ldr	r0, [pc, #12]	; (800129c <SPIReadWriteFpB+0x20>)
 800128e:	f002 fb6f 	bl	8003970 <HAL_SPI_Transmit>
}
 8001292:	bf00      	nop
 8001294:	3708      	adds	r7, #8
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	20000188 	.word	0x20000188

080012a0 <SPIWriteFpB>:

void SPIWriteFpB(uint8_t data)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b082      	sub	sp, #8
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	4603      	mov	r3, r0
 80012a8:	71fb      	strb	r3, [r7, #7]
	 HAL_SPI_Transmit(&hspi1, (uint8_t *)&data, 1, 100);
 80012aa:	1df9      	adds	r1, r7, #7
 80012ac:	2364      	movs	r3, #100	; 0x64
 80012ae:	2201      	movs	r2, #1
 80012b0:	4803      	ldr	r0, [pc, #12]	; (80012c0 <SPIWriteFpB+0x20>)
 80012b2:	f002 fb5d 	bl	8003970 <HAL_SPI_Transmit>
}
 80012b6:	bf00      	nop
 80012b8:	3708      	adds	r7, #8
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	20000188 	.word	0x20000188

080012c4 <SPIReadFpB>:

uint8_t SPIReadFpB(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b082      	sub	sp, #8
 80012c8:	af00      	add	r7, sp, #0
	uint8_t data = 0x00;
 80012ca:	2300      	movs	r3, #0
 80012cc:	71fb      	strb	r3, [r7, #7]

	HAL_SPI_Receive(&hspi1, (uint8_t *)&data, 1, 100);
 80012ce:	1df9      	adds	r1, r7, #7
 80012d0:	2364      	movs	r3, #100	; 0x64
 80012d2:	2201      	movs	r2, #1
 80012d4:	4803      	ldr	r0, [pc, #12]	; (80012e4 <SPIReadFpB+0x20>)
 80012d6:	f002 fc8e 	bl	8003bf6 <HAL_SPI_Receive>

	return data;
 80012da:	79fb      	ldrb	r3, [r7, #7]
}
 80012dc:	4618      	mov	r0, r3
 80012de:	3708      	adds	r7, #8
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	20000188 	.word	0x20000188

080012e8 <ChipUnSelectFpC>:

void ChipUnSelectFpC(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CS_CAN_C_GPIO_Port, CS_CAN_C_Pin, GPIO_PIN_SET);
 80012ec:	2201      	movs	r2, #1
 80012ee:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012f2:	4802      	ldr	r0, [pc, #8]	; (80012fc <ChipUnSelectFpC+0x14>)
 80012f4:	f001 fb72 	bl	80029dc <HAL_GPIO_WritePin>
}
 80012f8:	bf00      	nop
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	40010800 	.word	0x40010800

08001300 <ChipSelectFpC>:

void ChipSelectFpC(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CS_CAN_C_GPIO_Port, CS_CAN_C_Pin, GPIO_PIN_RESET);
 8001304:	2200      	movs	r2, #0
 8001306:	f44f 7180 	mov.w	r1, #256	; 0x100
 800130a:	4802      	ldr	r0, [pc, #8]	; (8001314 <ChipSelectFpC+0x14>)
 800130c:	f001 fb66 	bl	80029dc <HAL_GPIO_WritePin>
}
 8001310:	bf00      	nop
 8001312:	bd80      	pop	{r7, pc}
 8001314:	40010800 	.word	0x40010800

08001318 <SPIReadWriteFpC>:

void SPIReadWriteFpC(uint8_t data)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b082      	sub	sp, #8
 800131c:	af00      	add	r7, sp, #0
 800131e:	4603      	mov	r3, r0
 8001320:	71fb      	strb	r3, [r7, #7]
	 HAL_SPI_Transmit(&hspi2, (uint8_t *)&data, 1, 100);
 8001322:	1df9      	adds	r1, r7, #7
 8001324:	2364      	movs	r3, #100	; 0x64
 8001326:	2201      	movs	r2, #1
 8001328:	4803      	ldr	r0, [pc, #12]	; (8001338 <SPIReadWriteFpC+0x20>)
 800132a:	f002 fb21 	bl	8003970 <HAL_SPI_Transmit>
}
 800132e:	bf00      	nop
 8001330:	3708      	adds	r7, #8
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	200001e0 	.word	0x200001e0

0800133c <SPIWriteFpC>:

void SPIWriteFpC(uint8_t data)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b082      	sub	sp, #8
 8001340:	af00      	add	r7, sp, #0
 8001342:	4603      	mov	r3, r0
 8001344:	71fb      	strb	r3, [r7, #7]
	 HAL_SPI_Transmit(&hspi2, (uint8_t *)&data, 1, 100);
 8001346:	1df9      	adds	r1, r7, #7
 8001348:	2364      	movs	r3, #100	; 0x64
 800134a:	2201      	movs	r2, #1
 800134c:	4803      	ldr	r0, [pc, #12]	; (800135c <SPIWriteFpC+0x20>)
 800134e:	f002 fb0f 	bl	8003970 <HAL_SPI_Transmit>
}
 8001352:	bf00      	nop
 8001354:	3708      	adds	r7, #8
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	200001e0 	.word	0x200001e0

08001360 <SPIReadFpC>:

uint8_t SPIReadFpC(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b082      	sub	sp, #8
 8001364:	af00      	add	r7, sp, #0
	uint8_t data = 0x00;
 8001366:	2300      	movs	r3, #0
 8001368:	71fb      	strb	r3, [r7, #7]

	HAL_SPI_Receive(&hspi2, (uint8_t *)&data, 1, 100);
 800136a:	1df9      	adds	r1, r7, #7
 800136c:	2364      	movs	r3, #100	; 0x64
 800136e:	2201      	movs	r2, #1
 8001370:	4803      	ldr	r0, [pc, #12]	; (8001380 <SPIReadFpC+0x20>)
 8001372:	f002 fc40 	bl	8003bf6 <HAL_SPI_Receive>

	return data;
 8001376:	79fb      	ldrb	r3, [r7, #7]
}
 8001378:	4618      	mov	r0, r3
 800137a:	3708      	adds	r7, #8
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}
 8001380:	200001e0 	.word	0x200001e0

08001384 <ChipUnSelectFpD>:


void ChipUnSelectFpD(void)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CS_CAN_D_GPIO_Port, CS_CAN_D_Pin, GPIO_PIN_SET);
 8001388:	2201      	movs	r2, #1
 800138a:	2102      	movs	r1, #2
 800138c:	4802      	ldr	r0, [pc, #8]	; (8001398 <ChipUnSelectFpD+0x14>)
 800138e:	f001 fb25 	bl	80029dc <HAL_GPIO_WritePin>
}
 8001392:	bf00      	nop
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	40010800 	.word	0x40010800

0800139c <ChipSelectFpD>:

void ChipSelectFpD(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CS_CAN_D_GPIO_Port, CS_CAN_D_Pin, GPIO_PIN_RESET);
 80013a0:	2200      	movs	r2, #0
 80013a2:	2102      	movs	r1, #2
 80013a4:	4802      	ldr	r0, [pc, #8]	; (80013b0 <ChipSelectFpD+0x14>)
 80013a6:	f001 fb19 	bl	80029dc <HAL_GPIO_WritePin>
}
 80013aa:	bf00      	nop
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	40010800 	.word	0x40010800

080013b4 <SPIReadWriteFpD>:

void SPIReadWriteFpD(uint8_t data)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b082      	sub	sp, #8
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	4603      	mov	r3, r0
 80013bc:	71fb      	strb	r3, [r7, #7]
	 HAL_SPI_Transmit(&hspi2, (uint8_t *)&data, 1, 100);
 80013be:	1df9      	adds	r1, r7, #7
 80013c0:	2364      	movs	r3, #100	; 0x64
 80013c2:	2201      	movs	r2, #1
 80013c4:	4803      	ldr	r0, [pc, #12]	; (80013d4 <SPIReadWriteFpD+0x20>)
 80013c6:	f002 fad3 	bl	8003970 <HAL_SPI_Transmit>
}
 80013ca:	bf00      	nop
 80013cc:	3708      	adds	r7, #8
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	200001e0 	.word	0x200001e0

080013d8 <SPIWriteFpD>:

void SPIWriteFpD(uint8_t data)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b082      	sub	sp, #8
 80013dc:	af00      	add	r7, sp, #0
 80013de:	4603      	mov	r3, r0
 80013e0:	71fb      	strb	r3, [r7, #7]
	 HAL_SPI_Transmit(&hspi2, (uint8_t *)&data, 1, 100);
 80013e2:	1df9      	adds	r1, r7, #7
 80013e4:	2364      	movs	r3, #100	; 0x64
 80013e6:	2201      	movs	r2, #1
 80013e8:	4803      	ldr	r0, [pc, #12]	; (80013f8 <SPIWriteFpD+0x20>)
 80013ea:	f002 fac1 	bl	8003970 <HAL_SPI_Transmit>
}
 80013ee:	bf00      	nop
 80013f0:	3708      	adds	r7, #8
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	200001e0 	.word	0x200001e0

080013fc <SPIReadFpD>:

uint8_t SPIReadFpD(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b082      	sub	sp, #8
 8001400:	af00      	add	r7, sp, #0
	uint8_t data = 0x00;
 8001402:	2300      	movs	r3, #0
 8001404:	71fb      	strb	r3, [r7, #7]

	HAL_SPI_Receive(&hspi2, (uint8_t *)&data, 1, 100);
 8001406:	1df9      	adds	r1, r7, #7
 8001408:	2364      	movs	r3, #100	; 0x64
 800140a:	2201      	movs	r2, #1
 800140c:	4803      	ldr	r0, [pc, #12]	; (800141c <SPIReadFpD+0x20>)
 800140e:	f002 fbf2 	bl	8003bf6 <HAL_SPI_Receive>

	return data;
 8001412:	79fb      	ldrb	r3, [r7, #7]
}
 8001414:	4618      	mov	r0, r3
 8001416:	3708      	adds	r7, #8
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}
 800141c:	200001e0 	.word	0x200001e0

08001420 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001420:	b480      	push	{r7}
 8001422:	b085      	sub	sp, #20
 8001424:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001426:	4b15      	ldr	r3, [pc, #84]	; (800147c <HAL_MspInit+0x5c>)
 8001428:	699b      	ldr	r3, [r3, #24]
 800142a:	4a14      	ldr	r2, [pc, #80]	; (800147c <HAL_MspInit+0x5c>)
 800142c:	f043 0301 	orr.w	r3, r3, #1
 8001430:	6193      	str	r3, [r2, #24]
 8001432:	4b12      	ldr	r3, [pc, #72]	; (800147c <HAL_MspInit+0x5c>)
 8001434:	699b      	ldr	r3, [r3, #24]
 8001436:	f003 0301 	and.w	r3, r3, #1
 800143a:	60bb      	str	r3, [r7, #8]
 800143c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800143e:	4b0f      	ldr	r3, [pc, #60]	; (800147c <HAL_MspInit+0x5c>)
 8001440:	69db      	ldr	r3, [r3, #28]
 8001442:	4a0e      	ldr	r2, [pc, #56]	; (800147c <HAL_MspInit+0x5c>)
 8001444:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001448:	61d3      	str	r3, [r2, #28]
 800144a:	4b0c      	ldr	r3, [pc, #48]	; (800147c <HAL_MspInit+0x5c>)
 800144c:	69db      	ldr	r3, [r3, #28]
 800144e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001452:	607b      	str	r3, [r7, #4]
 8001454:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001456:	4b0a      	ldr	r3, [pc, #40]	; (8001480 <HAL_MspInit+0x60>)
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	60fb      	str	r3, [r7, #12]
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001462:	60fb      	str	r3, [r7, #12]
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800146a:	60fb      	str	r3, [r7, #12]
 800146c:	4a04      	ldr	r2, [pc, #16]	; (8001480 <HAL_MspInit+0x60>)
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001472:	bf00      	nop
 8001474:	3714      	adds	r7, #20
 8001476:	46bd      	mov	sp, r7
 8001478:	bc80      	pop	{r7}
 800147a:	4770      	bx	lr
 800147c:	40021000 	.word	0x40021000
 8001480:	40010000 	.word	0x40010000

08001484 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b08a      	sub	sp, #40	; 0x28
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800148c:	f107 0314 	add.w	r3, r7, #20
 8001490:	2200      	movs	r2, #0
 8001492:	601a      	str	r2, [r3, #0]
 8001494:	605a      	str	r2, [r3, #4]
 8001496:	609a      	str	r2, [r3, #8]
 8001498:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	4a29      	ldr	r2, [pc, #164]	; (8001544 <HAL_CAN_MspInit+0xc0>)
 80014a0:	4293      	cmp	r3, r2
 80014a2:	d14b      	bne.n	800153c <HAL_CAN_MspInit+0xb8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80014a4:	4b28      	ldr	r3, [pc, #160]	; (8001548 <HAL_CAN_MspInit+0xc4>)
 80014a6:	69db      	ldr	r3, [r3, #28]
 80014a8:	4a27      	ldr	r2, [pc, #156]	; (8001548 <HAL_CAN_MspInit+0xc4>)
 80014aa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80014ae:	61d3      	str	r3, [r2, #28]
 80014b0:	4b25      	ldr	r3, [pc, #148]	; (8001548 <HAL_CAN_MspInit+0xc4>)
 80014b2:	69db      	ldr	r3, [r3, #28]
 80014b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014b8:	613b      	str	r3, [r7, #16]
 80014ba:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014bc:	4b22      	ldr	r3, [pc, #136]	; (8001548 <HAL_CAN_MspInit+0xc4>)
 80014be:	699b      	ldr	r3, [r3, #24]
 80014c0:	4a21      	ldr	r2, [pc, #132]	; (8001548 <HAL_CAN_MspInit+0xc4>)
 80014c2:	f043 0308 	orr.w	r3, r3, #8
 80014c6:	6193      	str	r3, [r2, #24]
 80014c8:	4b1f      	ldr	r3, [pc, #124]	; (8001548 <HAL_CAN_MspInit+0xc4>)
 80014ca:	699b      	ldr	r3, [r3, #24]
 80014cc:	f003 0308 	and.w	r3, r3, #8
 80014d0:	60fb      	str	r3, [r7, #12]
 80014d2:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80014d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014da:	2300      	movs	r3, #0
 80014dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014de:	2300      	movs	r3, #0
 80014e0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014e2:	f107 0314 	add.w	r3, r7, #20
 80014e6:	4619      	mov	r1, r3
 80014e8:	4818      	ldr	r0, [pc, #96]	; (800154c <HAL_CAN_MspInit+0xc8>)
 80014ea:	f001 f8f3 	bl	80026d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80014ee:	f44f 7300 	mov.w	r3, #512	; 0x200
 80014f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014f4:	2302      	movs	r3, #2
 80014f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014f8:	2303      	movs	r3, #3
 80014fa:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014fc:	f107 0314 	add.w	r3, r7, #20
 8001500:	4619      	mov	r1, r3
 8001502:	4812      	ldr	r0, [pc, #72]	; (800154c <HAL_CAN_MspInit+0xc8>)
 8001504:	f001 f8e6 	bl	80026d4 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 8001508:	4b11      	ldr	r3, [pc, #68]	; (8001550 <HAL_CAN_MspInit+0xcc>)
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	627b      	str	r3, [r7, #36]	; 0x24
 800150e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001510:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8001514:	627b      	str	r3, [r7, #36]	; 0x24
 8001516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001518:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800151c:	627b      	str	r3, [r7, #36]	; 0x24
 800151e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001520:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001524:	627b      	str	r3, [r7, #36]	; 0x24
 8001526:	4a0a      	ldr	r2, [pc, #40]	; (8001550 <HAL_CAN_MspInit+0xcc>)
 8001528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800152a:	6053      	str	r3, [r2, #4]

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800152c:	2200      	movs	r2, #0
 800152e:	2100      	movs	r1, #0
 8001530:	2014      	movs	r0, #20
 8001532:	f001 f898 	bl	8002666 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8001536:	2014      	movs	r0, #20
 8001538:	f001 f8b1 	bl	800269e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 800153c:	bf00      	nop
 800153e:	3728      	adds	r7, #40	; 0x28
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}
 8001544:	40006400 	.word	0x40006400
 8001548:	40021000 	.word	0x40021000
 800154c:	40010c00 	.word	0x40010c00
 8001550:	40010000 	.word	0x40010000

08001554 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b088      	sub	sp, #32
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800155c:	f107 0310 	add.w	r3, r7, #16
 8001560:	2200      	movs	r2, #0
 8001562:	601a      	str	r2, [r3, #0]
 8001564:	605a      	str	r2, [r3, #4]
 8001566:	609a      	str	r2, [r3, #8]
 8001568:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4a15      	ldr	r2, [pc, #84]	; (80015c4 <HAL_I2C_MspInit+0x70>)
 8001570:	4293      	cmp	r3, r2
 8001572:	d123      	bne.n	80015bc <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001574:	4b14      	ldr	r3, [pc, #80]	; (80015c8 <HAL_I2C_MspInit+0x74>)
 8001576:	699b      	ldr	r3, [r3, #24]
 8001578:	4a13      	ldr	r2, [pc, #76]	; (80015c8 <HAL_I2C_MspInit+0x74>)
 800157a:	f043 0308 	orr.w	r3, r3, #8
 800157e:	6193      	str	r3, [r2, #24]
 8001580:	4b11      	ldr	r3, [pc, #68]	; (80015c8 <HAL_I2C_MspInit+0x74>)
 8001582:	699b      	ldr	r3, [r3, #24]
 8001584:	f003 0308 	and.w	r3, r3, #8
 8001588:	60fb      	str	r3, [r7, #12]
 800158a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800158c:	23c0      	movs	r3, #192	; 0xc0
 800158e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001590:	2312      	movs	r3, #18
 8001592:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001594:	2303      	movs	r3, #3
 8001596:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001598:	f107 0310 	add.w	r3, r7, #16
 800159c:	4619      	mov	r1, r3
 800159e:	480b      	ldr	r0, [pc, #44]	; (80015cc <HAL_I2C_MspInit+0x78>)
 80015a0:	f001 f898 	bl	80026d4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80015a4:	4b08      	ldr	r3, [pc, #32]	; (80015c8 <HAL_I2C_MspInit+0x74>)
 80015a6:	69db      	ldr	r3, [r3, #28]
 80015a8:	4a07      	ldr	r2, [pc, #28]	; (80015c8 <HAL_I2C_MspInit+0x74>)
 80015aa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80015ae:	61d3      	str	r3, [r2, #28]
 80015b0:	4b05      	ldr	r3, [pc, #20]	; (80015c8 <HAL_I2C_MspInit+0x74>)
 80015b2:	69db      	ldr	r3, [r3, #28]
 80015b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015b8:	60bb      	str	r3, [r7, #8]
 80015ba:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80015bc:	bf00      	nop
 80015be:	3720      	adds	r7, #32
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}
 80015c4:	40005400 	.word	0x40005400
 80015c8:	40021000 	.word	0x40021000
 80015cc:	40010c00 	.word	0x40010c00

080015d0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b08a      	sub	sp, #40	; 0x28
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015d8:	f107 0318 	add.w	r3, r7, #24
 80015dc:	2200      	movs	r2, #0
 80015de:	601a      	str	r2, [r3, #0]
 80015e0:	605a      	str	r2, [r3, #4]
 80015e2:	609a      	str	r2, [r3, #8]
 80015e4:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	4a37      	ldr	r2, [pc, #220]	; (80016c8 <HAL_SPI_MspInit+0xf8>)
 80015ec:	4293      	cmp	r3, r2
 80015ee:	d130      	bne.n	8001652 <HAL_SPI_MspInit+0x82>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80015f0:	4b36      	ldr	r3, [pc, #216]	; (80016cc <HAL_SPI_MspInit+0xfc>)
 80015f2:	699b      	ldr	r3, [r3, #24]
 80015f4:	4a35      	ldr	r2, [pc, #212]	; (80016cc <HAL_SPI_MspInit+0xfc>)
 80015f6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80015fa:	6193      	str	r3, [r2, #24]
 80015fc:	4b33      	ldr	r3, [pc, #204]	; (80016cc <HAL_SPI_MspInit+0xfc>)
 80015fe:	699b      	ldr	r3, [r3, #24]
 8001600:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001604:	617b      	str	r3, [r7, #20]
 8001606:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001608:	4b30      	ldr	r3, [pc, #192]	; (80016cc <HAL_SPI_MspInit+0xfc>)
 800160a:	699b      	ldr	r3, [r3, #24]
 800160c:	4a2f      	ldr	r2, [pc, #188]	; (80016cc <HAL_SPI_MspInit+0xfc>)
 800160e:	f043 0304 	orr.w	r3, r3, #4
 8001612:	6193      	str	r3, [r2, #24]
 8001614:	4b2d      	ldr	r3, [pc, #180]	; (80016cc <HAL_SPI_MspInit+0xfc>)
 8001616:	699b      	ldr	r3, [r3, #24]
 8001618:	f003 0304 	and.w	r3, r3, #4
 800161c:	613b      	str	r3, [r7, #16]
 800161e:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001620:	23a0      	movs	r3, #160	; 0xa0
 8001622:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001624:	2302      	movs	r3, #2
 8001626:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001628:	2303      	movs	r3, #3
 800162a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800162c:	f107 0318 	add.w	r3, r7, #24
 8001630:	4619      	mov	r1, r3
 8001632:	4827      	ldr	r0, [pc, #156]	; (80016d0 <HAL_SPI_MspInit+0x100>)
 8001634:	f001 f84e 	bl	80026d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001638:	2340      	movs	r3, #64	; 0x40
 800163a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800163c:	2300      	movs	r3, #0
 800163e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001640:	2300      	movs	r3, #0
 8001642:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001644:	f107 0318 	add.w	r3, r7, #24
 8001648:	4619      	mov	r1, r3
 800164a:	4821      	ldr	r0, [pc, #132]	; (80016d0 <HAL_SPI_MspInit+0x100>)
 800164c:	f001 f842 	bl	80026d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001650:	e036      	b.n	80016c0 <HAL_SPI_MspInit+0xf0>
  else if(hspi->Instance==SPI2)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4a1f      	ldr	r2, [pc, #124]	; (80016d4 <HAL_SPI_MspInit+0x104>)
 8001658:	4293      	cmp	r3, r2
 800165a:	d131      	bne.n	80016c0 <HAL_SPI_MspInit+0xf0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800165c:	4b1b      	ldr	r3, [pc, #108]	; (80016cc <HAL_SPI_MspInit+0xfc>)
 800165e:	69db      	ldr	r3, [r3, #28]
 8001660:	4a1a      	ldr	r2, [pc, #104]	; (80016cc <HAL_SPI_MspInit+0xfc>)
 8001662:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001666:	61d3      	str	r3, [r2, #28]
 8001668:	4b18      	ldr	r3, [pc, #96]	; (80016cc <HAL_SPI_MspInit+0xfc>)
 800166a:	69db      	ldr	r3, [r3, #28]
 800166c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001670:	60fb      	str	r3, [r7, #12]
 8001672:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001674:	4b15      	ldr	r3, [pc, #84]	; (80016cc <HAL_SPI_MspInit+0xfc>)
 8001676:	699b      	ldr	r3, [r3, #24]
 8001678:	4a14      	ldr	r2, [pc, #80]	; (80016cc <HAL_SPI_MspInit+0xfc>)
 800167a:	f043 0308 	orr.w	r3, r3, #8
 800167e:	6193      	str	r3, [r2, #24]
 8001680:	4b12      	ldr	r3, [pc, #72]	; (80016cc <HAL_SPI_MspInit+0xfc>)
 8001682:	699b      	ldr	r3, [r3, #24]
 8001684:	f003 0308 	and.w	r3, r3, #8
 8001688:	60bb      	str	r3, [r7, #8]
 800168a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 800168c:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8001690:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001692:	2302      	movs	r3, #2
 8001694:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001696:	2303      	movs	r3, #3
 8001698:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800169a:	f107 0318 	add.w	r3, r7, #24
 800169e:	4619      	mov	r1, r3
 80016a0:	480d      	ldr	r0, [pc, #52]	; (80016d8 <HAL_SPI_MspInit+0x108>)
 80016a2:	f001 f817 	bl	80026d4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80016a6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80016aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016ac:	2300      	movs	r3, #0
 80016ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b0:	2300      	movs	r3, #0
 80016b2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016b4:	f107 0318 	add.w	r3, r7, #24
 80016b8:	4619      	mov	r1, r3
 80016ba:	4807      	ldr	r0, [pc, #28]	; (80016d8 <HAL_SPI_MspInit+0x108>)
 80016bc:	f001 f80a 	bl	80026d4 <HAL_GPIO_Init>
}
 80016c0:	bf00      	nop
 80016c2:	3728      	adds	r7, #40	; 0x28
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}
 80016c8:	40013000 	.word	0x40013000
 80016cc:	40021000 	.word	0x40021000
 80016d0:	40010800 	.word	0x40010800
 80016d4:	40003800 	.word	0x40003800
 80016d8:	40010c00 	.word	0x40010c00

080016dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b088      	sub	sp, #32
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016e4:	f107 0310 	add.w	r3, r7, #16
 80016e8:	2200      	movs	r2, #0
 80016ea:	601a      	str	r2, [r3, #0]
 80016ec:	605a      	str	r2, [r3, #4]
 80016ee:	609a      	str	r2, [r3, #8]
 80016f0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4a1c      	ldr	r2, [pc, #112]	; (8001768 <HAL_UART_MspInit+0x8c>)
 80016f8:	4293      	cmp	r3, r2
 80016fa:	d131      	bne.n	8001760 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80016fc:	4b1b      	ldr	r3, [pc, #108]	; (800176c <HAL_UART_MspInit+0x90>)
 80016fe:	699b      	ldr	r3, [r3, #24]
 8001700:	4a1a      	ldr	r2, [pc, #104]	; (800176c <HAL_UART_MspInit+0x90>)
 8001702:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001706:	6193      	str	r3, [r2, #24]
 8001708:	4b18      	ldr	r3, [pc, #96]	; (800176c <HAL_UART_MspInit+0x90>)
 800170a:	699b      	ldr	r3, [r3, #24]
 800170c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001710:	60fb      	str	r3, [r7, #12]
 8001712:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001714:	4b15      	ldr	r3, [pc, #84]	; (800176c <HAL_UART_MspInit+0x90>)
 8001716:	699b      	ldr	r3, [r3, #24]
 8001718:	4a14      	ldr	r2, [pc, #80]	; (800176c <HAL_UART_MspInit+0x90>)
 800171a:	f043 0304 	orr.w	r3, r3, #4
 800171e:	6193      	str	r3, [r2, #24]
 8001720:	4b12      	ldr	r3, [pc, #72]	; (800176c <HAL_UART_MspInit+0x90>)
 8001722:	699b      	ldr	r3, [r3, #24]
 8001724:	f003 0304 	and.w	r3, r3, #4
 8001728:	60bb      	str	r3, [r7, #8]
 800172a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800172c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001730:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001732:	2302      	movs	r3, #2
 8001734:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001736:	2303      	movs	r3, #3
 8001738:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800173a:	f107 0310 	add.w	r3, r7, #16
 800173e:	4619      	mov	r1, r3
 8001740:	480b      	ldr	r0, [pc, #44]	; (8001770 <HAL_UART_MspInit+0x94>)
 8001742:	f000 ffc7 	bl	80026d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001746:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800174a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800174c:	2300      	movs	r3, #0
 800174e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001750:	2300      	movs	r3, #0
 8001752:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001754:	f107 0310 	add.w	r3, r7, #16
 8001758:	4619      	mov	r1, r3
 800175a:	4805      	ldr	r0, [pc, #20]	; (8001770 <HAL_UART_MspInit+0x94>)
 800175c:	f000 ffba 	bl	80026d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001760:	bf00      	nop
 8001762:	3720      	adds	r7, #32
 8001764:	46bd      	mov	sp, r7
 8001766:	bd80      	pop	{r7, pc}
 8001768:	40013800 	.word	0x40013800
 800176c:	40021000 	.word	0x40021000
 8001770:	40010800 	.word	0x40010800

08001774 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001774:	b480      	push	{r7}
 8001776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001778:	e7fe      	b.n	8001778 <NMI_Handler+0x4>

0800177a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800177a:	b480      	push	{r7}
 800177c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800177e:	e7fe      	b.n	800177e <HardFault_Handler+0x4>

08001780 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001780:	b480      	push	{r7}
 8001782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001784:	e7fe      	b.n	8001784 <MemManage_Handler+0x4>

08001786 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001786:	b480      	push	{r7}
 8001788:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800178a:	e7fe      	b.n	800178a <BusFault_Handler+0x4>

0800178c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800178c:	b480      	push	{r7}
 800178e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001790:	e7fe      	b.n	8001790 <UsageFault_Handler+0x4>

08001792 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001792:	b480      	push	{r7}
 8001794:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001796:	bf00      	nop
 8001798:	46bd      	mov	sp, r7
 800179a:	bc80      	pop	{r7}
 800179c:	4770      	bx	lr

0800179e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800179e:	b480      	push	{r7}
 80017a0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017a2:	bf00      	nop
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bc80      	pop	{r7}
 80017a8:	4770      	bx	lr

080017aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017aa:	b480      	push	{r7}
 80017ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017ae:	bf00      	nop
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bc80      	pop	{r7}
 80017b4:	4770      	bx	lr

080017b6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017b6:	b580      	push	{r7, lr}
 80017b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017ba:	f000 f8cb 	bl	8001954 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017be:	bf00      	nop
 80017c0:	bd80      	pop	{r7, pc}

080017c2 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80017c2:	b580      	push	{r7, lr}
 80017c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(CAND_INT_Pin);
 80017c6:	2001      	movs	r0, #1
 80017c8:	f001 f93a 	bl	8002a40 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80017cc:	bf00      	nop
 80017ce:	bd80      	pop	{r7, pc}

080017d0 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(CANB_INT_Pin);
 80017d4:	2010      	movs	r0, #16
 80017d6:	f001 f933 	bl	8002a40 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80017da:	bf00      	nop
 80017dc:	bd80      	pop	{r7, pc}
	...

080017e0 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80017e4:	4802      	ldr	r0, [pc, #8]	; (80017f0 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80017e6:	f000 fc43 	bl	8002070 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80017ea:	bf00      	nop
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	2000010c 	.word	0x2000010c

080017f4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(CANC_INT_Pin);
 80017f8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80017fc:	f001 f920 	bl	8002a40 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001800:	bf00      	nop
 8001802:	bd80      	pop	{r7, pc}

08001804 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b086      	sub	sp, #24
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800180c:	4a14      	ldr	r2, [pc, #80]	; (8001860 <_sbrk+0x5c>)
 800180e:	4b15      	ldr	r3, [pc, #84]	; (8001864 <_sbrk+0x60>)
 8001810:	1ad3      	subs	r3, r2, r3
 8001812:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001818:	4b13      	ldr	r3, [pc, #76]	; (8001868 <_sbrk+0x64>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	2b00      	cmp	r3, #0
 800181e:	d102      	bne.n	8001826 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001820:	4b11      	ldr	r3, [pc, #68]	; (8001868 <_sbrk+0x64>)
 8001822:	4a12      	ldr	r2, [pc, #72]	; (800186c <_sbrk+0x68>)
 8001824:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001826:	4b10      	ldr	r3, [pc, #64]	; (8001868 <_sbrk+0x64>)
 8001828:	681a      	ldr	r2, [r3, #0]
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	4413      	add	r3, r2
 800182e:	693a      	ldr	r2, [r7, #16]
 8001830:	429a      	cmp	r2, r3
 8001832:	d207      	bcs.n	8001844 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001834:	f002 ff70 	bl	8004718 <__errno>
 8001838:	4603      	mov	r3, r0
 800183a:	220c      	movs	r2, #12
 800183c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800183e:	f04f 33ff 	mov.w	r3, #4294967295
 8001842:	e009      	b.n	8001858 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001844:	4b08      	ldr	r3, [pc, #32]	; (8001868 <_sbrk+0x64>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800184a:	4b07      	ldr	r3, [pc, #28]	; (8001868 <_sbrk+0x64>)
 800184c:	681a      	ldr	r2, [r3, #0]
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	4413      	add	r3, r2
 8001852:	4a05      	ldr	r2, [pc, #20]	; (8001868 <_sbrk+0x64>)
 8001854:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001856:	68fb      	ldr	r3, [r7, #12]
}
 8001858:	4618      	mov	r0, r3
 800185a:	3718      	adds	r7, #24
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}
 8001860:	20005000 	.word	0x20005000
 8001864:	00000400 	.word	0x00000400
 8001868:	200002f4 	.word	0x200002f4
 800186c:	20000310 	.word	0x20000310

08001870 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001870:	b480      	push	{r7}
 8001872:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001874:	bf00      	nop
 8001876:	46bd      	mov	sp, r7
 8001878:	bc80      	pop	{r7}
 800187a:	4770      	bx	lr

0800187c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800187c:	f7ff fff8 	bl	8001870 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001880:	480b      	ldr	r0, [pc, #44]	; (80018b0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001882:	490c      	ldr	r1, [pc, #48]	; (80018b4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001884:	4a0c      	ldr	r2, [pc, #48]	; (80018b8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001886:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001888:	e002      	b.n	8001890 <LoopCopyDataInit>

0800188a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800188a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800188c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800188e:	3304      	adds	r3, #4

08001890 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001890:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001892:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001894:	d3f9      	bcc.n	800188a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001896:	4a09      	ldr	r2, [pc, #36]	; (80018bc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001898:	4c09      	ldr	r4, [pc, #36]	; (80018c0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800189a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800189c:	e001      	b.n	80018a2 <LoopFillZerobss>

0800189e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800189e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018a0:	3204      	adds	r2, #4

080018a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018a4:	d3fb      	bcc.n	800189e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80018a6:	f002 ff3d 	bl	8004724 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80018aa:	f7fe fe07 	bl	80004bc <main>
  bx lr
 80018ae:	4770      	bx	lr
  ldr r0, =_sdata
 80018b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018b4:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80018b8:	08005218 	.word	0x08005218
  ldr r2, =_sbss
 80018bc:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80018c0:	2000030c 	.word	0x2000030c

080018c4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80018c4:	e7fe      	b.n	80018c4 <ADC1_2_IRQHandler>
	...

080018c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018cc:	4b08      	ldr	r3, [pc, #32]	; (80018f0 <HAL_Init+0x28>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4a07      	ldr	r2, [pc, #28]	; (80018f0 <HAL_Init+0x28>)
 80018d2:	f043 0310 	orr.w	r3, r3, #16
 80018d6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018d8:	2003      	movs	r0, #3
 80018da:	f000 feb9 	bl	8002650 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018de:	200f      	movs	r0, #15
 80018e0:	f000 f808 	bl	80018f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018e4:	f7ff fd9c 	bl	8001420 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018e8:	2300      	movs	r3, #0
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	40022000 	.word	0x40022000

080018f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b082      	sub	sp, #8
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018fc:	4b12      	ldr	r3, [pc, #72]	; (8001948 <HAL_InitTick+0x54>)
 80018fe:	681a      	ldr	r2, [r3, #0]
 8001900:	4b12      	ldr	r3, [pc, #72]	; (800194c <HAL_InitTick+0x58>)
 8001902:	781b      	ldrb	r3, [r3, #0]
 8001904:	4619      	mov	r1, r3
 8001906:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800190a:	fbb3 f3f1 	udiv	r3, r3, r1
 800190e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001912:	4618      	mov	r0, r3
 8001914:	f000 fed1 	bl	80026ba <HAL_SYSTICK_Config>
 8001918:	4603      	mov	r3, r0
 800191a:	2b00      	cmp	r3, #0
 800191c:	d001      	beq.n	8001922 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800191e:	2301      	movs	r3, #1
 8001920:	e00e      	b.n	8001940 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	2b0f      	cmp	r3, #15
 8001926:	d80a      	bhi.n	800193e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001928:	2200      	movs	r2, #0
 800192a:	6879      	ldr	r1, [r7, #4]
 800192c:	f04f 30ff 	mov.w	r0, #4294967295
 8001930:	f000 fe99 	bl	8002666 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001934:	4a06      	ldr	r2, [pc, #24]	; (8001950 <HAL_InitTick+0x5c>)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800193a:	2300      	movs	r3, #0
 800193c:	e000      	b.n	8001940 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800193e:	2301      	movs	r3, #1
}
 8001940:	4618      	mov	r0, r3
 8001942:	3708      	adds	r7, #8
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}
 8001948:	20000004 	.word	0x20000004
 800194c:	2000000c 	.word	0x2000000c
 8001950:	20000008 	.word	0x20000008

08001954 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001954:	b480      	push	{r7}
 8001956:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001958:	4b05      	ldr	r3, [pc, #20]	; (8001970 <HAL_IncTick+0x1c>)
 800195a:	781b      	ldrb	r3, [r3, #0]
 800195c:	461a      	mov	r2, r3
 800195e:	4b05      	ldr	r3, [pc, #20]	; (8001974 <HAL_IncTick+0x20>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4413      	add	r3, r2
 8001964:	4a03      	ldr	r2, [pc, #12]	; (8001974 <HAL_IncTick+0x20>)
 8001966:	6013      	str	r3, [r2, #0]
}
 8001968:	bf00      	nop
 800196a:	46bd      	mov	sp, r7
 800196c:	bc80      	pop	{r7}
 800196e:	4770      	bx	lr
 8001970:	2000000c 	.word	0x2000000c
 8001974:	200002f8 	.word	0x200002f8

08001978 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001978:	b480      	push	{r7}
 800197a:	af00      	add	r7, sp, #0
  return uwTick;
 800197c:	4b02      	ldr	r3, [pc, #8]	; (8001988 <HAL_GetTick+0x10>)
 800197e:	681b      	ldr	r3, [r3, #0]
}
 8001980:	4618      	mov	r0, r3
 8001982:	46bd      	mov	sp, r7
 8001984:	bc80      	pop	{r7}
 8001986:	4770      	bx	lr
 8001988:	200002f8 	.word	0x200002f8

0800198c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b084      	sub	sp, #16
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001994:	f7ff fff0 	bl	8001978 <HAL_GetTick>
 8001998:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019a4:	d005      	beq.n	80019b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80019a6:	4b0a      	ldr	r3, [pc, #40]	; (80019d0 <HAL_Delay+0x44>)
 80019a8:	781b      	ldrb	r3, [r3, #0]
 80019aa:	461a      	mov	r2, r3
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	4413      	add	r3, r2
 80019b0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80019b2:	bf00      	nop
 80019b4:	f7ff ffe0 	bl	8001978 <HAL_GetTick>
 80019b8:	4602      	mov	r2, r0
 80019ba:	68bb      	ldr	r3, [r7, #8]
 80019bc:	1ad3      	subs	r3, r2, r3
 80019be:	68fa      	ldr	r2, [r7, #12]
 80019c0:	429a      	cmp	r2, r3
 80019c2:	d8f7      	bhi.n	80019b4 <HAL_Delay+0x28>
  {
  }
}
 80019c4:	bf00      	nop
 80019c6:	bf00      	nop
 80019c8:	3710      	adds	r7, #16
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	2000000c 	.word	0x2000000c

080019d4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b084      	sub	sp, #16
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d101      	bne.n	80019e6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80019e2:	2301      	movs	r3, #1
 80019e4:	e0ed      	b.n	8001bc2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80019ec:	b2db      	uxtb	r3, r3
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d102      	bne.n	80019f8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80019f2:	6878      	ldr	r0, [r7, #4]
 80019f4:	f7ff fd46 	bl	8001484 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	681a      	ldr	r2, [r3, #0]
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f042 0201 	orr.w	r2, r2, #1
 8001a06:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001a08:	f7ff ffb6 	bl	8001978 <HAL_GetTick>
 8001a0c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001a0e:	e012      	b.n	8001a36 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001a10:	f7ff ffb2 	bl	8001978 <HAL_GetTick>
 8001a14:	4602      	mov	r2, r0
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	1ad3      	subs	r3, r2, r3
 8001a1a:	2b0a      	cmp	r3, #10
 8001a1c:	d90b      	bls.n	8001a36 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a22:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	2205      	movs	r2, #5
 8001a2e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001a32:	2301      	movs	r3, #1
 8001a34:	e0c5      	b.n	8001bc2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	f003 0301 	and.w	r3, r3, #1
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d0e5      	beq.n	8001a10 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	681a      	ldr	r2, [r3, #0]
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f022 0202 	bic.w	r2, r2, #2
 8001a52:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001a54:	f7ff ff90 	bl	8001978 <HAL_GetTick>
 8001a58:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001a5a:	e012      	b.n	8001a82 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001a5c:	f7ff ff8c 	bl	8001978 <HAL_GetTick>
 8001a60:	4602      	mov	r2, r0
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	1ad3      	subs	r3, r2, r3
 8001a66:	2b0a      	cmp	r3, #10
 8001a68:	d90b      	bls.n	8001a82 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a6e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2205      	movs	r2, #5
 8001a7a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	e09f      	b.n	8001bc2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	f003 0302 	and.w	r3, r3, #2
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d1e5      	bne.n	8001a5c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	7e1b      	ldrb	r3, [r3, #24]
 8001a94:	2b01      	cmp	r3, #1
 8001a96:	d108      	bne.n	8001aaa <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	681a      	ldr	r2, [r3, #0]
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001aa6:	601a      	str	r2, [r3, #0]
 8001aa8:	e007      	b.n	8001aba <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	681a      	ldr	r2, [r3, #0]
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001ab8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	7e5b      	ldrb	r3, [r3, #25]
 8001abe:	2b01      	cmp	r3, #1
 8001ac0:	d108      	bne.n	8001ad4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	681a      	ldr	r2, [r3, #0]
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001ad0:	601a      	str	r2, [r3, #0]
 8001ad2:	e007      	b.n	8001ae4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	681a      	ldr	r2, [r3, #0]
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001ae2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	7e9b      	ldrb	r3, [r3, #26]
 8001ae8:	2b01      	cmp	r3, #1
 8001aea:	d108      	bne.n	8001afe <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	681a      	ldr	r2, [r3, #0]
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f042 0220 	orr.w	r2, r2, #32
 8001afa:	601a      	str	r2, [r3, #0]
 8001afc:	e007      	b.n	8001b0e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	681a      	ldr	r2, [r3, #0]
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f022 0220 	bic.w	r2, r2, #32
 8001b0c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	7edb      	ldrb	r3, [r3, #27]
 8001b12:	2b01      	cmp	r3, #1
 8001b14:	d108      	bne.n	8001b28 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	681a      	ldr	r2, [r3, #0]
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f022 0210 	bic.w	r2, r2, #16
 8001b24:	601a      	str	r2, [r3, #0]
 8001b26:	e007      	b.n	8001b38 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	681a      	ldr	r2, [r3, #0]
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f042 0210 	orr.w	r2, r2, #16
 8001b36:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	7f1b      	ldrb	r3, [r3, #28]
 8001b3c:	2b01      	cmp	r3, #1
 8001b3e:	d108      	bne.n	8001b52 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	681a      	ldr	r2, [r3, #0]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f042 0208 	orr.w	r2, r2, #8
 8001b4e:	601a      	str	r2, [r3, #0]
 8001b50:	e007      	b.n	8001b62 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	681a      	ldr	r2, [r3, #0]
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f022 0208 	bic.w	r2, r2, #8
 8001b60:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	7f5b      	ldrb	r3, [r3, #29]
 8001b66:	2b01      	cmp	r3, #1
 8001b68:	d108      	bne.n	8001b7c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	681a      	ldr	r2, [r3, #0]
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f042 0204 	orr.w	r2, r2, #4
 8001b78:	601a      	str	r2, [r3, #0]
 8001b7a:	e007      	b.n	8001b8c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	681a      	ldr	r2, [r3, #0]
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f022 0204 	bic.w	r2, r2, #4
 8001b8a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	689a      	ldr	r2, [r3, #8]
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	68db      	ldr	r3, [r3, #12]
 8001b94:	431a      	orrs	r2, r3
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	691b      	ldr	r3, [r3, #16]
 8001b9a:	431a      	orrs	r2, r3
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	695b      	ldr	r3, [r3, #20]
 8001ba0:	ea42 0103 	orr.w	r1, r2, r3
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	1e5a      	subs	r2, r3, #1
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	430a      	orrs	r2, r1
 8001bb0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2201      	movs	r2, #1
 8001bbc:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001bc0:	2300      	movs	r3, #0
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	3710      	adds	r7, #16
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}

08001bca <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8001bca:	b480      	push	{r7}
 8001bcc:	b087      	sub	sp, #28
 8001bce:	af00      	add	r7, sp, #0
 8001bd0:	6078      	str	r0, [r7, #4]
 8001bd2:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001be0:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001be2:	7cfb      	ldrb	r3, [r7, #19]
 8001be4:	2b01      	cmp	r3, #1
 8001be6:	d003      	beq.n	8001bf0 <HAL_CAN_ConfigFilter+0x26>
 8001be8:	7cfb      	ldrb	r3, [r7, #19]
 8001bea:	2b02      	cmp	r3, #2
 8001bec:	f040 80aa 	bne.w	8001d44 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001bf0:	697b      	ldr	r3, [r7, #20]
 8001bf2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001bf6:	f043 0201 	orr.w	r2, r3, #1
 8001bfa:	697b      	ldr	r3, [r7, #20]
 8001bfc:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	695b      	ldr	r3, [r3, #20]
 8001c04:	f003 031f 	and.w	r3, r3, #31
 8001c08:	2201      	movs	r2, #1
 8001c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0e:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001c10:	697b      	ldr	r3, [r7, #20]
 8001c12:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	43db      	mvns	r3, r3
 8001c1a:	401a      	ands	r2, r3
 8001c1c:	697b      	ldr	r3, [r7, #20]
 8001c1e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	69db      	ldr	r3, [r3, #28]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d123      	bne.n	8001c72 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001c2a:	697b      	ldr	r3, [r7, #20]
 8001c2c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	43db      	mvns	r3, r3
 8001c34:	401a      	ands	r2, r3
 8001c36:	697b      	ldr	r3, [r7, #20]
 8001c38:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	68db      	ldr	r3, [r3, #12]
 8001c40:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001c48:	683a      	ldr	r2, [r7, #0]
 8001c4a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001c4c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001c4e:	697b      	ldr	r3, [r7, #20]
 8001c50:	3248      	adds	r2, #72	; 0x48
 8001c52:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	689b      	ldr	r3, [r3, #8]
 8001c5a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001c66:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001c68:	6979      	ldr	r1, [r7, #20]
 8001c6a:	3348      	adds	r3, #72	; 0x48
 8001c6c:	00db      	lsls	r3, r3, #3
 8001c6e:	440b      	add	r3, r1
 8001c70:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	69db      	ldr	r3, [r3, #28]
 8001c76:	2b01      	cmp	r3, #1
 8001c78:	d122      	bne.n	8001cc0 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001c7a:	697b      	ldr	r3, [r7, #20]
 8001c7c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	431a      	orrs	r2, r3
 8001c84:	697b      	ldr	r3, [r7, #20]
 8001c86:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001c96:	683a      	ldr	r2, [r7, #0]
 8001c98:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001c9a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001c9c:	697b      	ldr	r3, [r7, #20]
 8001c9e:	3248      	adds	r2, #72	; 0x48
 8001ca0:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	689b      	ldr	r3, [r3, #8]
 8001ca8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	68db      	ldr	r3, [r3, #12]
 8001cae:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001cb4:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001cb6:	6979      	ldr	r1, [r7, #20]
 8001cb8:	3348      	adds	r3, #72	; 0x48
 8001cba:	00db      	lsls	r3, r3, #3
 8001cbc:	440b      	add	r3, r1
 8001cbe:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	699b      	ldr	r3, [r3, #24]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d109      	bne.n	8001cdc <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001cc8:	697b      	ldr	r3, [r7, #20]
 8001cca:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	43db      	mvns	r3, r3
 8001cd2:	401a      	ands	r2, r3
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001cda:	e007      	b.n	8001cec <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001cdc:	697b      	ldr	r3, [r7, #20]
 8001cde:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	431a      	orrs	r2, r3
 8001ce6:	697b      	ldr	r3, [r7, #20]
 8001ce8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	691b      	ldr	r3, [r3, #16]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d109      	bne.n	8001d08 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001cf4:	697b      	ldr	r3, [r7, #20]
 8001cf6:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	43db      	mvns	r3, r3
 8001cfe:	401a      	ands	r2, r3
 8001d00:	697b      	ldr	r3, [r7, #20]
 8001d02:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001d06:	e007      	b.n	8001d18 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001d08:	697b      	ldr	r3, [r7, #20]
 8001d0a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	431a      	orrs	r2, r3
 8001d12:	697b      	ldr	r3, [r7, #20]
 8001d14:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	6a1b      	ldr	r3, [r3, #32]
 8001d1c:	2b01      	cmp	r3, #1
 8001d1e:	d107      	bne.n	8001d30 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001d20:	697b      	ldr	r3, [r7, #20]
 8001d22:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	431a      	orrs	r2, r3
 8001d2a:	697b      	ldr	r3, [r7, #20]
 8001d2c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001d30:	697b      	ldr	r3, [r7, #20]
 8001d32:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001d36:	f023 0201 	bic.w	r2, r3, #1
 8001d3a:	697b      	ldr	r3, [r7, #20]
 8001d3c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001d40:	2300      	movs	r3, #0
 8001d42:	e006      	b.n	8001d52 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d48:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001d50:	2301      	movs	r3, #1
  }
}
 8001d52:	4618      	mov	r0, r3
 8001d54:	371c      	adds	r7, #28
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bc80      	pop	{r7}
 8001d5a:	4770      	bx	lr

08001d5c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b084      	sub	sp, #16
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d6a:	b2db      	uxtb	r3, r3
 8001d6c:	2b01      	cmp	r3, #1
 8001d6e:	d12e      	bne.n	8001dce <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2202      	movs	r2, #2
 8001d74:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	681a      	ldr	r2, [r3, #0]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f022 0201 	bic.w	r2, r2, #1
 8001d86:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001d88:	f7ff fdf6 	bl	8001978 <HAL_GetTick>
 8001d8c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001d8e:	e012      	b.n	8001db6 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001d90:	f7ff fdf2 	bl	8001978 <HAL_GetTick>
 8001d94:	4602      	mov	r2, r0
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	1ad3      	subs	r3, r2, r3
 8001d9a:	2b0a      	cmp	r3, #10
 8001d9c:	d90b      	bls.n	8001db6 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001da2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2205      	movs	r2, #5
 8001dae:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001db2:	2301      	movs	r3, #1
 8001db4:	e012      	b.n	8001ddc <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	f003 0301 	and.w	r3, r3, #1
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d1e5      	bne.n	8001d90 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	e006      	b.n	8001ddc <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dd2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001dda:	2301      	movs	r3, #1
  }
}
 8001ddc:	4618      	mov	r0, r3
 8001dde:	3710      	adds	r7, #16
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}

08001de4 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001de4:	b480      	push	{r7}
 8001de6:	b087      	sub	sp, #28
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	60f8      	str	r0, [r7, #12]
 8001dec:	60b9      	str	r1, [r7, #8]
 8001dee:	607a      	str	r2, [r7, #4]
 8001df0:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001df8:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001dfa:	7dfb      	ldrb	r3, [r7, #23]
 8001dfc:	2b01      	cmp	r3, #1
 8001dfe:	d003      	beq.n	8001e08 <HAL_CAN_GetRxMessage+0x24>
 8001e00:	7dfb      	ldrb	r3, [r7, #23]
 8001e02:	2b02      	cmp	r3, #2
 8001e04:	f040 8103 	bne.w	800200e <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001e08:	68bb      	ldr	r3, [r7, #8]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d10e      	bne.n	8001e2c <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	68db      	ldr	r3, [r3, #12]
 8001e14:	f003 0303 	and.w	r3, r3, #3
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d116      	bne.n	8001e4a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e20:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001e28:	2301      	movs	r3, #1
 8001e2a:	e0f7      	b.n	800201c <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	691b      	ldr	r3, [r3, #16]
 8001e32:	f003 0303 	and.w	r3, r3, #3
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d107      	bne.n	8001e4a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e3e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001e46:	2301      	movs	r3, #1
 8001e48:	e0e8      	b.n	800201c <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	681a      	ldr	r2, [r3, #0]
 8001e4e:	68bb      	ldr	r3, [r7, #8]
 8001e50:	331b      	adds	r3, #27
 8001e52:	011b      	lsls	r3, r3, #4
 8001e54:	4413      	add	r3, r2
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f003 0204 	and.w	r2, r3, #4
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	689b      	ldr	r3, [r3, #8]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d10c      	bne.n	8001e82 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	681a      	ldr	r2, [r3, #0]
 8001e6c:	68bb      	ldr	r3, [r7, #8]
 8001e6e:	331b      	adds	r3, #27
 8001e70:	011b      	lsls	r3, r3, #4
 8001e72:	4413      	add	r3, r2
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	0d5b      	lsrs	r3, r3, #21
 8001e78:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	601a      	str	r2, [r3, #0]
 8001e80:	e00b      	b.n	8001e9a <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	681a      	ldr	r2, [r3, #0]
 8001e86:	68bb      	ldr	r3, [r7, #8]
 8001e88:	331b      	adds	r3, #27
 8001e8a:	011b      	lsls	r3, r3, #4
 8001e8c:	4413      	add	r3, r2
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	08db      	lsrs	r3, r3, #3
 8001e92:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	681a      	ldr	r2, [r3, #0]
 8001e9e:	68bb      	ldr	r3, [r7, #8]
 8001ea0:	331b      	adds	r3, #27
 8001ea2:	011b      	lsls	r3, r3, #4
 8001ea4:	4413      	add	r3, r2
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f003 0202 	and.w	r2, r3, #2
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	681a      	ldr	r2, [r3, #0]
 8001eb4:	68bb      	ldr	r3, [r7, #8]
 8001eb6:	331b      	adds	r3, #27
 8001eb8:	011b      	lsls	r3, r3, #4
 8001eba:	4413      	add	r3, r2
 8001ebc:	3304      	adds	r3, #4
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f003 0308 	and.w	r3, r3, #8
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d003      	beq.n	8001ed0 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2208      	movs	r2, #8
 8001ecc:	611a      	str	r2, [r3, #16]
 8001ece:	e00b      	b.n	8001ee8 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	681a      	ldr	r2, [r3, #0]
 8001ed4:	68bb      	ldr	r3, [r7, #8]
 8001ed6:	331b      	adds	r3, #27
 8001ed8:	011b      	lsls	r3, r3, #4
 8001eda:	4413      	add	r3, r2
 8001edc:	3304      	adds	r3, #4
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f003 020f 	and.w	r2, r3, #15
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	681a      	ldr	r2, [r3, #0]
 8001eec:	68bb      	ldr	r3, [r7, #8]
 8001eee:	331b      	adds	r3, #27
 8001ef0:	011b      	lsls	r3, r3, #4
 8001ef2:	4413      	add	r3, r2
 8001ef4:	3304      	adds	r3, #4
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	0a1b      	lsrs	r3, r3, #8
 8001efa:	b2da      	uxtb	r2, r3
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	681a      	ldr	r2, [r3, #0]
 8001f04:	68bb      	ldr	r3, [r7, #8]
 8001f06:	331b      	adds	r3, #27
 8001f08:	011b      	lsls	r3, r3, #4
 8001f0a:	4413      	add	r3, r2
 8001f0c:	3304      	adds	r3, #4
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	0c1b      	lsrs	r3, r3, #16
 8001f12:	b29a      	uxth	r2, r3
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	681a      	ldr	r2, [r3, #0]
 8001f1c:	68bb      	ldr	r3, [r7, #8]
 8001f1e:	011b      	lsls	r3, r3, #4
 8001f20:	4413      	add	r3, r2
 8001f22:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	b2da      	uxtb	r2, r3
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	681a      	ldr	r2, [r3, #0]
 8001f32:	68bb      	ldr	r3, [r7, #8]
 8001f34:	011b      	lsls	r3, r3, #4
 8001f36:	4413      	add	r3, r2
 8001f38:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	0a1a      	lsrs	r2, r3, #8
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	3301      	adds	r3, #1
 8001f44:	b2d2      	uxtb	r2, r2
 8001f46:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	681a      	ldr	r2, [r3, #0]
 8001f4c:	68bb      	ldr	r3, [r7, #8]
 8001f4e:	011b      	lsls	r3, r3, #4
 8001f50:	4413      	add	r3, r2
 8001f52:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	0c1a      	lsrs	r2, r3, #16
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	3302      	adds	r3, #2
 8001f5e:	b2d2      	uxtb	r2, r2
 8001f60:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	681a      	ldr	r2, [r3, #0]
 8001f66:	68bb      	ldr	r3, [r7, #8]
 8001f68:	011b      	lsls	r3, r3, #4
 8001f6a:	4413      	add	r3, r2
 8001f6c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	0e1a      	lsrs	r2, r3, #24
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	3303      	adds	r3, #3
 8001f78:	b2d2      	uxtb	r2, r2
 8001f7a:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	681a      	ldr	r2, [r3, #0]
 8001f80:	68bb      	ldr	r3, [r7, #8]
 8001f82:	011b      	lsls	r3, r3, #4
 8001f84:	4413      	add	r3, r2
 8001f86:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001f8a:	681a      	ldr	r2, [r3, #0]
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	3304      	adds	r3, #4
 8001f90:	b2d2      	uxtb	r2, r2
 8001f92:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	681a      	ldr	r2, [r3, #0]
 8001f98:	68bb      	ldr	r3, [r7, #8]
 8001f9a:	011b      	lsls	r3, r3, #4
 8001f9c:	4413      	add	r3, r2
 8001f9e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	0a1a      	lsrs	r2, r3, #8
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	3305      	adds	r3, #5
 8001faa:	b2d2      	uxtb	r2, r2
 8001fac:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	681a      	ldr	r2, [r3, #0]
 8001fb2:	68bb      	ldr	r3, [r7, #8]
 8001fb4:	011b      	lsls	r3, r3, #4
 8001fb6:	4413      	add	r3, r2
 8001fb8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	0c1a      	lsrs	r2, r3, #16
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	3306      	adds	r3, #6
 8001fc4:	b2d2      	uxtb	r2, r2
 8001fc6:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	681a      	ldr	r2, [r3, #0]
 8001fcc:	68bb      	ldr	r3, [r7, #8]
 8001fce:	011b      	lsls	r3, r3, #4
 8001fd0:	4413      	add	r3, r2
 8001fd2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	0e1a      	lsrs	r2, r3, #24
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	3307      	adds	r3, #7
 8001fde:	b2d2      	uxtb	r2, r2
 8001fe0:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001fe2:	68bb      	ldr	r3, [r7, #8]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d108      	bne.n	8001ffa <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	68da      	ldr	r2, [r3, #12]
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f042 0220 	orr.w	r2, r2, #32
 8001ff6:	60da      	str	r2, [r3, #12]
 8001ff8:	e007      	b.n	800200a <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	691a      	ldr	r2, [r3, #16]
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f042 0220 	orr.w	r2, r2, #32
 8002008:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800200a:	2300      	movs	r3, #0
 800200c:	e006      	b.n	800201c <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002012:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800201a:	2301      	movs	r3, #1
  }
}
 800201c:	4618      	mov	r0, r3
 800201e:	371c      	adds	r7, #28
 8002020:	46bd      	mov	sp, r7
 8002022:	bc80      	pop	{r7}
 8002024:	4770      	bx	lr

08002026 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002026:	b480      	push	{r7}
 8002028:	b085      	sub	sp, #20
 800202a:	af00      	add	r7, sp, #0
 800202c:	6078      	str	r0, [r7, #4]
 800202e:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002036:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002038:	7bfb      	ldrb	r3, [r7, #15]
 800203a:	2b01      	cmp	r3, #1
 800203c:	d002      	beq.n	8002044 <HAL_CAN_ActivateNotification+0x1e>
 800203e:	7bfb      	ldrb	r3, [r7, #15]
 8002040:	2b02      	cmp	r3, #2
 8002042:	d109      	bne.n	8002058 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	6959      	ldr	r1, [r3, #20]
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	683a      	ldr	r2, [r7, #0]
 8002050:	430a      	orrs	r2, r1
 8002052:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002054:	2300      	movs	r3, #0
 8002056:	e006      	b.n	8002066 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800205c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002064:	2301      	movs	r3, #1
  }
}
 8002066:	4618      	mov	r0, r3
 8002068:	3714      	adds	r7, #20
 800206a:	46bd      	mov	sp, r7
 800206c:	bc80      	pop	{r7}
 800206e:	4770      	bx	lr

08002070 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b08a      	sub	sp, #40	; 0x28
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002078:	2300      	movs	r3, #0
 800207a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	695b      	ldr	r3, [r3, #20]
 8002082:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	689b      	ldr	r3, [r3, #8]
 8002092:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	68db      	ldr	r3, [r3, #12]
 800209a:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	691b      	ldr	r3, [r3, #16]
 80020a2:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	699b      	ldr	r3, [r3, #24]
 80020aa:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80020ac:	6a3b      	ldr	r3, [r7, #32]
 80020ae:	f003 0301 	and.w	r3, r3, #1
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d07c      	beq.n	80021b0 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80020b6:	69bb      	ldr	r3, [r7, #24]
 80020b8:	f003 0301 	and.w	r3, r3, #1
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d023      	beq.n	8002108 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	2201      	movs	r2, #1
 80020c6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80020c8:	69bb      	ldr	r3, [r7, #24]
 80020ca:	f003 0302 	and.w	r3, r3, #2
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d003      	beq.n	80020da <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80020d2:	6878      	ldr	r0, [r7, #4]
 80020d4:	f000 f983 	bl	80023de <HAL_CAN_TxMailbox0CompleteCallback>
 80020d8:	e016      	b.n	8002108 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80020da:	69bb      	ldr	r3, [r7, #24]
 80020dc:	f003 0304 	and.w	r3, r3, #4
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d004      	beq.n	80020ee <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80020e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80020ea:	627b      	str	r3, [r7, #36]	; 0x24
 80020ec:	e00c      	b.n	8002108 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80020ee:	69bb      	ldr	r3, [r7, #24]
 80020f0:	f003 0308 	and.w	r3, r3, #8
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d004      	beq.n	8002102 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80020f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020fa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80020fe:	627b      	str	r3, [r7, #36]	; 0x24
 8002100:	e002      	b.n	8002108 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002102:	6878      	ldr	r0, [r7, #4]
 8002104:	f000 f986 	bl	8002414 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002108:	69bb      	ldr	r3, [r7, #24]
 800210a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800210e:	2b00      	cmp	r3, #0
 8002110:	d024      	beq.n	800215c <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f44f 7280 	mov.w	r2, #256	; 0x100
 800211a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800211c:	69bb      	ldr	r3, [r7, #24]
 800211e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002122:	2b00      	cmp	r3, #0
 8002124:	d003      	beq.n	800212e <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002126:	6878      	ldr	r0, [r7, #4]
 8002128:	f000 f962 	bl	80023f0 <HAL_CAN_TxMailbox1CompleteCallback>
 800212c:	e016      	b.n	800215c <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800212e:	69bb      	ldr	r3, [r7, #24]
 8002130:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002134:	2b00      	cmp	r3, #0
 8002136:	d004      	beq.n	8002142 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800213a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800213e:	627b      	str	r3, [r7, #36]	; 0x24
 8002140:	e00c      	b.n	800215c <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002142:	69bb      	ldr	r3, [r7, #24]
 8002144:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002148:	2b00      	cmp	r3, #0
 800214a:	d004      	beq.n	8002156 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800214c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800214e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002152:	627b      	str	r3, [r7, #36]	; 0x24
 8002154:	e002      	b.n	800215c <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002156:	6878      	ldr	r0, [r7, #4]
 8002158:	f000 f965 	bl	8002426 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800215c:	69bb      	ldr	r3, [r7, #24]
 800215e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002162:	2b00      	cmp	r3, #0
 8002164:	d024      	beq.n	80021b0 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800216e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002170:	69bb      	ldr	r3, [r7, #24]
 8002172:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002176:	2b00      	cmp	r3, #0
 8002178:	d003      	beq.n	8002182 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800217a:	6878      	ldr	r0, [r7, #4]
 800217c:	f000 f941 	bl	8002402 <HAL_CAN_TxMailbox2CompleteCallback>
 8002180:	e016      	b.n	80021b0 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002182:	69bb      	ldr	r3, [r7, #24]
 8002184:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002188:	2b00      	cmp	r3, #0
 800218a:	d004      	beq.n	8002196 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800218c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800218e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002192:	627b      	str	r3, [r7, #36]	; 0x24
 8002194:	e00c      	b.n	80021b0 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002196:	69bb      	ldr	r3, [r7, #24]
 8002198:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800219c:	2b00      	cmp	r3, #0
 800219e:	d004      	beq.n	80021aa <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80021a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021a6:	627b      	str	r3, [r7, #36]	; 0x24
 80021a8:	e002      	b.n	80021b0 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80021aa:	6878      	ldr	r0, [r7, #4]
 80021ac:	f000 f944 	bl	8002438 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80021b0:	6a3b      	ldr	r3, [r7, #32]
 80021b2:	f003 0308 	and.w	r3, r3, #8
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d00c      	beq.n	80021d4 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80021ba:	697b      	ldr	r3, [r7, #20]
 80021bc:	f003 0310 	and.w	r3, r3, #16
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d007      	beq.n	80021d4 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80021c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80021ca:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	2210      	movs	r2, #16
 80021d2:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80021d4:	6a3b      	ldr	r3, [r7, #32]
 80021d6:	f003 0304 	and.w	r3, r3, #4
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d00b      	beq.n	80021f6 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80021de:	697b      	ldr	r3, [r7, #20]
 80021e0:	f003 0308 	and.w	r3, r3, #8
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d006      	beq.n	80021f6 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	2208      	movs	r2, #8
 80021ee:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80021f0:	6878      	ldr	r0, [r7, #4]
 80021f2:	f000 f92a 	bl	800244a <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80021f6:	6a3b      	ldr	r3, [r7, #32]
 80021f8:	f003 0302 	and.w	r3, r3, #2
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d009      	beq.n	8002214 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	68db      	ldr	r3, [r3, #12]
 8002206:	f003 0303 	and.w	r3, r3, #3
 800220a:	2b00      	cmp	r3, #0
 800220c:	d002      	beq.n	8002214 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800220e:	6878      	ldr	r0, [r7, #4]
 8002210:	f7fe fc0e 	bl	8000a30 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002214:	6a3b      	ldr	r3, [r7, #32]
 8002216:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800221a:	2b00      	cmp	r3, #0
 800221c:	d00c      	beq.n	8002238 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800221e:	693b      	ldr	r3, [r7, #16]
 8002220:	f003 0310 	and.w	r3, r3, #16
 8002224:	2b00      	cmp	r3, #0
 8002226:	d007      	beq.n	8002238 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800222a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800222e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	2210      	movs	r2, #16
 8002236:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002238:	6a3b      	ldr	r3, [r7, #32]
 800223a:	f003 0320 	and.w	r3, r3, #32
 800223e:	2b00      	cmp	r3, #0
 8002240:	d00b      	beq.n	800225a <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	f003 0308 	and.w	r3, r3, #8
 8002248:	2b00      	cmp	r3, #0
 800224a:	d006      	beq.n	800225a <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	2208      	movs	r2, #8
 8002252:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002254:	6878      	ldr	r0, [r7, #4]
 8002256:	f000 f90a 	bl	800246e <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800225a:	6a3b      	ldr	r3, [r7, #32]
 800225c:	f003 0310 	and.w	r3, r3, #16
 8002260:	2b00      	cmp	r3, #0
 8002262:	d009      	beq.n	8002278 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	691b      	ldr	r3, [r3, #16]
 800226a:	f003 0303 	and.w	r3, r3, #3
 800226e:	2b00      	cmp	r3, #0
 8002270:	d002      	beq.n	8002278 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002272:	6878      	ldr	r0, [r7, #4]
 8002274:	f000 f8f2 	bl	800245c <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002278:	6a3b      	ldr	r3, [r7, #32]
 800227a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800227e:	2b00      	cmp	r3, #0
 8002280:	d00b      	beq.n	800229a <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002282:	69fb      	ldr	r3, [r7, #28]
 8002284:	f003 0310 	and.w	r3, r3, #16
 8002288:	2b00      	cmp	r3, #0
 800228a:	d006      	beq.n	800229a <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	2210      	movs	r2, #16
 8002292:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002294:	6878      	ldr	r0, [r7, #4]
 8002296:	f000 f8f3 	bl	8002480 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800229a:	6a3b      	ldr	r3, [r7, #32]
 800229c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d00b      	beq.n	80022bc <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80022a4:	69fb      	ldr	r3, [r7, #28]
 80022a6:	f003 0308 	and.w	r3, r3, #8
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d006      	beq.n	80022bc <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	2208      	movs	r2, #8
 80022b4:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80022b6:	6878      	ldr	r0, [r7, #4]
 80022b8:	f000 f8eb 	bl	8002492 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80022bc:	6a3b      	ldr	r3, [r7, #32]
 80022be:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d07b      	beq.n	80023be <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80022c6:	69fb      	ldr	r3, [r7, #28]
 80022c8:	f003 0304 	and.w	r3, r3, #4
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d072      	beq.n	80023b6 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80022d0:	6a3b      	ldr	r3, [r7, #32]
 80022d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d008      	beq.n	80022ec <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d003      	beq.n	80022ec <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80022e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e6:	f043 0301 	orr.w	r3, r3, #1
 80022ea:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80022ec:	6a3b      	ldr	r3, [r7, #32]
 80022ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d008      	beq.n	8002308 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d003      	beq.n	8002308 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002302:	f043 0302 	orr.w	r3, r3, #2
 8002306:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002308:	6a3b      	ldr	r3, [r7, #32]
 800230a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800230e:	2b00      	cmp	r3, #0
 8002310:	d008      	beq.n	8002324 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002318:	2b00      	cmp	r3, #0
 800231a:	d003      	beq.n	8002324 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800231c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800231e:	f043 0304 	orr.w	r3, r3, #4
 8002322:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002324:	6a3b      	ldr	r3, [r7, #32]
 8002326:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800232a:	2b00      	cmp	r3, #0
 800232c:	d043      	beq.n	80023b6 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002334:	2b00      	cmp	r3, #0
 8002336:	d03e      	beq.n	80023b6 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800233e:	2b60      	cmp	r3, #96	; 0x60
 8002340:	d02b      	beq.n	800239a <HAL_CAN_IRQHandler+0x32a>
 8002342:	2b60      	cmp	r3, #96	; 0x60
 8002344:	d82e      	bhi.n	80023a4 <HAL_CAN_IRQHandler+0x334>
 8002346:	2b50      	cmp	r3, #80	; 0x50
 8002348:	d022      	beq.n	8002390 <HAL_CAN_IRQHandler+0x320>
 800234a:	2b50      	cmp	r3, #80	; 0x50
 800234c:	d82a      	bhi.n	80023a4 <HAL_CAN_IRQHandler+0x334>
 800234e:	2b40      	cmp	r3, #64	; 0x40
 8002350:	d019      	beq.n	8002386 <HAL_CAN_IRQHandler+0x316>
 8002352:	2b40      	cmp	r3, #64	; 0x40
 8002354:	d826      	bhi.n	80023a4 <HAL_CAN_IRQHandler+0x334>
 8002356:	2b30      	cmp	r3, #48	; 0x30
 8002358:	d010      	beq.n	800237c <HAL_CAN_IRQHandler+0x30c>
 800235a:	2b30      	cmp	r3, #48	; 0x30
 800235c:	d822      	bhi.n	80023a4 <HAL_CAN_IRQHandler+0x334>
 800235e:	2b10      	cmp	r3, #16
 8002360:	d002      	beq.n	8002368 <HAL_CAN_IRQHandler+0x2f8>
 8002362:	2b20      	cmp	r3, #32
 8002364:	d005      	beq.n	8002372 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002366:	e01d      	b.n	80023a4 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800236a:	f043 0308 	orr.w	r3, r3, #8
 800236e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002370:	e019      	b.n	80023a6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002374:	f043 0310 	orr.w	r3, r3, #16
 8002378:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800237a:	e014      	b.n	80023a6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800237c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800237e:	f043 0320 	orr.w	r3, r3, #32
 8002382:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002384:	e00f      	b.n	80023a6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002388:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800238c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800238e:	e00a      	b.n	80023a6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002392:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002396:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002398:	e005      	b.n	80023a6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800239a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800239c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023a0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80023a2:	e000      	b.n	80023a6 <HAL_CAN_IRQHandler+0x336>
            break;
 80023a4:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	699a      	ldr	r2, [r3, #24]
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80023b4:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	2204      	movs	r2, #4
 80023bc:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80023be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d008      	beq.n	80023d6 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80023c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ca:	431a      	orrs	r2, r3
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80023d0:	6878      	ldr	r0, [r7, #4]
 80023d2:	f000 f867 	bl	80024a4 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80023d6:	bf00      	nop
 80023d8:	3728      	adds	r7, #40	; 0x28
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}

080023de <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80023de:	b480      	push	{r7}
 80023e0:	b083      	sub	sp, #12
 80023e2:	af00      	add	r7, sp, #0
 80023e4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80023e6:	bf00      	nop
 80023e8:	370c      	adds	r7, #12
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bc80      	pop	{r7}
 80023ee:	4770      	bx	lr

080023f0 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b083      	sub	sp, #12
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80023f8:	bf00      	nop
 80023fa:	370c      	adds	r7, #12
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bc80      	pop	{r7}
 8002400:	4770      	bx	lr

08002402 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002402:	b480      	push	{r7}
 8002404:	b083      	sub	sp, #12
 8002406:	af00      	add	r7, sp, #0
 8002408:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800240a:	bf00      	nop
 800240c:	370c      	adds	r7, #12
 800240e:	46bd      	mov	sp, r7
 8002410:	bc80      	pop	{r7}
 8002412:	4770      	bx	lr

08002414 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002414:	b480      	push	{r7}
 8002416:	b083      	sub	sp, #12
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800241c:	bf00      	nop
 800241e:	370c      	adds	r7, #12
 8002420:	46bd      	mov	sp, r7
 8002422:	bc80      	pop	{r7}
 8002424:	4770      	bx	lr

08002426 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002426:	b480      	push	{r7}
 8002428:	b083      	sub	sp, #12
 800242a:	af00      	add	r7, sp, #0
 800242c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800242e:	bf00      	nop
 8002430:	370c      	adds	r7, #12
 8002432:	46bd      	mov	sp, r7
 8002434:	bc80      	pop	{r7}
 8002436:	4770      	bx	lr

08002438 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002438:	b480      	push	{r7}
 800243a:	b083      	sub	sp, #12
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002440:	bf00      	nop
 8002442:	370c      	adds	r7, #12
 8002444:	46bd      	mov	sp, r7
 8002446:	bc80      	pop	{r7}
 8002448:	4770      	bx	lr

0800244a <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800244a:	b480      	push	{r7}
 800244c:	b083      	sub	sp, #12
 800244e:	af00      	add	r7, sp, #0
 8002450:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002452:	bf00      	nop
 8002454:	370c      	adds	r7, #12
 8002456:	46bd      	mov	sp, r7
 8002458:	bc80      	pop	{r7}
 800245a:	4770      	bx	lr

0800245c <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800245c:	b480      	push	{r7}
 800245e:	b083      	sub	sp, #12
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002464:	bf00      	nop
 8002466:	370c      	adds	r7, #12
 8002468:	46bd      	mov	sp, r7
 800246a:	bc80      	pop	{r7}
 800246c:	4770      	bx	lr

0800246e <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800246e:	b480      	push	{r7}
 8002470:	b083      	sub	sp, #12
 8002472:	af00      	add	r7, sp, #0
 8002474:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002476:	bf00      	nop
 8002478:	370c      	adds	r7, #12
 800247a:	46bd      	mov	sp, r7
 800247c:	bc80      	pop	{r7}
 800247e:	4770      	bx	lr

08002480 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002480:	b480      	push	{r7}
 8002482:	b083      	sub	sp, #12
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002488:	bf00      	nop
 800248a:	370c      	adds	r7, #12
 800248c:	46bd      	mov	sp, r7
 800248e:	bc80      	pop	{r7}
 8002490:	4770      	bx	lr

08002492 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002492:	b480      	push	{r7}
 8002494:	b083      	sub	sp, #12
 8002496:	af00      	add	r7, sp, #0
 8002498:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800249a:	bf00      	nop
 800249c:	370c      	adds	r7, #12
 800249e:	46bd      	mov	sp, r7
 80024a0:	bc80      	pop	{r7}
 80024a2:	4770      	bx	lr

080024a4 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b083      	sub	sp, #12
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80024ac:	bf00      	nop
 80024ae:	370c      	adds	r7, #12
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bc80      	pop	{r7}
 80024b4:	4770      	bx	lr
	...

080024b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024b8:	b480      	push	{r7}
 80024ba:	b085      	sub	sp, #20
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	f003 0307 	and.w	r3, r3, #7
 80024c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024c8:	4b0c      	ldr	r3, [pc, #48]	; (80024fc <__NVIC_SetPriorityGrouping+0x44>)
 80024ca:	68db      	ldr	r3, [r3, #12]
 80024cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024ce:	68ba      	ldr	r2, [r7, #8]
 80024d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80024d4:	4013      	ands	r3, r2
 80024d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024dc:	68bb      	ldr	r3, [r7, #8]
 80024de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80024e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80024e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024ea:	4a04      	ldr	r2, [pc, #16]	; (80024fc <__NVIC_SetPriorityGrouping+0x44>)
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	60d3      	str	r3, [r2, #12]
}
 80024f0:	bf00      	nop
 80024f2:	3714      	adds	r7, #20
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bc80      	pop	{r7}
 80024f8:	4770      	bx	lr
 80024fa:	bf00      	nop
 80024fc:	e000ed00 	.word	0xe000ed00

08002500 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002500:	b480      	push	{r7}
 8002502:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002504:	4b04      	ldr	r3, [pc, #16]	; (8002518 <__NVIC_GetPriorityGrouping+0x18>)
 8002506:	68db      	ldr	r3, [r3, #12]
 8002508:	0a1b      	lsrs	r3, r3, #8
 800250a:	f003 0307 	and.w	r3, r3, #7
}
 800250e:	4618      	mov	r0, r3
 8002510:	46bd      	mov	sp, r7
 8002512:	bc80      	pop	{r7}
 8002514:	4770      	bx	lr
 8002516:	bf00      	nop
 8002518:	e000ed00 	.word	0xe000ed00

0800251c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800251c:	b480      	push	{r7}
 800251e:	b083      	sub	sp, #12
 8002520:	af00      	add	r7, sp, #0
 8002522:	4603      	mov	r3, r0
 8002524:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002526:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800252a:	2b00      	cmp	r3, #0
 800252c:	db0b      	blt.n	8002546 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800252e:	79fb      	ldrb	r3, [r7, #7]
 8002530:	f003 021f 	and.w	r2, r3, #31
 8002534:	4906      	ldr	r1, [pc, #24]	; (8002550 <__NVIC_EnableIRQ+0x34>)
 8002536:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800253a:	095b      	lsrs	r3, r3, #5
 800253c:	2001      	movs	r0, #1
 800253e:	fa00 f202 	lsl.w	r2, r0, r2
 8002542:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002546:	bf00      	nop
 8002548:	370c      	adds	r7, #12
 800254a:	46bd      	mov	sp, r7
 800254c:	bc80      	pop	{r7}
 800254e:	4770      	bx	lr
 8002550:	e000e100 	.word	0xe000e100

08002554 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002554:	b480      	push	{r7}
 8002556:	b083      	sub	sp, #12
 8002558:	af00      	add	r7, sp, #0
 800255a:	4603      	mov	r3, r0
 800255c:	6039      	str	r1, [r7, #0]
 800255e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002560:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002564:	2b00      	cmp	r3, #0
 8002566:	db0a      	blt.n	800257e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	b2da      	uxtb	r2, r3
 800256c:	490c      	ldr	r1, [pc, #48]	; (80025a0 <__NVIC_SetPriority+0x4c>)
 800256e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002572:	0112      	lsls	r2, r2, #4
 8002574:	b2d2      	uxtb	r2, r2
 8002576:	440b      	add	r3, r1
 8002578:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800257c:	e00a      	b.n	8002594 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	b2da      	uxtb	r2, r3
 8002582:	4908      	ldr	r1, [pc, #32]	; (80025a4 <__NVIC_SetPriority+0x50>)
 8002584:	79fb      	ldrb	r3, [r7, #7]
 8002586:	f003 030f 	and.w	r3, r3, #15
 800258a:	3b04      	subs	r3, #4
 800258c:	0112      	lsls	r2, r2, #4
 800258e:	b2d2      	uxtb	r2, r2
 8002590:	440b      	add	r3, r1
 8002592:	761a      	strb	r2, [r3, #24]
}
 8002594:	bf00      	nop
 8002596:	370c      	adds	r7, #12
 8002598:	46bd      	mov	sp, r7
 800259a:	bc80      	pop	{r7}
 800259c:	4770      	bx	lr
 800259e:	bf00      	nop
 80025a0:	e000e100 	.word	0xe000e100
 80025a4:	e000ed00 	.word	0xe000ed00

080025a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025a8:	b480      	push	{r7}
 80025aa:	b089      	sub	sp, #36	; 0x24
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	60f8      	str	r0, [r7, #12]
 80025b0:	60b9      	str	r1, [r7, #8]
 80025b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	f003 0307 	and.w	r3, r3, #7
 80025ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025bc:	69fb      	ldr	r3, [r7, #28]
 80025be:	f1c3 0307 	rsb	r3, r3, #7
 80025c2:	2b04      	cmp	r3, #4
 80025c4:	bf28      	it	cs
 80025c6:	2304      	movcs	r3, #4
 80025c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025ca:	69fb      	ldr	r3, [r7, #28]
 80025cc:	3304      	adds	r3, #4
 80025ce:	2b06      	cmp	r3, #6
 80025d0:	d902      	bls.n	80025d8 <NVIC_EncodePriority+0x30>
 80025d2:	69fb      	ldr	r3, [r7, #28]
 80025d4:	3b03      	subs	r3, #3
 80025d6:	e000      	b.n	80025da <NVIC_EncodePriority+0x32>
 80025d8:	2300      	movs	r3, #0
 80025da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025dc:	f04f 32ff 	mov.w	r2, #4294967295
 80025e0:	69bb      	ldr	r3, [r7, #24]
 80025e2:	fa02 f303 	lsl.w	r3, r2, r3
 80025e6:	43da      	mvns	r2, r3
 80025e8:	68bb      	ldr	r3, [r7, #8]
 80025ea:	401a      	ands	r2, r3
 80025ec:	697b      	ldr	r3, [r7, #20]
 80025ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025f0:	f04f 31ff 	mov.w	r1, #4294967295
 80025f4:	697b      	ldr	r3, [r7, #20]
 80025f6:	fa01 f303 	lsl.w	r3, r1, r3
 80025fa:	43d9      	mvns	r1, r3
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002600:	4313      	orrs	r3, r2
         );
}
 8002602:	4618      	mov	r0, r3
 8002604:	3724      	adds	r7, #36	; 0x24
 8002606:	46bd      	mov	sp, r7
 8002608:	bc80      	pop	{r7}
 800260a:	4770      	bx	lr

0800260c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b082      	sub	sp, #8
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	3b01      	subs	r3, #1
 8002618:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800261c:	d301      	bcc.n	8002622 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800261e:	2301      	movs	r3, #1
 8002620:	e00f      	b.n	8002642 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002622:	4a0a      	ldr	r2, [pc, #40]	; (800264c <SysTick_Config+0x40>)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	3b01      	subs	r3, #1
 8002628:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800262a:	210f      	movs	r1, #15
 800262c:	f04f 30ff 	mov.w	r0, #4294967295
 8002630:	f7ff ff90 	bl	8002554 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002634:	4b05      	ldr	r3, [pc, #20]	; (800264c <SysTick_Config+0x40>)
 8002636:	2200      	movs	r2, #0
 8002638:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800263a:	4b04      	ldr	r3, [pc, #16]	; (800264c <SysTick_Config+0x40>)
 800263c:	2207      	movs	r2, #7
 800263e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002640:	2300      	movs	r3, #0
}
 8002642:	4618      	mov	r0, r3
 8002644:	3708      	adds	r7, #8
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}
 800264a:	bf00      	nop
 800264c:	e000e010 	.word	0xe000e010

08002650 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b082      	sub	sp, #8
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002658:	6878      	ldr	r0, [r7, #4]
 800265a:	f7ff ff2d 	bl	80024b8 <__NVIC_SetPriorityGrouping>
}
 800265e:	bf00      	nop
 8002660:	3708      	adds	r7, #8
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}

08002666 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002666:	b580      	push	{r7, lr}
 8002668:	b086      	sub	sp, #24
 800266a:	af00      	add	r7, sp, #0
 800266c:	4603      	mov	r3, r0
 800266e:	60b9      	str	r1, [r7, #8]
 8002670:	607a      	str	r2, [r7, #4]
 8002672:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002674:	2300      	movs	r3, #0
 8002676:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002678:	f7ff ff42 	bl	8002500 <__NVIC_GetPriorityGrouping>
 800267c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800267e:	687a      	ldr	r2, [r7, #4]
 8002680:	68b9      	ldr	r1, [r7, #8]
 8002682:	6978      	ldr	r0, [r7, #20]
 8002684:	f7ff ff90 	bl	80025a8 <NVIC_EncodePriority>
 8002688:	4602      	mov	r2, r0
 800268a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800268e:	4611      	mov	r1, r2
 8002690:	4618      	mov	r0, r3
 8002692:	f7ff ff5f 	bl	8002554 <__NVIC_SetPriority>
}
 8002696:	bf00      	nop
 8002698:	3718      	adds	r7, #24
 800269a:	46bd      	mov	sp, r7
 800269c:	bd80      	pop	{r7, pc}

0800269e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800269e:	b580      	push	{r7, lr}
 80026a0:	b082      	sub	sp, #8
 80026a2:	af00      	add	r7, sp, #0
 80026a4:	4603      	mov	r3, r0
 80026a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80026a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026ac:	4618      	mov	r0, r3
 80026ae:	f7ff ff35 	bl	800251c <__NVIC_EnableIRQ>
}
 80026b2:	bf00      	nop
 80026b4:	3708      	adds	r7, #8
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}

080026ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80026ba:	b580      	push	{r7, lr}
 80026bc:	b082      	sub	sp, #8
 80026be:	af00      	add	r7, sp, #0
 80026c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80026c2:	6878      	ldr	r0, [r7, #4]
 80026c4:	f7ff ffa2 	bl	800260c <SysTick_Config>
 80026c8:	4603      	mov	r3, r0
}
 80026ca:	4618      	mov	r0, r3
 80026cc:	3708      	adds	r7, #8
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}
	...

080026d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026d4:	b480      	push	{r7}
 80026d6:	b08b      	sub	sp, #44	; 0x2c
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
 80026dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80026de:	2300      	movs	r3, #0
 80026e0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80026e2:	2300      	movs	r3, #0
 80026e4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80026e6:	e169      	b.n	80029bc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80026e8:	2201      	movs	r2, #1
 80026ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ec:	fa02 f303 	lsl.w	r3, r2, r3
 80026f0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	69fa      	ldr	r2, [r7, #28]
 80026f8:	4013      	ands	r3, r2
 80026fa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80026fc:	69ba      	ldr	r2, [r7, #24]
 80026fe:	69fb      	ldr	r3, [r7, #28]
 8002700:	429a      	cmp	r2, r3
 8002702:	f040 8158 	bne.w	80029b6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	4a9a      	ldr	r2, [pc, #616]	; (8002974 <HAL_GPIO_Init+0x2a0>)
 800270c:	4293      	cmp	r3, r2
 800270e:	d05e      	beq.n	80027ce <HAL_GPIO_Init+0xfa>
 8002710:	4a98      	ldr	r2, [pc, #608]	; (8002974 <HAL_GPIO_Init+0x2a0>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d875      	bhi.n	8002802 <HAL_GPIO_Init+0x12e>
 8002716:	4a98      	ldr	r2, [pc, #608]	; (8002978 <HAL_GPIO_Init+0x2a4>)
 8002718:	4293      	cmp	r3, r2
 800271a:	d058      	beq.n	80027ce <HAL_GPIO_Init+0xfa>
 800271c:	4a96      	ldr	r2, [pc, #600]	; (8002978 <HAL_GPIO_Init+0x2a4>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d86f      	bhi.n	8002802 <HAL_GPIO_Init+0x12e>
 8002722:	4a96      	ldr	r2, [pc, #600]	; (800297c <HAL_GPIO_Init+0x2a8>)
 8002724:	4293      	cmp	r3, r2
 8002726:	d052      	beq.n	80027ce <HAL_GPIO_Init+0xfa>
 8002728:	4a94      	ldr	r2, [pc, #592]	; (800297c <HAL_GPIO_Init+0x2a8>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d869      	bhi.n	8002802 <HAL_GPIO_Init+0x12e>
 800272e:	4a94      	ldr	r2, [pc, #592]	; (8002980 <HAL_GPIO_Init+0x2ac>)
 8002730:	4293      	cmp	r3, r2
 8002732:	d04c      	beq.n	80027ce <HAL_GPIO_Init+0xfa>
 8002734:	4a92      	ldr	r2, [pc, #584]	; (8002980 <HAL_GPIO_Init+0x2ac>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d863      	bhi.n	8002802 <HAL_GPIO_Init+0x12e>
 800273a:	4a92      	ldr	r2, [pc, #584]	; (8002984 <HAL_GPIO_Init+0x2b0>)
 800273c:	4293      	cmp	r3, r2
 800273e:	d046      	beq.n	80027ce <HAL_GPIO_Init+0xfa>
 8002740:	4a90      	ldr	r2, [pc, #576]	; (8002984 <HAL_GPIO_Init+0x2b0>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d85d      	bhi.n	8002802 <HAL_GPIO_Init+0x12e>
 8002746:	2b12      	cmp	r3, #18
 8002748:	d82a      	bhi.n	80027a0 <HAL_GPIO_Init+0xcc>
 800274a:	2b12      	cmp	r3, #18
 800274c:	d859      	bhi.n	8002802 <HAL_GPIO_Init+0x12e>
 800274e:	a201      	add	r2, pc, #4	; (adr r2, 8002754 <HAL_GPIO_Init+0x80>)
 8002750:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002754:	080027cf 	.word	0x080027cf
 8002758:	080027a9 	.word	0x080027a9
 800275c:	080027bb 	.word	0x080027bb
 8002760:	080027fd 	.word	0x080027fd
 8002764:	08002803 	.word	0x08002803
 8002768:	08002803 	.word	0x08002803
 800276c:	08002803 	.word	0x08002803
 8002770:	08002803 	.word	0x08002803
 8002774:	08002803 	.word	0x08002803
 8002778:	08002803 	.word	0x08002803
 800277c:	08002803 	.word	0x08002803
 8002780:	08002803 	.word	0x08002803
 8002784:	08002803 	.word	0x08002803
 8002788:	08002803 	.word	0x08002803
 800278c:	08002803 	.word	0x08002803
 8002790:	08002803 	.word	0x08002803
 8002794:	08002803 	.word	0x08002803
 8002798:	080027b1 	.word	0x080027b1
 800279c:	080027c5 	.word	0x080027c5
 80027a0:	4a79      	ldr	r2, [pc, #484]	; (8002988 <HAL_GPIO_Init+0x2b4>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d013      	beq.n	80027ce <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80027a6:	e02c      	b.n	8002802 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	68db      	ldr	r3, [r3, #12]
 80027ac:	623b      	str	r3, [r7, #32]
          break;
 80027ae:	e029      	b.n	8002804 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	68db      	ldr	r3, [r3, #12]
 80027b4:	3304      	adds	r3, #4
 80027b6:	623b      	str	r3, [r7, #32]
          break;
 80027b8:	e024      	b.n	8002804 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	68db      	ldr	r3, [r3, #12]
 80027be:	3308      	adds	r3, #8
 80027c0:	623b      	str	r3, [r7, #32]
          break;
 80027c2:	e01f      	b.n	8002804 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	68db      	ldr	r3, [r3, #12]
 80027c8:	330c      	adds	r3, #12
 80027ca:	623b      	str	r3, [r7, #32]
          break;
 80027cc:	e01a      	b.n	8002804 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	689b      	ldr	r3, [r3, #8]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d102      	bne.n	80027dc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80027d6:	2304      	movs	r3, #4
 80027d8:	623b      	str	r3, [r7, #32]
          break;
 80027da:	e013      	b.n	8002804 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	689b      	ldr	r3, [r3, #8]
 80027e0:	2b01      	cmp	r3, #1
 80027e2:	d105      	bne.n	80027f0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80027e4:	2308      	movs	r3, #8
 80027e6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	69fa      	ldr	r2, [r7, #28]
 80027ec:	611a      	str	r2, [r3, #16]
          break;
 80027ee:	e009      	b.n	8002804 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80027f0:	2308      	movs	r3, #8
 80027f2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	69fa      	ldr	r2, [r7, #28]
 80027f8:	615a      	str	r2, [r3, #20]
          break;
 80027fa:	e003      	b.n	8002804 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80027fc:	2300      	movs	r3, #0
 80027fe:	623b      	str	r3, [r7, #32]
          break;
 8002800:	e000      	b.n	8002804 <HAL_GPIO_Init+0x130>
          break;
 8002802:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002804:	69bb      	ldr	r3, [r7, #24]
 8002806:	2bff      	cmp	r3, #255	; 0xff
 8002808:	d801      	bhi.n	800280e <HAL_GPIO_Init+0x13a>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	e001      	b.n	8002812 <HAL_GPIO_Init+0x13e>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	3304      	adds	r3, #4
 8002812:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002814:	69bb      	ldr	r3, [r7, #24]
 8002816:	2bff      	cmp	r3, #255	; 0xff
 8002818:	d802      	bhi.n	8002820 <HAL_GPIO_Init+0x14c>
 800281a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800281c:	009b      	lsls	r3, r3, #2
 800281e:	e002      	b.n	8002826 <HAL_GPIO_Init+0x152>
 8002820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002822:	3b08      	subs	r3, #8
 8002824:	009b      	lsls	r3, r3, #2
 8002826:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002828:	697b      	ldr	r3, [r7, #20]
 800282a:	681a      	ldr	r2, [r3, #0]
 800282c:	210f      	movs	r1, #15
 800282e:	693b      	ldr	r3, [r7, #16]
 8002830:	fa01 f303 	lsl.w	r3, r1, r3
 8002834:	43db      	mvns	r3, r3
 8002836:	401a      	ands	r2, r3
 8002838:	6a39      	ldr	r1, [r7, #32]
 800283a:	693b      	ldr	r3, [r7, #16]
 800283c:	fa01 f303 	lsl.w	r3, r1, r3
 8002840:	431a      	orrs	r2, r3
 8002842:	697b      	ldr	r3, [r7, #20]
 8002844:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800284e:	2b00      	cmp	r3, #0
 8002850:	f000 80b1 	beq.w	80029b6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002854:	4b4d      	ldr	r3, [pc, #308]	; (800298c <HAL_GPIO_Init+0x2b8>)
 8002856:	699b      	ldr	r3, [r3, #24]
 8002858:	4a4c      	ldr	r2, [pc, #304]	; (800298c <HAL_GPIO_Init+0x2b8>)
 800285a:	f043 0301 	orr.w	r3, r3, #1
 800285e:	6193      	str	r3, [r2, #24]
 8002860:	4b4a      	ldr	r3, [pc, #296]	; (800298c <HAL_GPIO_Init+0x2b8>)
 8002862:	699b      	ldr	r3, [r3, #24]
 8002864:	f003 0301 	and.w	r3, r3, #1
 8002868:	60bb      	str	r3, [r7, #8]
 800286a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800286c:	4a48      	ldr	r2, [pc, #288]	; (8002990 <HAL_GPIO_Init+0x2bc>)
 800286e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002870:	089b      	lsrs	r3, r3, #2
 8002872:	3302      	adds	r3, #2
 8002874:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002878:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800287a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800287c:	f003 0303 	and.w	r3, r3, #3
 8002880:	009b      	lsls	r3, r3, #2
 8002882:	220f      	movs	r2, #15
 8002884:	fa02 f303 	lsl.w	r3, r2, r3
 8002888:	43db      	mvns	r3, r3
 800288a:	68fa      	ldr	r2, [r7, #12]
 800288c:	4013      	ands	r3, r2
 800288e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	4a40      	ldr	r2, [pc, #256]	; (8002994 <HAL_GPIO_Init+0x2c0>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d013      	beq.n	80028c0 <HAL_GPIO_Init+0x1ec>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	4a3f      	ldr	r2, [pc, #252]	; (8002998 <HAL_GPIO_Init+0x2c4>)
 800289c:	4293      	cmp	r3, r2
 800289e:	d00d      	beq.n	80028bc <HAL_GPIO_Init+0x1e8>
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	4a3e      	ldr	r2, [pc, #248]	; (800299c <HAL_GPIO_Init+0x2c8>)
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d007      	beq.n	80028b8 <HAL_GPIO_Init+0x1e4>
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	4a3d      	ldr	r2, [pc, #244]	; (80029a0 <HAL_GPIO_Init+0x2cc>)
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d101      	bne.n	80028b4 <HAL_GPIO_Init+0x1e0>
 80028b0:	2303      	movs	r3, #3
 80028b2:	e006      	b.n	80028c2 <HAL_GPIO_Init+0x1ee>
 80028b4:	2304      	movs	r3, #4
 80028b6:	e004      	b.n	80028c2 <HAL_GPIO_Init+0x1ee>
 80028b8:	2302      	movs	r3, #2
 80028ba:	e002      	b.n	80028c2 <HAL_GPIO_Init+0x1ee>
 80028bc:	2301      	movs	r3, #1
 80028be:	e000      	b.n	80028c2 <HAL_GPIO_Init+0x1ee>
 80028c0:	2300      	movs	r3, #0
 80028c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028c4:	f002 0203 	and.w	r2, r2, #3
 80028c8:	0092      	lsls	r2, r2, #2
 80028ca:	4093      	lsls	r3, r2
 80028cc:	68fa      	ldr	r2, [r7, #12]
 80028ce:	4313      	orrs	r3, r2
 80028d0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80028d2:	492f      	ldr	r1, [pc, #188]	; (8002990 <HAL_GPIO_Init+0x2bc>)
 80028d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d6:	089b      	lsrs	r3, r3, #2
 80028d8:	3302      	adds	r3, #2
 80028da:	68fa      	ldr	r2, [r7, #12]
 80028dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d006      	beq.n	80028fa <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80028ec:	4b2d      	ldr	r3, [pc, #180]	; (80029a4 <HAL_GPIO_Init+0x2d0>)
 80028ee:	689a      	ldr	r2, [r3, #8]
 80028f0:	492c      	ldr	r1, [pc, #176]	; (80029a4 <HAL_GPIO_Init+0x2d0>)
 80028f2:	69bb      	ldr	r3, [r7, #24]
 80028f4:	4313      	orrs	r3, r2
 80028f6:	608b      	str	r3, [r1, #8]
 80028f8:	e006      	b.n	8002908 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80028fa:	4b2a      	ldr	r3, [pc, #168]	; (80029a4 <HAL_GPIO_Init+0x2d0>)
 80028fc:	689a      	ldr	r2, [r3, #8]
 80028fe:	69bb      	ldr	r3, [r7, #24]
 8002900:	43db      	mvns	r3, r3
 8002902:	4928      	ldr	r1, [pc, #160]	; (80029a4 <HAL_GPIO_Init+0x2d0>)
 8002904:	4013      	ands	r3, r2
 8002906:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002910:	2b00      	cmp	r3, #0
 8002912:	d006      	beq.n	8002922 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002914:	4b23      	ldr	r3, [pc, #140]	; (80029a4 <HAL_GPIO_Init+0x2d0>)
 8002916:	68da      	ldr	r2, [r3, #12]
 8002918:	4922      	ldr	r1, [pc, #136]	; (80029a4 <HAL_GPIO_Init+0x2d0>)
 800291a:	69bb      	ldr	r3, [r7, #24]
 800291c:	4313      	orrs	r3, r2
 800291e:	60cb      	str	r3, [r1, #12]
 8002920:	e006      	b.n	8002930 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002922:	4b20      	ldr	r3, [pc, #128]	; (80029a4 <HAL_GPIO_Init+0x2d0>)
 8002924:	68da      	ldr	r2, [r3, #12]
 8002926:	69bb      	ldr	r3, [r7, #24]
 8002928:	43db      	mvns	r3, r3
 800292a:	491e      	ldr	r1, [pc, #120]	; (80029a4 <HAL_GPIO_Init+0x2d0>)
 800292c:	4013      	ands	r3, r2
 800292e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002938:	2b00      	cmp	r3, #0
 800293a:	d006      	beq.n	800294a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800293c:	4b19      	ldr	r3, [pc, #100]	; (80029a4 <HAL_GPIO_Init+0x2d0>)
 800293e:	685a      	ldr	r2, [r3, #4]
 8002940:	4918      	ldr	r1, [pc, #96]	; (80029a4 <HAL_GPIO_Init+0x2d0>)
 8002942:	69bb      	ldr	r3, [r7, #24]
 8002944:	4313      	orrs	r3, r2
 8002946:	604b      	str	r3, [r1, #4]
 8002948:	e006      	b.n	8002958 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800294a:	4b16      	ldr	r3, [pc, #88]	; (80029a4 <HAL_GPIO_Init+0x2d0>)
 800294c:	685a      	ldr	r2, [r3, #4]
 800294e:	69bb      	ldr	r3, [r7, #24]
 8002950:	43db      	mvns	r3, r3
 8002952:	4914      	ldr	r1, [pc, #80]	; (80029a4 <HAL_GPIO_Init+0x2d0>)
 8002954:	4013      	ands	r3, r2
 8002956:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002960:	2b00      	cmp	r3, #0
 8002962:	d021      	beq.n	80029a8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002964:	4b0f      	ldr	r3, [pc, #60]	; (80029a4 <HAL_GPIO_Init+0x2d0>)
 8002966:	681a      	ldr	r2, [r3, #0]
 8002968:	490e      	ldr	r1, [pc, #56]	; (80029a4 <HAL_GPIO_Init+0x2d0>)
 800296a:	69bb      	ldr	r3, [r7, #24]
 800296c:	4313      	orrs	r3, r2
 800296e:	600b      	str	r3, [r1, #0]
 8002970:	e021      	b.n	80029b6 <HAL_GPIO_Init+0x2e2>
 8002972:	bf00      	nop
 8002974:	10320000 	.word	0x10320000
 8002978:	10310000 	.word	0x10310000
 800297c:	10220000 	.word	0x10220000
 8002980:	10210000 	.word	0x10210000
 8002984:	10120000 	.word	0x10120000
 8002988:	10110000 	.word	0x10110000
 800298c:	40021000 	.word	0x40021000
 8002990:	40010000 	.word	0x40010000
 8002994:	40010800 	.word	0x40010800
 8002998:	40010c00 	.word	0x40010c00
 800299c:	40011000 	.word	0x40011000
 80029a0:	40011400 	.word	0x40011400
 80029a4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80029a8:	4b0b      	ldr	r3, [pc, #44]	; (80029d8 <HAL_GPIO_Init+0x304>)
 80029aa:	681a      	ldr	r2, [r3, #0]
 80029ac:	69bb      	ldr	r3, [r7, #24]
 80029ae:	43db      	mvns	r3, r3
 80029b0:	4909      	ldr	r1, [pc, #36]	; (80029d8 <HAL_GPIO_Init+0x304>)
 80029b2:	4013      	ands	r3, r2
 80029b4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80029b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b8:	3301      	adds	r3, #1
 80029ba:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	681a      	ldr	r2, [r3, #0]
 80029c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c2:	fa22 f303 	lsr.w	r3, r2, r3
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	f47f ae8e 	bne.w	80026e8 <HAL_GPIO_Init+0x14>
  }
}
 80029cc:	bf00      	nop
 80029ce:	bf00      	nop
 80029d0:	372c      	adds	r7, #44	; 0x2c
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bc80      	pop	{r7}
 80029d6:	4770      	bx	lr
 80029d8:	40010400 	.word	0x40010400

080029dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029dc:	b480      	push	{r7}
 80029de:	b083      	sub	sp, #12
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
 80029e4:	460b      	mov	r3, r1
 80029e6:	807b      	strh	r3, [r7, #2]
 80029e8:	4613      	mov	r3, r2
 80029ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80029ec:	787b      	ldrb	r3, [r7, #1]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d003      	beq.n	80029fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80029f2:	887a      	ldrh	r2, [r7, #2]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80029f8:	e003      	b.n	8002a02 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80029fa:	887b      	ldrh	r3, [r7, #2]
 80029fc:	041a      	lsls	r2, r3, #16
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	611a      	str	r2, [r3, #16]
}
 8002a02:	bf00      	nop
 8002a04:	370c      	adds	r7, #12
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bc80      	pop	{r7}
 8002a0a:	4770      	bx	lr

08002a0c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	b085      	sub	sp, #20
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
 8002a14:	460b      	mov	r3, r1
 8002a16:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	68db      	ldr	r3, [r3, #12]
 8002a1c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002a1e:	887a      	ldrh	r2, [r7, #2]
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	4013      	ands	r3, r2
 8002a24:	041a      	lsls	r2, r3, #16
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	43d9      	mvns	r1, r3
 8002a2a:	887b      	ldrh	r3, [r7, #2]
 8002a2c:	400b      	ands	r3, r1
 8002a2e:	431a      	orrs	r2, r3
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	611a      	str	r2, [r3, #16]
}
 8002a34:	bf00      	nop
 8002a36:	3714      	adds	r7, #20
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bc80      	pop	{r7}
 8002a3c:	4770      	bx	lr
	...

08002a40 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b082      	sub	sp, #8
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	4603      	mov	r3, r0
 8002a48:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002a4a:	4b08      	ldr	r3, [pc, #32]	; (8002a6c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002a4c:	695a      	ldr	r2, [r3, #20]
 8002a4e:	88fb      	ldrh	r3, [r7, #6]
 8002a50:	4013      	ands	r3, r2
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d006      	beq.n	8002a64 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002a56:	4a05      	ldr	r2, [pc, #20]	; (8002a6c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002a58:	88fb      	ldrh	r3, [r7, #6]
 8002a5a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002a5c:	88fb      	ldrh	r3, [r7, #6]
 8002a5e:	4618      	mov	r0, r3
 8002a60:	f7fd ffb0 	bl	80009c4 <HAL_GPIO_EXTI_Callback>
  }
}
 8002a64:	bf00      	nop
 8002a66:	3708      	adds	r7, #8
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bd80      	pop	{r7, pc}
 8002a6c:	40010400 	.word	0x40010400

08002a70 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b084      	sub	sp, #16
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d101      	bne.n	8002a82 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002a7e:	2301      	movs	r3, #1
 8002a80:	e12b      	b.n	8002cda <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a88:	b2db      	uxtb	r3, r3
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d106      	bne.n	8002a9c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2200      	movs	r2, #0
 8002a92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002a96:	6878      	ldr	r0, [r7, #4]
 8002a98:	f7fe fd5c 	bl	8001554 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2224      	movs	r2, #36	; 0x24
 8002aa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	681a      	ldr	r2, [r3, #0]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f022 0201 	bic.w	r2, r2, #1
 8002ab2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	681a      	ldr	r2, [r3, #0]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002ac2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	681a      	ldr	r2, [r3, #0]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002ad2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002ad4:	f000 fe82 	bl	80037dc <HAL_RCC_GetPCLK1Freq>
 8002ad8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	4a81      	ldr	r2, [pc, #516]	; (8002ce4 <HAL_I2C_Init+0x274>)
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d807      	bhi.n	8002af4 <HAL_I2C_Init+0x84>
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	4a80      	ldr	r2, [pc, #512]	; (8002ce8 <HAL_I2C_Init+0x278>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	bf94      	ite	ls
 8002aec:	2301      	movls	r3, #1
 8002aee:	2300      	movhi	r3, #0
 8002af0:	b2db      	uxtb	r3, r3
 8002af2:	e006      	b.n	8002b02 <HAL_I2C_Init+0x92>
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	4a7d      	ldr	r2, [pc, #500]	; (8002cec <HAL_I2C_Init+0x27c>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	bf94      	ite	ls
 8002afc:	2301      	movls	r3, #1
 8002afe:	2300      	movhi	r3, #0
 8002b00:	b2db      	uxtb	r3, r3
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d001      	beq.n	8002b0a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002b06:	2301      	movs	r3, #1
 8002b08:	e0e7      	b.n	8002cda <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	4a78      	ldr	r2, [pc, #480]	; (8002cf0 <HAL_I2C_Init+0x280>)
 8002b0e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b12:	0c9b      	lsrs	r3, r3, #18
 8002b14:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	68ba      	ldr	r2, [r7, #8]
 8002b26:	430a      	orrs	r2, r1
 8002b28:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	6a1b      	ldr	r3, [r3, #32]
 8002b30:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	4a6a      	ldr	r2, [pc, #424]	; (8002ce4 <HAL_I2C_Init+0x274>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d802      	bhi.n	8002b44 <HAL_I2C_Init+0xd4>
 8002b3e:	68bb      	ldr	r3, [r7, #8]
 8002b40:	3301      	adds	r3, #1
 8002b42:	e009      	b.n	8002b58 <HAL_I2C_Init+0xe8>
 8002b44:	68bb      	ldr	r3, [r7, #8]
 8002b46:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002b4a:	fb02 f303 	mul.w	r3, r2, r3
 8002b4e:	4a69      	ldr	r2, [pc, #420]	; (8002cf4 <HAL_I2C_Init+0x284>)
 8002b50:	fba2 2303 	umull	r2, r3, r2, r3
 8002b54:	099b      	lsrs	r3, r3, #6
 8002b56:	3301      	adds	r3, #1
 8002b58:	687a      	ldr	r2, [r7, #4]
 8002b5a:	6812      	ldr	r2, [r2, #0]
 8002b5c:	430b      	orrs	r3, r1
 8002b5e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	69db      	ldr	r3, [r3, #28]
 8002b66:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002b6a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	495c      	ldr	r1, [pc, #368]	; (8002ce4 <HAL_I2C_Init+0x274>)
 8002b74:	428b      	cmp	r3, r1
 8002b76:	d819      	bhi.n	8002bac <HAL_I2C_Init+0x13c>
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	1e59      	subs	r1, r3, #1
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	005b      	lsls	r3, r3, #1
 8002b82:	fbb1 f3f3 	udiv	r3, r1, r3
 8002b86:	1c59      	adds	r1, r3, #1
 8002b88:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002b8c:	400b      	ands	r3, r1
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d00a      	beq.n	8002ba8 <HAL_I2C_Init+0x138>
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	1e59      	subs	r1, r3, #1
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	005b      	lsls	r3, r3, #1
 8002b9c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ba0:	3301      	adds	r3, #1
 8002ba2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ba6:	e051      	b.n	8002c4c <HAL_I2C_Init+0x1dc>
 8002ba8:	2304      	movs	r3, #4
 8002baa:	e04f      	b.n	8002c4c <HAL_I2C_Init+0x1dc>
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	689b      	ldr	r3, [r3, #8]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d111      	bne.n	8002bd8 <HAL_I2C_Init+0x168>
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	1e58      	subs	r0, r3, #1
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6859      	ldr	r1, [r3, #4]
 8002bbc:	460b      	mov	r3, r1
 8002bbe:	005b      	lsls	r3, r3, #1
 8002bc0:	440b      	add	r3, r1
 8002bc2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002bc6:	3301      	adds	r3, #1
 8002bc8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	bf0c      	ite	eq
 8002bd0:	2301      	moveq	r3, #1
 8002bd2:	2300      	movne	r3, #0
 8002bd4:	b2db      	uxtb	r3, r3
 8002bd6:	e012      	b.n	8002bfe <HAL_I2C_Init+0x18e>
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	1e58      	subs	r0, r3, #1
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6859      	ldr	r1, [r3, #4]
 8002be0:	460b      	mov	r3, r1
 8002be2:	009b      	lsls	r3, r3, #2
 8002be4:	440b      	add	r3, r1
 8002be6:	0099      	lsls	r1, r3, #2
 8002be8:	440b      	add	r3, r1
 8002bea:	fbb0 f3f3 	udiv	r3, r0, r3
 8002bee:	3301      	adds	r3, #1
 8002bf0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	bf0c      	ite	eq
 8002bf8:	2301      	moveq	r3, #1
 8002bfa:	2300      	movne	r3, #0
 8002bfc:	b2db      	uxtb	r3, r3
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d001      	beq.n	8002c06 <HAL_I2C_Init+0x196>
 8002c02:	2301      	movs	r3, #1
 8002c04:	e022      	b.n	8002c4c <HAL_I2C_Init+0x1dc>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	689b      	ldr	r3, [r3, #8]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d10e      	bne.n	8002c2c <HAL_I2C_Init+0x1bc>
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	1e58      	subs	r0, r3, #1
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6859      	ldr	r1, [r3, #4]
 8002c16:	460b      	mov	r3, r1
 8002c18:	005b      	lsls	r3, r3, #1
 8002c1a:	440b      	add	r3, r1
 8002c1c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c20:	3301      	adds	r3, #1
 8002c22:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c2a:	e00f      	b.n	8002c4c <HAL_I2C_Init+0x1dc>
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	1e58      	subs	r0, r3, #1
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6859      	ldr	r1, [r3, #4]
 8002c34:	460b      	mov	r3, r1
 8002c36:	009b      	lsls	r3, r3, #2
 8002c38:	440b      	add	r3, r1
 8002c3a:	0099      	lsls	r1, r3, #2
 8002c3c:	440b      	add	r3, r1
 8002c3e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c42:	3301      	adds	r3, #1
 8002c44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c48:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002c4c:	6879      	ldr	r1, [r7, #4]
 8002c4e:	6809      	ldr	r1, [r1, #0]
 8002c50:	4313      	orrs	r3, r2
 8002c52:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	69da      	ldr	r2, [r3, #28]
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6a1b      	ldr	r3, [r3, #32]
 8002c66:	431a      	orrs	r2, r3
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	430a      	orrs	r2, r1
 8002c6e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	689b      	ldr	r3, [r3, #8]
 8002c76:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002c7a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002c7e:	687a      	ldr	r2, [r7, #4]
 8002c80:	6911      	ldr	r1, [r2, #16]
 8002c82:	687a      	ldr	r2, [r7, #4]
 8002c84:	68d2      	ldr	r2, [r2, #12]
 8002c86:	4311      	orrs	r1, r2
 8002c88:	687a      	ldr	r2, [r7, #4]
 8002c8a:	6812      	ldr	r2, [r2, #0]
 8002c8c:	430b      	orrs	r3, r1
 8002c8e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	68db      	ldr	r3, [r3, #12]
 8002c96:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	695a      	ldr	r2, [r3, #20]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	699b      	ldr	r3, [r3, #24]
 8002ca2:	431a      	orrs	r2, r3
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	430a      	orrs	r2, r1
 8002caa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	681a      	ldr	r2, [r3, #0]
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f042 0201 	orr.w	r2, r2, #1
 8002cba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2220      	movs	r2, #32
 8002cc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2200      	movs	r2, #0
 8002cce:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002cd8:	2300      	movs	r3, #0
}
 8002cda:	4618      	mov	r0, r3
 8002cdc:	3710      	adds	r7, #16
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd80      	pop	{r7, pc}
 8002ce2:	bf00      	nop
 8002ce4:	000186a0 	.word	0x000186a0
 8002ce8:	001e847f 	.word	0x001e847f
 8002cec:	003d08ff 	.word	0x003d08ff
 8002cf0:	431bde83 	.word	0x431bde83
 8002cf4:	10624dd3 	.word	0x10624dd3

08002cf8 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b08a      	sub	sp, #40	; 0x28
 8002cfc:	af02      	add	r7, sp, #8
 8002cfe:	60f8      	str	r0, [r7, #12]
 8002d00:	607a      	str	r2, [r7, #4]
 8002d02:	603b      	str	r3, [r7, #0]
 8002d04:	460b      	mov	r3, r1
 8002d06:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002d08:	f7fe fe36 	bl	8001978 <HAL_GetTick>
 8002d0c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d18:	b2db      	uxtb	r3, r3
 8002d1a:	2b20      	cmp	r3, #32
 8002d1c:	f040 8111 	bne.w	8002f42 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002d20:	69fb      	ldr	r3, [r7, #28]
 8002d22:	9300      	str	r3, [sp, #0]
 8002d24:	2319      	movs	r3, #25
 8002d26:	2201      	movs	r2, #1
 8002d28:	4988      	ldr	r1, [pc, #544]	; (8002f4c <HAL_I2C_IsDeviceReady+0x254>)
 8002d2a:	68f8      	ldr	r0, [r7, #12]
 8002d2c:	f000 f912 	bl	8002f54 <I2C_WaitOnFlagUntilTimeout>
 8002d30:	4603      	mov	r3, r0
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d001      	beq.n	8002d3a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002d36:	2302      	movs	r3, #2
 8002d38:	e104      	b.n	8002f44 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d40:	2b01      	cmp	r3, #1
 8002d42:	d101      	bne.n	8002d48 <HAL_I2C_IsDeviceReady+0x50>
 8002d44:	2302      	movs	r3, #2
 8002d46:	e0fd      	b.n	8002f44 <HAL_I2C_IsDeviceReady+0x24c>
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f003 0301 	and.w	r3, r3, #1
 8002d5a:	2b01      	cmp	r3, #1
 8002d5c:	d007      	beq.n	8002d6e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	681a      	ldr	r2, [r3, #0]
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f042 0201 	orr.w	r2, r2, #1
 8002d6c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	681a      	ldr	r2, [r3, #0]
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d7c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	2224      	movs	r2, #36	; 0x24
 8002d82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	2200      	movs	r2, #0
 8002d8a:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	4a70      	ldr	r2, [pc, #448]	; (8002f50 <HAL_I2C_IsDeviceReady+0x258>)
 8002d90:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	681a      	ldr	r2, [r3, #0]
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002da0:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002da2:	69fb      	ldr	r3, [r7, #28]
 8002da4:	9300      	str	r3, [sp, #0]
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	2200      	movs	r2, #0
 8002daa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002dae:	68f8      	ldr	r0, [r7, #12]
 8002db0:	f000 f8d0 	bl	8002f54 <I2C_WaitOnFlagUntilTimeout>
 8002db4:	4603      	mov	r3, r0
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d00d      	beq.n	8002dd6 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dc4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002dc8:	d103      	bne.n	8002dd2 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002dd0:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8002dd2:	2303      	movs	r3, #3
 8002dd4:	e0b6      	b.n	8002f44 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002dd6:	897b      	ldrh	r3, [r7, #10]
 8002dd8:	b2db      	uxtb	r3, r3
 8002dda:	461a      	mov	r2, r3
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002de4:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002de6:	f7fe fdc7 	bl	8001978 <HAL_GetTick>
 8002dea:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	695b      	ldr	r3, [r3, #20]
 8002df2:	f003 0302 	and.w	r3, r3, #2
 8002df6:	2b02      	cmp	r3, #2
 8002df8:	bf0c      	ite	eq
 8002dfa:	2301      	moveq	r3, #1
 8002dfc:	2300      	movne	r3, #0
 8002dfe:	b2db      	uxtb	r3, r3
 8002e00:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	695b      	ldr	r3, [r3, #20]
 8002e08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e10:	bf0c      	ite	eq
 8002e12:	2301      	moveq	r3, #1
 8002e14:	2300      	movne	r3, #0
 8002e16:	b2db      	uxtb	r3, r3
 8002e18:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002e1a:	e025      	b.n	8002e68 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002e1c:	f7fe fdac 	bl	8001978 <HAL_GetTick>
 8002e20:	4602      	mov	r2, r0
 8002e22:	69fb      	ldr	r3, [r7, #28]
 8002e24:	1ad3      	subs	r3, r2, r3
 8002e26:	683a      	ldr	r2, [r7, #0]
 8002e28:	429a      	cmp	r2, r3
 8002e2a:	d302      	bcc.n	8002e32 <HAL_I2C_IsDeviceReady+0x13a>
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d103      	bne.n	8002e3a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	22a0      	movs	r2, #160	; 0xa0
 8002e36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	695b      	ldr	r3, [r3, #20]
 8002e40:	f003 0302 	and.w	r3, r3, #2
 8002e44:	2b02      	cmp	r3, #2
 8002e46:	bf0c      	ite	eq
 8002e48:	2301      	moveq	r3, #1
 8002e4a:	2300      	movne	r3, #0
 8002e4c:	b2db      	uxtb	r3, r3
 8002e4e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	695b      	ldr	r3, [r3, #20]
 8002e56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e5e:	bf0c      	ite	eq
 8002e60:	2301      	moveq	r3, #1
 8002e62:	2300      	movne	r3, #0
 8002e64:	b2db      	uxtb	r3, r3
 8002e66:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e6e:	b2db      	uxtb	r3, r3
 8002e70:	2ba0      	cmp	r3, #160	; 0xa0
 8002e72:	d005      	beq.n	8002e80 <HAL_I2C_IsDeviceReady+0x188>
 8002e74:	7dfb      	ldrb	r3, [r7, #23]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d102      	bne.n	8002e80 <HAL_I2C_IsDeviceReady+0x188>
 8002e7a:	7dbb      	ldrb	r3, [r7, #22]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d0cd      	beq.n	8002e1c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	2220      	movs	r2, #32
 8002e84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	695b      	ldr	r3, [r3, #20]
 8002e8e:	f003 0302 	and.w	r3, r3, #2
 8002e92:	2b02      	cmp	r3, #2
 8002e94:	d129      	bne.n	8002eea <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	681a      	ldr	r2, [r3, #0]
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ea4:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	613b      	str	r3, [r7, #16]
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	695b      	ldr	r3, [r3, #20]
 8002eb0:	613b      	str	r3, [r7, #16]
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	699b      	ldr	r3, [r3, #24]
 8002eb8:	613b      	str	r3, [r7, #16]
 8002eba:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002ebc:	69fb      	ldr	r3, [r7, #28]
 8002ebe:	9300      	str	r3, [sp, #0]
 8002ec0:	2319      	movs	r3, #25
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	4921      	ldr	r1, [pc, #132]	; (8002f4c <HAL_I2C_IsDeviceReady+0x254>)
 8002ec6:	68f8      	ldr	r0, [r7, #12]
 8002ec8:	f000 f844 	bl	8002f54 <I2C_WaitOnFlagUntilTimeout>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d001      	beq.n	8002ed6 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	e036      	b.n	8002f44 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	2220      	movs	r2, #32
 8002eda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	e02c      	b.n	8002f44 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	681a      	ldr	r2, [r3, #0]
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ef8:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002f02:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002f04:	69fb      	ldr	r3, [r7, #28]
 8002f06:	9300      	str	r3, [sp, #0]
 8002f08:	2319      	movs	r3, #25
 8002f0a:	2201      	movs	r2, #1
 8002f0c:	490f      	ldr	r1, [pc, #60]	; (8002f4c <HAL_I2C_IsDeviceReady+0x254>)
 8002f0e:	68f8      	ldr	r0, [r7, #12]
 8002f10:	f000 f820 	bl	8002f54 <I2C_WaitOnFlagUntilTimeout>
 8002f14:	4603      	mov	r3, r0
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d001      	beq.n	8002f1e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	e012      	b.n	8002f44 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002f1e:	69bb      	ldr	r3, [r7, #24]
 8002f20:	3301      	adds	r3, #1
 8002f22:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002f24:	69ba      	ldr	r2, [r7, #24]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	429a      	cmp	r2, r3
 8002f2a:	f4ff af32 	bcc.w	8002d92 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	2220      	movs	r2, #32
 8002f32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	2200      	movs	r2, #0
 8002f3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	e000      	b.n	8002f44 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8002f42:	2302      	movs	r3, #2
  }
}
 8002f44:	4618      	mov	r0, r3
 8002f46:	3720      	adds	r7, #32
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	bd80      	pop	{r7, pc}
 8002f4c:	00100002 	.word	0x00100002
 8002f50:	ffff0000 	.word	0xffff0000

08002f54 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b084      	sub	sp, #16
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	60f8      	str	r0, [r7, #12]
 8002f5c:	60b9      	str	r1, [r7, #8]
 8002f5e:	603b      	str	r3, [r7, #0]
 8002f60:	4613      	mov	r3, r2
 8002f62:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f64:	e048      	b.n	8002ff8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f6c:	d044      	beq.n	8002ff8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f6e:	f7fe fd03 	bl	8001978 <HAL_GetTick>
 8002f72:	4602      	mov	r2, r0
 8002f74:	69bb      	ldr	r3, [r7, #24]
 8002f76:	1ad3      	subs	r3, r2, r3
 8002f78:	683a      	ldr	r2, [r7, #0]
 8002f7a:	429a      	cmp	r2, r3
 8002f7c:	d302      	bcc.n	8002f84 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d139      	bne.n	8002ff8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002f84:	68bb      	ldr	r3, [r7, #8]
 8002f86:	0c1b      	lsrs	r3, r3, #16
 8002f88:	b2db      	uxtb	r3, r3
 8002f8a:	2b01      	cmp	r3, #1
 8002f8c:	d10d      	bne.n	8002faa <I2C_WaitOnFlagUntilTimeout+0x56>
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	695b      	ldr	r3, [r3, #20]
 8002f94:	43da      	mvns	r2, r3
 8002f96:	68bb      	ldr	r3, [r7, #8]
 8002f98:	4013      	ands	r3, r2
 8002f9a:	b29b      	uxth	r3, r3
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	bf0c      	ite	eq
 8002fa0:	2301      	moveq	r3, #1
 8002fa2:	2300      	movne	r3, #0
 8002fa4:	b2db      	uxtb	r3, r3
 8002fa6:	461a      	mov	r2, r3
 8002fa8:	e00c      	b.n	8002fc4 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	699b      	ldr	r3, [r3, #24]
 8002fb0:	43da      	mvns	r2, r3
 8002fb2:	68bb      	ldr	r3, [r7, #8]
 8002fb4:	4013      	ands	r3, r2
 8002fb6:	b29b      	uxth	r3, r3
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	bf0c      	ite	eq
 8002fbc:	2301      	moveq	r3, #1
 8002fbe:	2300      	movne	r3, #0
 8002fc0:	b2db      	uxtb	r3, r3
 8002fc2:	461a      	mov	r2, r3
 8002fc4:	79fb      	ldrb	r3, [r7, #7]
 8002fc6:	429a      	cmp	r2, r3
 8002fc8:	d116      	bne.n	8002ff8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	2200      	movs	r2, #0
 8002fce:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	2220      	movs	r2, #32
 8002fd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	2200      	movs	r2, #0
 8002fdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe4:	f043 0220 	orr.w	r2, r3, #32
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	2200      	movs	r2, #0
 8002ff0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	e023      	b.n	8003040 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	0c1b      	lsrs	r3, r3, #16
 8002ffc:	b2db      	uxtb	r3, r3
 8002ffe:	2b01      	cmp	r3, #1
 8003000:	d10d      	bne.n	800301e <I2C_WaitOnFlagUntilTimeout+0xca>
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	695b      	ldr	r3, [r3, #20]
 8003008:	43da      	mvns	r2, r3
 800300a:	68bb      	ldr	r3, [r7, #8]
 800300c:	4013      	ands	r3, r2
 800300e:	b29b      	uxth	r3, r3
 8003010:	2b00      	cmp	r3, #0
 8003012:	bf0c      	ite	eq
 8003014:	2301      	moveq	r3, #1
 8003016:	2300      	movne	r3, #0
 8003018:	b2db      	uxtb	r3, r3
 800301a:	461a      	mov	r2, r3
 800301c:	e00c      	b.n	8003038 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	699b      	ldr	r3, [r3, #24]
 8003024:	43da      	mvns	r2, r3
 8003026:	68bb      	ldr	r3, [r7, #8]
 8003028:	4013      	ands	r3, r2
 800302a:	b29b      	uxth	r3, r3
 800302c:	2b00      	cmp	r3, #0
 800302e:	bf0c      	ite	eq
 8003030:	2301      	moveq	r3, #1
 8003032:	2300      	movne	r3, #0
 8003034:	b2db      	uxtb	r3, r3
 8003036:	461a      	mov	r2, r3
 8003038:	79fb      	ldrb	r3, [r7, #7]
 800303a:	429a      	cmp	r2, r3
 800303c:	d093      	beq.n	8002f66 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800303e:	2300      	movs	r3, #0
}
 8003040:	4618      	mov	r0, r3
 8003042:	3710      	adds	r7, #16
 8003044:	46bd      	mov	sp, r7
 8003046:	bd80      	pop	{r7, pc}

08003048 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b086      	sub	sp, #24
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d101      	bne.n	800305a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003056:	2301      	movs	r3, #1
 8003058:	e272      	b.n	8003540 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f003 0301 	and.w	r3, r3, #1
 8003062:	2b00      	cmp	r3, #0
 8003064:	f000 8087 	beq.w	8003176 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003068:	4b92      	ldr	r3, [pc, #584]	; (80032b4 <HAL_RCC_OscConfig+0x26c>)
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	f003 030c 	and.w	r3, r3, #12
 8003070:	2b04      	cmp	r3, #4
 8003072:	d00c      	beq.n	800308e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003074:	4b8f      	ldr	r3, [pc, #572]	; (80032b4 <HAL_RCC_OscConfig+0x26c>)
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	f003 030c 	and.w	r3, r3, #12
 800307c:	2b08      	cmp	r3, #8
 800307e:	d112      	bne.n	80030a6 <HAL_RCC_OscConfig+0x5e>
 8003080:	4b8c      	ldr	r3, [pc, #560]	; (80032b4 <HAL_RCC_OscConfig+0x26c>)
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003088:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800308c:	d10b      	bne.n	80030a6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800308e:	4b89      	ldr	r3, [pc, #548]	; (80032b4 <HAL_RCC_OscConfig+0x26c>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003096:	2b00      	cmp	r3, #0
 8003098:	d06c      	beq.n	8003174 <HAL_RCC_OscConfig+0x12c>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d168      	bne.n	8003174 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80030a2:	2301      	movs	r3, #1
 80030a4:	e24c      	b.n	8003540 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030ae:	d106      	bne.n	80030be <HAL_RCC_OscConfig+0x76>
 80030b0:	4b80      	ldr	r3, [pc, #512]	; (80032b4 <HAL_RCC_OscConfig+0x26c>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a7f      	ldr	r2, [pc, #508]	; (80032b4 <HAL_RCC_OscConfig+0x26c>)
 80030b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030ba:	6013      	str	r3, [r2, #0]
 80030bc:	e02e      	b.n	800311c <HAL_RCC_OscConfig+0xd4>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d10c      	bne.n	80030e0 <HAL_RCC_OscConfig+0x98>
 80030c6:	4b7b      	ldr	r3, [pc, #492]	; (80032b4 <HAL_RCC_OscConfig+0x26c>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4a7a      	ldr	r2, [pc, #488]	; (80032b4 <HAL_RCC_OscConfig+0x26c>)
 80030cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030d0:	6013      	str	r3, [r2, #0]
 80030d2:	4b78      	ldr	r3, [pc, #480]	; (80032b4 <HAL_RCC_OscConfig+0x26c>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4a77      	ldr	r2, [pc, #476]	; (80032b4 <HAL_RCC_OscConfig+0x26c>)
 80030d8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030dc:	6013      	str	r3, [r2, #0]
 80030de:	e01d      	b.n	800311c <HAL_RCC_OscConfig+0xd4>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80030e8:	d10c      	bne.n	8003104 <HAL_RCC_OscConfig+0xbc>
 80030ea:	4b72      	ldr	r3, [pc, #456]	; (80032b4 <HAL_RCC_OscConfig+0x26c>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4a71      	ldr	r2, [pc, #452]	; (80032b4 <HAL_RCC_OscConfig+0x26c>)
 80030f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80030f4:	6013      	str	r3, [r2, #0]
 80030f6:	4b6f      	ldr	r3, [pc, #444]	; (80032b4 <HAL_RCC_OscConfig+0x26c>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4a6e      	ldr	r2, [pc, #440]	; (80032b4 <HAL_RCC_OscConfig+0x26c>)
 80030fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003100:	6013      	str	r3, [r2, #0]
 8003102:	e00b      	b.n	800311c <HAL_RCC_OscConfig+0xd4>
 8003104:	4b6b      	ldr	r3, [pc, #428]	; (80032b4 <HAL_RCC_OscConfig+0x26c>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4a6a      	ldr	r2, [pc, #424]	; (80032b4 <HAL_RCC_OscConfig+0x26c>)
 800310a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800310e:	6013      	str	r3, [r2, #0]
 8003110:	4b68      	ldr	r3, [pc, #416]	; (80032b4 <HAL_RCC_OscConfig+0x26c>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4a67      	ldr	r2, [pc, #412]	; (80032b4 <HAL_RCC_OscConfig+0x26c>)
 8003116:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800311a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d013      	beq.n	800314c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003124:	f7fe fc28 	bl	8001978 <HAL_GetTick>
 8003128:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800312a:	e008      	b.n	800313e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800312c:	f7fe fc24 	bl	8001978 <HAL_GetTick>
 8003130:	4602      	mov	r2, r0
 8003132:	693b      	ldr	r3, [r7, #16]
 8003134:	1ad3      	subs	r3, r2, r3
 8003136:	2b64      	cmp	r3, #100	; 0x64
 8003138:	d901      	bls.n	800313e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800313a:	2303      	movs	r3, #3
 800313c:	e200      	b.n	8003540 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800313e:	4b5d      	ldr	r3, [pc, #372]	; (80032b4 <HAL_RCC_OscConfig+0x26c>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003146:	2b00      	cmp	r3, #0
 8003148:	d0f0      	beq.n	800312c <HAL_RCC_OscConfig+0xe4>
 800314a:	e014      	b.n	8003176 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800314c:	f7fe fc14 	bl	8001978 <HAL_GetTick>
 8003150:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003152:	e008      	b.n	8003166 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003154:	f7fe fc10 	bl	8001978 <HAL_GetTick>
 8003158:	4602      	mov	r2, r0
 800315a:	693b      	ldr	r3, [r7, #16]
 800315c:	1ad3      	subs	r3, r2, r3
 800315e:	2b64      	cmp	r3, #100	; 0x64
 8003160:	d901      	bls.n	8003166 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003162:	2303      	movs	r3, #3
 8003164:	e1ec      	b.n	8003540 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003166:	4b53      	ldr	r3, [pc, #332]	; (80032b4 <HAL_RCC_OscConfig+0x26c>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800316e:	2b00      	cmp	r3, #0
 8003170:	d1f0      	bne.n	8003154 <HAL_RCC_OscConfig+0x10c>
 8003172:	e000      	b.n	8003176 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003174:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f003 0302 	and.w	r3, r3, #2
 800317e:	2b00      	cmp	r3, #0
 8003180:	d063      	beq.n	800324a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003182:	4b4c      	ldr	r3, [pc, #304]	; (80032b4 <HAL_RCC_OscConfig+0x26c>)
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	f003 030c 	and.w	r3, r3, #12
 800318a:	2b00      	cmp	r3, #0
 800318c:	d00b      	beq.n	80031a6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800318e:	4b49      	ldr	r3, [pc, #292]	; (80032b4 <HAL_RCC_OscConfig+0x26c>)
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	f003 030c 	and.w	r3, r3, #12
 8003196:	2b08      	cmp	r3, #8
 8003198:	d11c      	bne.n	80031d4 <HAL_RCC_OscConfig+0x18c>
 800319a:	4b46      	ldr	r3, [pc, #280]	; (80032b4 <HAL_RCC_OscConfig+0x26c>)
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d116      	bne.n	80031d4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031a6:	4b43      	ldr	r3, [pc, #268]	; (80032b4 <HAL_RCC_OscConfig+0x26c>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f003 0302 	and.w	r3, r3, #2
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d005      	beq.n	80031be <HAL_RCC_OscConfig+0x176>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	691b      	ldr	r3, [r3, #16]
 80031b6:	2b01      	cmp	r3, #1
 80031b8:	d001      	beq.n	80031be <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80031ba:	2301      	movs	r3, #1
 80031bc:	e1c0      	b.n	8003540 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031be:	4b3d      	ldr	r3, [pc, #244]	; (80032b4 <HAL_RCC_OscConfig+0x26c>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	695b      	ldr	r3, [r3, #20]
 80031ca:	00db      	lsls	r3, r3, #3
 80031cc:	4939      	ldr	r1, [pc, #228]	; (80032b4 <HAL_RCC_OscConfig+0x26c>)
 80031ce:	4313      	orrs	r3, r2
 80031d0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031d2:	e03a      	b.n	800324a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	691b      	ldr	r3, [r3, #16]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d020      	beq.n	800321e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80031dc:	4b36      	ldr	r3, [pc, #216]	; (80032b8 <HAL_RCC_OscConfig+0x270>)
 80031de:	2201      	movs	r2, #1
 80031e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031e2:	f7fe fbc9 	bl	8001978 <HAL_GetTick>
 80031e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031e8:	e008      	b.n	80031fc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031ea:	f7fe fbc5 	bl	8001978 <HAL_GetTick>
 80031ee:	4602      	mov	r2, r0
 80031f0:	693b      	ldr	r3, [r7, #16]
 80031f2:	1ad3      	subs	r3, r2, r3
 80031f4:	2b02      	cmp	r3, #2
 80031f6:	d901      	bls.n	80031fc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80031f8:	2303      	movs	r3, #3
 80031fa:	e1a1      	b.n	8003540 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031fc:	4b2d      	ldr	r3, [pc, #180]	; (80032b4 <HAL_RCC_OscConfig+0x26c>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f003 0302 	and.w	r3, r3, #2
 8003204:	2b00      	cmp	r3, #0
 8003206:	d0f0      	beq.n	80031ea <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003208:	4b2a      	ldr	r3, [pc, #168]	; (80032b4 <HAL_RCC_OscConfig+0x26c>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	695b      	ldr	r3, [r3, #20]
 8003214:	00db      	lsls	r3, r3, #3
 8003216:	4927      	ldr	r1, [pc, #156]	; (80032b4 <HAL_RCC_OscConfig+0x26c>)
 8003218:	4313      	orrs	r3, r2
 800321a:	600b      	str	r3, [r1, #0]
 800321c:	e015      	b.n	800324a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800321e:	4b26      	ldr	r3, [pc, #152]	; (80032b8 <HAL_RCC_OscConfig+0x270>)
 8003220:	2200      	movs	r2, #0
 8003222:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003224:	f7fe fba8 	bl	8001978 <HAL_GetTick>
 8003228:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800322a:	e008      	b.n	800323e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800322c:	f7fe fba4 	bl	8001978 <HAL_GetTick>
 8003230:	4602      	mov	r2, r0
 8003232:	693b      	ldr	r3, [r7, #16]
 8003234:	1ad3      	subs	r3, r2, r3
 8003236:	2b02      	cmp	r3, #2
 8003238:	d901      	bls.n	800323e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800323a:	2303      	movs	r3, #3
 800323c:	e180      	b.n	8003540 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800323e:	4b1d      	ldr	r3, [pc, #116]	; (80032b4 <HAL_RCC_OscConfig+0x26c>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f003 0302 	and.w	r3, r3, #2
 8003246:	2b00      	cmp	r3, #0
 8003248:	d1f0      	bne.n	800322c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f003 0308 	and.w	r3, r3, #8
 8003252:	2b00      	cmp	r3, #0
 8003254:	d03a      	beq.n	80032cc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	699b      	ldr	r3, [r3, #24]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d019      	beq.n	8003292 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800325e:	4b17      	ldr	r3, [pc, #92]	; (80032bc <HAL_RCC_OscConfig+0x274>)
 8003260:	2201      	movs	r2, #1
 8003262:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003264:	f7fe fb88 	bl	8001978 <HAL_GetTick>
 8003268:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800326a:	e008      	b.n	800327e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800326c:	f7fe fb84 	bl	8001978 <HAL_GetTick>
 8003270:	4602      	mov	r2, r0
 8003272:	693b      	ldr	r3, [r7, #16]
 8003274:	1ad3      	subs	r3, r2, r3
 8003276:	2b02      	cmp	r3, #2
 8003278:	d901      	bls.n	800327e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800327a:	2303      	movs	r3, #3
 800327c:	e160      	b.n	8003540 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800327e:	4b0d      	ldr	r3, [pc, #52]	; (80032b4 <HAL_RCC_OscConfig+0x26c>)
 8003280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003282:	f003 0302 	and.w	r3, r3, #2
 8003286:	2b00      	cmp	r3, #0
 8003288:	d0f0      	beq.n	800326c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800328a:	2001      	movs	r0, #1
 800328c:	f000 face 	bl	800382c <RCC_Delay>
 8003290:	e01c      	b.n	80032cc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003292:	4b0a      	ldr	r3, [pc, #40]	; (80032bc <HAL_RCC_OscConfig+0x274>)
 8003294:	2200      	movs	r2, #0
 8003296:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003298:	f7fe fb6e 	bl	8001978 <HAL_GetTick>
 800329c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800329e:	e00f      	b.n	80032c0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032a0:	f7fe fb6a 	bl	8001978 <HAL_GetTick>
 80032a4:	4602      	mov	r2, r0
 80032a6:	693b      	ldr	r3, [r7, #16]
 80032a8:	1ad3      	subs	r3, r2, r3
 80032aa:	2b02      	cmp	r3, #2
 80032ac:	d908      	bls.n	80032c0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80032ae:	2303      	movs	r3, #3
 80032b0:	e146      	b.n	8003540 <HAL_RCC_OscConfig+0x4f8>
 80032b2:	bf00      	nop
 80032b4:	40021000 	.word	0x40021000
 80032b8:	42420000 	.word	0x42420000
 80032bc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032c0:	4b92      	ldr	r3, [pc, #584]	; (800350c <HAL_RCC_OscConfig+0x4c4>)
 80032c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032c4:	f003 0302 	and.w	r3, r3, #2
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d1e9      	bne.n	80032a0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f003 0304 	and.w	r3, r3, #4
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	f000 80a6 	beq.w	8003426 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032da:	2300      	movs	r3, #0
 80032dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032de:	4b8b      	ldr	r3, [pc, #556]	; (800350c <HAL_RCC_OscConfig+0x4c4>)
 80032e0:	69db      	ldr	r3, [r3, #28]
 80032e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d10d      	bne.n	8003306 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032ea:	4b88      	ldr	r3, [pc, #544]	; (800350c <HAL_RCC_OscConfig+0x4c4>)
 80032ec:	69db      	ldr	r3, [r3, #28]
 80032ee:	4a87      	ldr	r2, [pc, #540]	; (800350c <HAL_RCC_OscConfig+0x4c4>)
 80032f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032f4:	61d3      	str	r3, [r2, #28]
 80032f6:	4b85      	ldr	r3, [pc, #532]	; (800350c <HAL_RCC_OscConfig+0x4c4>)
 80032f8:	69db      	ldr	r3, [r3, #28]
 80032fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032fe:	60bb      	str	r3, [r7, #8]
 8003300:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003302:	2301      	movs	r3, #1
 8003304:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003306:	4b82      	ldr	r3, [pc, #520]	; (8003510 <HAL_RCC_OscConfig+0x4c8>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800330e:	2b00      	cmp	r3, #0
 8003310:	d118      	bne.n	8003344 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003312:	4b7f      	ldr	r3, [pc, #508]	; (8003510 <HAL_RCC_OscConfig+0x4c8>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4a7e      	ldr	r2, [pc, #504]	; (8003510 <HAL_RCC_OscConfig+0x4c8>)
 8003318:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800331c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800331e:	f7fe fb2b 	bl	8001978 <HAL_GetTick>
 8003322:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003324:	e008      	b.n	8003338 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003326:	f7fe fb27 	bl	8001978 <HAL_GetTick>
 800332a:	4602      	mov	r2, r0
 800332c:	693b      	ldr	r3, [r7, #16]
 800332e:	1ad3      	subs	r3, r2, r3
 8003330:	2b64      	cmp	r3, #100	; 0x64
 8003332:	d901      	bls.n	8003338 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003334:	2303      	movs	r3, #3
 8003336:	e103      	b.n	8003540 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003338:	4b75      	ldr	r3, [pc, #468]	; (8003510 <HAL_RCC_OscConfig+0x4c8>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003340:	2b00      	cmp	r3, #0
 8003342:	d0f0      	beq.n	8003326 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	68db      	ldr	r3, [r3, #12]
 8003348:	2b01      	cmp	r3, #1
 800334a:	d106      	bne.n	800335a <HAL_RCC_OscConfig+0x312>
 800334c:	4b6f      	ldr	r3, [pc, #444]	; (800350c <HAL_RCC_OscConfig+0x4c4>)
 800334e:	6a1b      	ldr	r3, [r3, #32]
 8003350:	4a6e      	ldr	r2, [pc, #440]	; (800350c <HAL_RCC_OscConfig+0x4c4>)
 8003352:	f043 0301 	orr.w	r3, r3, #1
 8003356:	6213      	str	r3, [r2, #32]
 8003358:	e02d      	b.n	80033b6 <HAL_RCC_OscConfig+0x36e>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	68db      	ldr	r3, [r3, #12]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d10c      	bne.n	800337c <HAL_RCC_OscConfig+0x334>
 8003362:	4b6a      	ldr	r3, [pc, #424]	; (800350c <HAL_RCC_OscConfig+0x4c4>)
 8003364:	6a1b      	ldr	r3, [r3, #32]
 8003366:	4a69      	ldr	r2, [pc, #420]	; (800350c <HAL_RCC_OscConfig+0x4c4>)
 8003368:	f023 0301 	bic.w	r3, r3, #1
 800336c:	6213      	str	r3, [r2, #32]
 800336e:	4b67      	ldr	r3, [pc, #412]	; (800350c <HAL_RCC_OscConfig+0x4c4>)
 8003370:	6a1b      	ldr	r3, [r3, #32]
 8003372:	4a66      	ldr	r2, [pc, #408]	; (800350c <HAL_RCC_OscConfig+0x4c4>)
 8003374:	f023 0304 	bic.w	r3, r3, #4
 8003378:	6213      	str	r3, [r2, #32]
 800337a:	e01c      	b.n	80033b6 <HAL_RCC_OscConfig+0x36e>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	68db      	ldr	r3, [r3, #12]
 8003380:	2b05      	cmp	r3, #5
 8003382:	d10c      	bne.n	800339e <HAL_RCC_OscConfig+0x356>
 8003384:	4b61      	ldr	r3, [pc, #388]	; (800350c <HAL_RCC_OscConfig+0x4c4>)
 8003386:	6a1b      	ldr	r3, [r3, #32]
 8003388:	4a60      	ldr	r2, [pc, #384]	; (800350c <HAL_RCC_OscConfig+0x4c4>)
 800338a:	f043 0304 	orr.w	r3, r3, #4
 800338e:	6213      	str	r3, [r2, #32]
 8003390:	4b5e      	ldr	r3, [pc, #376]	; (800350c <HAL_RCC_OscConfig+0x4c4>)
 8003392:	6a1b      	ldr	r3, [r3, #32]
 8003394:	4a5d      	ldr	r2, [pc, #372]	; (800350c <HAL_RCC_OscConfig+0x4c4>)
 8003396:	f043 0301 	orr.w	r3, r3, #1
 800339a:	6213      	str	r3, [r2, #32]
 800339c:	e00b      	b.n	80033b6 <HAL_RCC_OscConfig+0x36e>
 800339e:	4b5b      	ldr	r3, [pc, #364]	; (800350c <HAL_RCC_OscConfig+0x4c4>)
 80033a0:	6a1b      	ldr	r3, [r3, #32]
 80033a2:	4a5a      	ldr	r2, [pc, #360]	; (800350c <HAL_RCC_OscConfig+0x4c4>)
 80033a4:	f023 0301 	bic.w	r3, r3, #1
 80033a8:	6213      	str	r3, [r2, #32]
 80033aa:	4b58      	ldr	r3, [pc, #352]	; (800350c <HAL_RCC_OscConfig+0x4c4>)
 80033ac:	6a1b      	ldr	r3, [r3, #32]
 80033ae:	4a57      	ldr	r2, [pc, #348]	; (800350c <HAL_RCC_OscConfig+0x4c4>)
 80033b0:	f023 0304 	bic.w	r3, r3, #4
 80033b4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	68db      	ldr	r3, [r3, #12]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d015      	beq.n	80033ea <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033be:	f7fe fadb 	bl	8001978 <HAL_GetTick>
 80033c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033c4:	e00a      	b.n	80033dc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033c6:	f7fe fad7 	bl	8001978 <HAL_GetTick>
 80033ca:	4602      	mov	r2, r0
 80033cc:	693b      	ldr	r3, [r7, #16]
 80033ce:	1ad3      	subs	r3, r2, r3
 80033d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d901      	bls.n	80033dc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80033d8:	2303      	movs	r3, #3
 80033da:	e0b1      	b.n	8003540 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033dc:	4b4b      	ldr	r3, [pc, #300]	; (800350c <HAL_RCC_OscConfig+0x4c4>)
 80033de:	6a1b      	ldr	r3, [r3, #32]
 80033e0:	f003 0302 	and.w	r3, r3, #2
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d0ee      	beq.n	80033c6 <HAL_RCC_OscConfig+0x37e>
 80033e8:	e014      	b.n	8003414 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033ea:	f7fe fac5 	bl	8001978 <HAL_GetTick>
 80033ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033f0:	e00a      	b.n	8003408 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033f2:	f7fe fac1 	bl	8001978 <HAL_GetTick>
 80033f6:	4602      	mov	r2, r0
 80033f8:	693b      	ldr	r3, [r7, #16]
 80033fa:	1ad3      	subs	r3, r2, r3
 80033fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003400:	4293      	cmp	r3, r2
 8003402:	d901      	bls.n	8003408 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003404:	2303      	movs	r3, #3
 8003406:	e09b      	b.n	8003540 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003408:	4b40      	ldr	r3, [pc, #256]	; (800350c <HAL_RCC_OscConfig+0x4c4>)
 800340a:	6a1b      	ldr	r3, [r3, #32]
 800340c:	f003 0302 	and.w	r3, r3, #2
 8003410:	2b00      	cmp	r3, #0
 8003412:	d1ee      	bne.n	80033f2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003414:	7dfb      	ldrb	r3, [r7, #23]
 8003416:	2b01      	cmp	r3, #1
 8003418:	d105      	bne.n	8003426 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800341a:	4b3c      	ldr	r3, [pc, #240]	; (800350c <HAL_RCC_OscConfig+0x4c4>)
 800341c:	69db      	ldr	r3, [r3, #28]
 800341e:	4a3b      	ldr	r2, [pc, #236]	; (800350c <HAL_RCC_OscConfig+0x4c4>)
 8003420:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003424:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	69db      	ldr	r3, [r3, #28]
 800342a:	2b00      	cmp	r3, #0
 800342c:	f000 8087 	beq.w	800353e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003430:	4b36      	ldr	r3, [pc, #216]	; (800350c <HAL_RCC_OscConfig+0x4c4>)
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	f003 030c 	and.w	r3, r3, #12
 8003438:	2b08      	cmp	r3, #8
 800343a:	d061      	beq.n	8003500 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	69db      	ldr	r3, [r3, #28]
 8003440:	2b02      	cmp	r3, #2
 8003442:	d146      	bne.n	80034d2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003444:	4b33      	ldr	r3, [pc, #204]	; (8003514 <HAL_RCC_OscConfig+0x4cc>)
 8003446:	2200      	movs	r2, #0
 8003448:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800344a:	f7fe fa95 	bl	8001978 <HAL_GetTick>
 800344e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003450:	e008      	b.n	8003464 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003452:	f7fe fa91 	bl	8001978 <HAL_GetTick>
 8003456:	4602      	mov	r2, r0
 8003458:	693b      	ldr	r3, [r7, #16]
 800345a:	1ad3      	subs	r3, r2, r3
 800345c:	2b02      	cmp	r3, #2
 800345e:	d901      	bls.n	8003464 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003460:	2303      	movs	r3, #3
 8003462:	e06d      	b.n	8003540 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003464:	4b29      	ldr	r3, [pc, #164]	; (800350c <HAL_RCC_OscConfig+0x4c4>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800346c:	2b00      	cmp	r3, #0
 800346e:	d1f0      	bne.n	8003452 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6a1b      	ldr	r3, [r3, #32]
 8003474:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003478:	d108      	bne.n	800348c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800347a:	4b24      	ldr	r3, [pc, #144]	; (800350c <HAL_RCC_OscConfig+0x4c4>)
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	689b      	ldr	r3, [r3, #8]
 8003486:	4921      	ldr	r1, [pc, #132]	; (800350c <HAL_RCC_OscConfig+0x4c4>)
 8003488:	4313      	orrs	r3, r2
 800348a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800348c:	4b1f      	ldr	r3, [pc, #124]	; (800350c <HAL_RCC_OscConfig+0x4c4>)
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6a19      	ldr	r1, [r3, #32]
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800349c:	430b      	orrs	r3, r1
 800349e:	491b      	ldr	r1, [pc, #108]	; (800350c <HAL_RCC_OscConfig+0x4c4>)
 80034a0:	4313      	orrs	r3, r2
 80034a2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80034a4:	4b1b      	ldr	r3, [pc, #108]	; (8003514 <HAL_RCC_OscConfig+0x4cc>)
 80034a6:	2201      	movs	r2, #1
 80034a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034aa:	f7fe fa65 	bl	8001978 <HAL_GetTick>
 80034ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80034b0:	e008      	b.n	80034c4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034b2:	f7fe fa61 	bl	8001978 <HAL_GetTick>
 80034b6:	4602      	mov	r2, r0
 80034b8:	693b      	ldr	r3, [r7, #16]
 80034ba:	1ad3      	subs	r3, r2, r3
 80034bc:	2b02      	cmp	r3, #2
 80034be:	d901      	bls.n	80034c4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80034c0:	2303      	movs	r3, #3
 80034c2:	e03d      	b.n	8003540 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80034c4:	4b11      	ldr	r3, [pc, #68]	; (800350c <HAL_RCC_OscConfig+0x4c4>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d0f0      	beq.n	80034b2 <HAL_RCC_OscConfig+0x46a>
 80034d0:	e035      	b.n	800353e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034d2:	4b10      	ldr	r3, [pc, #64]	; (8003514 <HAL_RCC_OscConfig+0x4cc>)
 80034d4:	2200      	movs	r2, #0
 80034d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034d8:	f7fe fa4e 	bl	8001978 <HAL_GetTick>
 80034dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034de:	e008      	b.n	80034f2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034e0:	f7fe fa4a 	bl	8001978 <HAL_GetTick>
 80034e4:	4602      	mov	r2, r0
 80034e6:	693b      	ldr	r3, [r7, #16]
 80034e8:	1ad3      	subs	r3, r2, r3
 80034ea:	2b02      	cmp	r3, #2
 80034ec:	d901      	bls.n	80034f2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80034ee:	2303      	movs	r3, #3
 80034f0:	e026      	b.n	8003540 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034f2:	4b06      	ldr	r3, [pc, #24]	; (800350c <HAL_RCC_OscConfig+0x4c4>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d1f0      	bne.n	80034e0 <HAL_RCC_OscConfig+0x498>
 80034fe:	e01e      	b.n	800353e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	69db      	ldr	r3, [r3, #28]
 8003504:	2b01      	cmp	r3, #1
 8003506:	d107      	bne.n	8003518 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003508:	2301      	movs	r3, #1
 800350a:	e019      	b.n	8003540 <HAL_RCC_OscConfig+0x4f8>
 800350c:	40021000 	.word	0x40021000
 8003510:	40007000 	.word	0x40007000
 8003514:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003518:	4b0b      	ldr	r3, [pc, #44]	; (8003548 <HAL_RCC_OscConfig+0x500>)
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6a1b      	ldr	r3, [r3, #32]
 8003528:	429a      	cmp	r2, r3
 800352a:	d106      	bne.n	800353a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003536:	429a      	cmp	r2, r3
 8003538:	d001      	beq.n	800353e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800353a:	2301      	movs	r3, #1
 800353c:	e000      	b.n	8003540 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800353e:	2300      	movs	r3, #0
}
 8003540:	4618      	mov	r0, r3
 8003542:	3718      	adds	r7, #24
 8003544:	46bd      	mov	sp, r7
 8003546:	bd80      	pop	{r7, pc}
 8003548:	40021000 	.word	0x40021000

0800354c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b084      	sub	sp, #16
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
 8003554:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d101      	bne.n	8003560 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800355c:	2301      	movs	r3, #1
 800355e:	e0d0      	b.n	8003702 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003560:	4b6a      	ldr	r3, [pc, #424]	; (800370c <HAL_RCC_ClockConfig+0x1c0>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f003 0307 	and.w	r3, r3, #7
 8003568:	683a      	ldr	r2, [r7, #0]
 800356a:	429a      	cmp	r2, r3
 800356c:	d910      	bls.n	8003590 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800356e:	4b67      	ldr	r3, [pc, #412]	; (800370c <HAL_RCC_ClockConfig+0x1c0>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f023 0207 	bic.w	r2, r3, #7
 8003576:	4965      	ldr	r1, [pc, #404]	; (800370c <HAL_RCC_ClockConfig+0x1c0>)
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	4313      	orrs	r3, r2
 800357c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800357e:	4b63      	ldr	r3, [pc, #396]	; (800370c <HAL_RCC_ClockConfig+0x1c0>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f003 0307 	and.w	r3, r3, #7
 8003586:	683a      	ldr	r2, [r7, #0]
 8003588:	429a      	cmp	r2, r3
 800358a:	d001      	beq.n	8003590 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800358c:	2301      	movs	r3, #1
 800358e:	e0b8      	b.n	8003702 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f003 0302 	and.w	r3, r3, #2
 8003598:	2b00      	cmp	r3, #0
 800359a:	d020      	beq.n	80035de <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f003 0304 	and.w	r3, r3, #4
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d005      	beq.n	80035b4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80035a8:	4b59      	ldr	r3, [pc, #356]	; (8003710 <HAL_RCC_ClockConfig+0x1c4>)
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	4a58      	ldr	r2, [pc, #352]	; (8003710 <HAL_RCC_ClockConfig+0x1c4>)
 80035ae:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80035b2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f003 0308 	and.w	r3, r3, #8
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d005      	beq.n	80035cc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80035c0:	4b53      	ldr	r3, [pc, #332]	; (8003710 <HAL_RCC_ClockConfig+0x1c4>)
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	4a52      	ldr	r2, [pc, #328]	; (8003710 <HAL_RCC_ClockConfig+0x1c4>)
 80035c6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80035ca:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035cc:	4b50      	ldr	r3, [pc, #320]	; (8003710 <HAL_RCC_ClockConfig+0x1c4>)
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	689b      	ldr	r3, [r3, #8]
 80035d8:	494d      	ldr	r1, [pc, #308]	; (8003710 <HAL_RCC_ClockConfig+0x1c4>)
 80035da:	4313      	orrs	r3, r2
 80035dc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f003 0301 	and.w	r3, r3, #1
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d040      	beq.n	800366c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	2b01      	cmp	r3, #1
 80035f0:	d107      	bne.n	8003602 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035f2:	4b47      	ldr	r3, [pc, #284]	; (8003710 <HAL_RCC_ClockConfig+0x1c4>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d115      	bne.n	800362a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035fe:	2301      	movs	r3, #1
 8003600:	e07f      	b.n	8003702 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	685b      	ldr	r3, [r3, #4]
 8003606:	2b02      	cmp	r3, #2
 8003608:	d107      	bne.n	800361a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800360a:	4b41      	ldr	r3, [pc, #260]	; (8003710 <HAL_RCC_ClockConfig+0x1c4>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003612:	2b00      	cmp	r3, #0
 8003614:	d109      	bne.n	800362a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003616:	2301      	movs	r3, #1
 8003618:	e073      	b.n	8003702 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800361a:	4b3d      	ldr	r3, [pc, #244]	; (8003710 <HAL_RCC_ClockConfig+0x1c4>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f003 0302 	and.w	r3, r3, #2
 8003622:	2b00      	cmp	r3, #0
 8003624:	d101      	bne.n	800362a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003626:	2301      	movs	r3, #1
 8003628:	e06b      	b.n	8003702 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800362a:	4b39      	ldr	r3, [pc, #228]	; (8003710 <HAL_RCC_ClockConfig+0x1c4>)
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	f023 0203 	bic.w	r2, r3, #3
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	4936      	ldr	r1, [pc, #216]	; (8003710 <HAL_RCC_ClockConfig+0x1c4>)
 8003638:	4313      	orrs	r3, r2
 800363a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800363c:	f7fe f99c 	bl	8001978 <HAL_GetTick>
 8003640:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003642:	e00a      	b.n	800365a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003644:	f7fe f998 	bl	8001978 <HAL_GetTick>
 8003648:	4602      	mov	r2, r0
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	1ad3      	subs	r3, r2, r3
 800364e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003652:	4293      	cmp	r3, r2
 8003654:	d901      	bls.n	800365a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003656:	2303      	movs	r3, #3
 8003658:	e053      	b.n	8003702 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800365a:	4b2d      	ldr	r3, [pc, #180]	; (8003710 <HAL_RCC_ClockConfig+0x1c4>)
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	f003 020c 	and.w	r2, r3, #12
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	009b      	lsls	r3, r3, #2
 8003668:	429a      	cmp	r2, r3
 800366a:	d1eb      	bne.n	8003644 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800366c:	4b27      	ldr	r3, [pc, #156]	; (800370c <HAL_RCC_ClockConfig+0x1c0>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f003 0307 	and.w	r3, r3, #7
 8003674:	683a      	ldr	r2, [r7, #0]
 8003676:	429a      	cmp	r2, r3
 8003678:	d210      	bcs.n	800369c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800367a:	4b24      	ldr	r3, [pc, #144]	; (800370c <HAL_RCC_ClockConfig+0x1c0>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f023 0207 	bic.w	r2, r3, #7
 8003682:	4922      	ldr	r1, [pc, #136]	; (800370c <HAL_RCC_ClockConfig+0x1c0>)
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	4313      	orrs	r3, r2
 8003688:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800368a:	4b20      	ldr	r3, [pc, #128]	; (800370c <HAL_RCC_ClockConfig+0x1c0>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f003 0307 	and.w	r3, r3, #7
 8003692:	683a      	ldr	r2, [r7, #0]
 8003694:	429a      	cmp	r2, r3
 8003696:	d001      	beq.n	800369c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003698:	2301      	movs	r3, #1
 800369a:	e032      	b.n	8003702 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f003 0304 	and.w	r3, r3, #4
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d008      	beq.n	80036ba <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80036a8:	4b19      	ldr	r3, [pc, #100]	; (8003710 <HAL_RCC_ClockConfig+0x1c4>)
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	68db      	ldr	r3, [r3, #12]
 80036b4:	4916      	ldr	r1, [pc, #88]	; (8003710 <HAL_RCC_ClockConfig+0x1c4>)
 80036b6:	4313      	orrs	r3, r2
 80036b8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f003 0308 	and.w	r3, r3, #8
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d009      	beq.n	80036da <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80036c6:	4b12      	ldr	r3, [pc, #72]	; (8003710 <HAL_RCC_ClockConfig+0x1c4>)
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	691b      	ldr	r3, [r3, #16]
 80036d2:	00db      	lsls	r3, r3, #3
 80036d4:	490e      	ldr	r1, [pc, #56]	; (8003710 <HAL_RCC_ClockConfig+0x1c4>)
 80036d6:	4313      	orrs	r3, r2
 80036d8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80036da:	f000 f821 	bl	8003720 <HAL_RCC_GetSysClockFreq>
 80036de:	4602      	mov	r2, r0
 80036e0:	4b0b      	ldr	r3, [pc, #44]	; (8003710 <HAL_RCC_ClockConfig+0x1c4>)
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	091b      	lsrs	r3, r3, #4
 80036e6:	f003 030f 	and.w	r3, r3, #15
 80036ea:	490a      	ldr	r1, [pc, #40]	; (8003714 <HAL_RCC_ClockConfig+0x1c8>)
 80036ec:	5ccb      	ldrb	r3, [r1, r3]
 80036ee:	fa22 f303 	lsr.w	r3, r2, r3
 80036f2:	4a09      	ldr	r2, [pc, #36]	; (8003718 <HAL_RCC_ClockConfig+0x1cc>)
 80036f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80036f6:	4b09      	ldr	r3, [pc, #36]	; (800371c <HAL_RCC_ClockConfig+0x1d0>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4618      	mov	r0, r3
 80036fc:	f7fe f8fa 	bl	80018f4 <HAL_InitTick>

  return HAL_OK;
 8003700:	2300      	movs	r3, #0
}
 8003702:	4618      	mov	r0, r3
 8003704:	3710      	adds	r7, #16
 8003706:	46bd      	mov	sp, r7
 8003708:	bd80      	pop	{r7, pc}
 800370a:	bf00      	nop
 800370c:	40022000 	.word	0x40022000
 8003710:	40021000 	.word	0x40021000
 8003714:	080051b0 	.word	0x080051b0
 8003718:	20000004 	.word	0x20000004
 800371c:	20000008 	.word	0x20000008

08003720 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003720:	b480      	push	{r7}
 8003722:	b087      	sub	sp, #28
 8003724:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003726:	2300      	movs	r3, #0
 8003728:	60fb      	str	r3, [r7, #12]
 800372a:	2300      	movs	r3, #0
 800372c:	60bb      	str	r3, [r7, #8]
 800372e:	2300      	movs	r3, #0
 8003730:	617b      	str	r3, [r7, #20]
 8003732:	2300      	movs	r3, #0
 8003734:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003736:	2300      	movs	r3, #0
 8003738:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800373a:	4b1e      	ldr	r3, [pc, #120]	; (80037b4 <HAL_RCC_GetSysClockFreq+0x94>)
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	f003 030c 	and.w	r3, r3, #12
 8003746:	2b04      	cmp	r3, #4
 8003748:	d002      	beq.n	8003750 <HAL_RCC_GetSysClockFreq+0x30>
 800374a:	2b08      	cmp	r3, #8
 800374c:	d003      	beq.n	8003756 <HAL_RCC_GetSysClockFreq+0x36>
 800374e:	e027      	b.n	80037a0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003750:	4b19      	ldr	r3, [pc, #100]	; (80037b8 <HAL_RCC_GetSysClockFreq+0x98>)
 8003752:	613b      	str	r3, [r7, #16]
      break;
 8003754:	e027      	b.n	80037a6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	0c9b      	lsrs	r3, r3, #18
 800375a:	f003 030f 	and.w	r3, r3, #15
 800375e:	4a17      	ldr	r2, [pc, #92]	; (80037bc <HAL_RCC_GetSysClockFreq+0x9c>)
 8003760:	5cd3      	ldrb	r3, [r2, r3]
 8003762:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800376a:	2b00      	cmp	r3, #0
 800376c:	d010      	beq.n	8003790 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800376e:	4b11      	ldr	r3, [pc, #68]	; (80037b4 <HAL_RCC_GetSysClockFreq+0x94>)
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	0c5b      	lsrs	r3, r3, #17
 8003774:	f003 0301 	and.w	r3, r3, #1
 8003778:	4a11      	ldr	r2, [pc, #68]	; (80037c0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800377a:	5cd3      	ldrb	r3, [r2, r3]
 800377c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	4a0d      	ldr	r2, [pc, #52]	; (80037b8 <HAL_RCC_GetSysClockFreq+0x98>)
 8003782:	fb03 f202 	mul.w	r2, r3, r2
 8003786:	68bb      	ldr	r3, [r7, #8]
 8003788:	fbb2 f3f3 	udiv	r3, r2, r3
 800378c:	617b      	str	r3, [r7, #20]
 800378e:	e004      	b.n	800379a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	4a0c      	ldr	r2, [pc, #48]	; (80037c4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003794:	fb02 f303 	mul.w	r3, r2, r3
 8003798:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800379a:	697b      	ldr	r3, [r7, #20]
 800379c:	613b      	str	r3, [r7, #16]
      break;
 800379e:	e002      	b.n	80037a6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80037a0:	4b05      	ldr	r3, [pc, #20]	; (80037b8 <HAL_RCC_GetSysClockFreq+0x98>)
 80037a2:	613b      	str	r3, [r7, #16]
      break;
 80037a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80037a6:	693b      	ldr	r3, [r7, #16]
}
 80037a8:	4618      	mov	r0, r3
 80037aa:	371c      	adds	r7, #28
 80037ac:	46bd      	mov	sp, r7
 80037ae:	bc80      	pop	{r7}
 80037b0:	4770      	bx	lr
 80037b2:	bf00      	nop
 80037b4:	40021000 	.word	0x40021000
 80037b8:	007a1200 	.word	0x007a1200
 80037bc:	080051c8 	.word	0x080051c8
 80037c0:	080051d8 	.word	0x080051d8
 80037c4:	003d0900 	.word	0x003d0900

080037c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80037c8:	b480      	push	{r7}
 80037ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80037cc:	4b02      	ldr	r3, [pc, #8]	; (80037d8 <HAL_RCC_GetHCLKFreq+0x10>)
 80037ce:	681b      	ldr	r3, [r3, #0]
}
 80037d0:	4618      	mov	r0, r3
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bc80      	pop	{r7}
 80037d6:	4770      	bx	lr
 80037d8:	20000004 	.word	0x20000004

080037dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80037e0:	f7ff fff2 	bl	80037c8 <HAL_RCC_GetHCLKFreq>
 80037e4:	4602      	mov	r2, r0
 80037e6:	4b05      	ldr	r3, [pc, #20]	; (80037fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	0a1b      	lsrs	r3, r3, #8
 80037ec:	f003 0307 	and.w	r3, r3, #7
 80037f0:	4903      	ldr	r1, [pc, #12]	; (8003800 <HAL_RCC_GetPCLK1Freq+0x24>)
 80037f2:	5ccb      	ldrb	r3, [r1, r3]
 80037f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037f8:	4618      	mov	r0, r3
 80037fa:	bd80      	pop	{r7, pc}
 80037fc:	40021000 	.word	0x40021000
 8003800:	080051c0 	.word	0x080051c0

08003804 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003808:	f7ff ffde 	bl	80037c8 <HAL_RCC_GetHCLKFreq>
 800380c:	4602      	mov	r2, r0
 800380e:	4b05      	ldr	r3, [pc, #20]	; (8003824 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003810:	685b      	ldr	r3, [r3, #4]
 8003812:	0adb      	lsrs	r3, r3, #11
 8003814:	f003 0307 	and.w	r3, r3, #7
 8003818:	4903      	ldr	r1, [pc, #12]	; (8003828 <HAL_RCC_GetPCLK2Freq+0x24>)
 800381a:	5ccb      	ldrb	r3, [r1, r3]
 800381c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003820:	4618      	mov	r0, r3
 8003822:	bd80      	pop	{r7, pc}
 8003824:	40021000 	.word	0x40021000
 8003828:	080051c0 	.word	0x080051c0

0800382c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800382c:	b480      	push	{r7}
 800382e:	b085      	sub	sp, #20
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003834:	4b0a      	ldr	r3, [pc, #40]	; (8003860 <RCC_Delay+0x34>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4a0a      	ldr	r2, [pc, #40]	; (8003864 <RCC_Delay+0x38>)
 800383a:	fba2 2303 	umull	r2, r3, r2, r3
 800383e:	0a5b      	lsrs	r3, r3, #9
 8003840:	687a      	ldr	r2, [r7, #4]
 8003842:	fb02 f303 	mul.w	r3, r2, r3
 8003846:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003848:	bf00      	nop
  }
  while (Delay --);
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	1e5a      	subs	r2, r3, #1
 800384e:	60fa      	str	r2, [r7, #12]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d1f9      	bne.n	8003848 <RCC_Delay+0x1c>
}
 8003854:	bf00      	nop
 8003856:	bf00      	nop
 8003858:	3714      	adds	r7, #20
 800385a:	46bd      	mov	sp, r7
 800385c:	bc80      	pop	{r7}
 800385e:	4770      	bx	lr
 8003860:	20000004 	.word	0x20000004
 8003864:	10624dd3 	.word	0x10624dd3

08003868 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b082      	sub	sp, #8
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d101      	bne.n	800387a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003876:	2301      	movs	r3, #1
 8003878:	e076      	b.n	8003968 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800387e:	2b00      	cmp	r3, #0
 8003880:	d108      	bne.n	8003894 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800388a:	d009      	beq.n	80038a0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2200      	movs	r2, #0
 8003890:	61da      	str	r2, [r3, #28]
 8003892:	e005      	b.n	80038a0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2200      	movs	r2, #0
 8003898:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2200      	movs	r2, #0
 800389e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2200      	movs	r2, #0
 80038a4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80038ac:	b2db      	uxtb	r3, r3
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d106      	bne.n	80038c0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2200      	movs	r2, #0
 80038b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80038ba:	6878      	ldr	r0, [r7, #4]
 80038bc:	f7fd fe88 	bl	80015d0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2202      	movs	r2, #2
 80038c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	681a      	ldr	r2, [r3, #0]
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80038d6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	689b      	ldr	r3, [r3, #8]
 80038e4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80038e8:	431a      	orrs	r2, r3
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	68db      	ldr	r3, [r3, #12]
 80038ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038f2:	431a      	orrs	r2, r3
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	691b      	ldr	r3, [r3, #16]
 80038f8:	f003 0302 	and.w	r3, r3, #2
 80038fc:	431a      	orrs	r2, r3
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	695b      	ldr	r3, [r3, #20]
 8003902:	f003 0301 	and.w	r3, r3, #1
 8003906:	431a      	orrs	r2, r3
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	699b      	ldr	r3, [r3, #24]
 800390c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003910:	431a      	orrs	r2, r3
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	69db      	ldr	r3, [r3, #28]
 8003916:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800391a:	431a      	orrs	r2, r3
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6a1b      	ldr	r3, [r3, #32]
 8003920:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003924:	ea42 0103 	orr.w	r1, r2, r3
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800392c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	430a      	orrs	r2, r1
 8003936:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	699b      	ldr	r3, [r3, #24]
 800393c:	0c1a      	lsrs	r2, r3, #16
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f002 0204 	and.w	r2, r2, #4
 8003946:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	69da      	ldr	r2, [r3, #28]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003956:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2200      	movs	r2, #0
 800395c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2201      	movs	r2, #1
 8003962:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003966:	2300      	movs	r3, #0
}
 8003968:	4618      	mov	r0, r3
 800396a:	3708      	adds	r7, #8
 800396c:	46bd      	mov	sp, r7
 800396e:	bd80      	pop	{r7, pc}

08003970 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b088      	sub	sp, #32
 8003974:	af00      	add	r7, sp, #0
 8003976:	60f8      	str	r0, [r7, #12]
 8003978:	60b9      	str	r1, [r7, #8]
 800397a:	603b      	str	r3, [r7, #0]
 800397c:	4613      	mov	r3, r2
 800397e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003980:	2300      	movs	r3, #0
 8003982:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800398a:	2b01      	cmp	r3, #1
 800398c:	d101      	bne.n	8003992 <HAL_SPI_Transmit+0x22>
 800398e:	2302      	movs	r3, #2
 8003990:	e12d      	b.n	8003bee <HAL_SPI_Transmit+0x27e>
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	2201      	movs	r2, #1
 8003996:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800399a:	f7fd ffed 	bl	8001978 <HAL_GetTick>
 800399e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80039a0:	88fb      	ldrh	r3, [r7, #6]
 80039a2:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80039aa:	b2db      	uxtb	r3, r3
 80039ac:	2b01      	cmp	r3, #1
 80039ae:	d002      	beq.n	80039b6 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80039b0:	2302      	movs	r3, #2
 80039b2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80039b4:	e116      	b.n	8003be4 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 80039b6:	68bb      	ldr	r3, [r7, #8]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d002      	beq.n	80039c2 <HAL_SPI_Transmit+0x52>
 80039bc:	88fb      	ldrh	r3, [r7, #6]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d102      	bne.n	80039c8 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80039c2:	2301      	movs	r3, #1
 80039c4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80039c6:	e10d      	b.n	8003be4 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	2203      	movs	r2, #3
 80039cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	2200      	movs	r2, #0
 80039d4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	68ba      	ldr	r2, [r7, #8]
 80039da:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	88fa      	ldrh	r2, [r7, #6]
 80039e0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	88fa      	ldrh	r2, [r7, #6]
 80039e6:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	2200      	movs	r2, #0
 80039ec:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	2200      	movs	r2, #0
 80039f2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	2200      	movs	r2, #0
 80039f8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	2200      	movs	r2, #0
 80039fe:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	2200      	movs	r2, #0
 8003a04:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	689b      	ldr	r3, [r3, #8]
 8003a0a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a0e:	d10f      	bne.n	8003a30 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	681a      	ldr	r2, [r3, #0]
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a1e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	681a      	ldr	r2, [r3, #0]
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003a2e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a3a:	2b40      	cmp	r3, #64	; 0x40
 8003a3c:	d007      	beq.n	8003a4e <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	681a      	ldr	r2, [r3, #0]
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003a4c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	68db      	ldr	r3, [r3, #12]
 8003a52:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a56:	d14f      	bne.n	8003af8 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d002      	beq.n	8003a66 <HAL_SPI_Transmit+0xf6>
 8003a60:	8afb      	ldrh	r3, [r7, #22]
 8003a62:	2b01      	cmp	r3, #1
 8003a64:	d142      	bne.n	8003aec <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a6a:	881a      	ldrh	r2, [r3, #0]
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a76:	1c9a      	adds	r2, r3, #2
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a80:	b29b      	uxth	r3, r3
 8003a82:	3b01      	subs	r3, #1
 8003a84:	b29a      	uxth	r2, r3
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003a8a:	e02f      	b.n	8003aec <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	689b      	ldr	r3, [r3, #8]
 8003a92:	f003 0302 	and.w	r3, r3, #2
 8003a96:	2b02      	cmp	r3, #2
 8003a98:	d112      	bne.n	8003ac0 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a9e:	881a      	ldrh	r2, [r3, #0]
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aaa:	1c9a      	adds	r2, r3, #2
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ab4:	b29b      	uxth	r3, r3
 8003ab6:	3b01      	subs	r3, #1
 8003ab8:	b29a      	uxth	r2, r3
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	86da      	strh	r2, [r3, #54]	; 0x36
 8003abe:	e015      	b.n	8003aec <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003ac0:	f7fd ff5a 	bl	8001978 <HAL_GetTick>
 8003ac4:	4602      	mov	r2, r0
 8003ac6:	69bb      	ldr	r3, [r7, #24]
 8003ac8:	1ad3      	subs	r3, r2, r3
 8003aca:	683a      	ldr	r2, [r7, #0]
 8003acc:	429a      	cmp	r2, r3
 8003ace:	d803      	bhi.n	8003ad8 <HAL_SPI_Transmit+0x168>
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ad6:	d102      	bne.n	8003ade <HAL_SPI_Transmit+0x16e>
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d106      	bne.n	8003aec <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8003ade:	2303      	movs	r3, #3
 8003ae0:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	2201      	movs	r2, #1
 8003ae6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8003aea:	e07b      	b.n	8003be4 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003af0:	b29b      	uxth	r3, r3
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d1ca      	bne.n	8003a8c <HAL_SPI_Transmit+0x11c>
 8003af6:	e050      	b.n	8003b9a <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d002      	beq.n	8003b06 <HAL_SPI_Transmit+0x196>
 8003b00:	8afb      	ldrh	r3, [r7, #22]
 8003b02:	2b01      	cmp	r3, #1
 8003b04:	d144      	bne.n	8003b90 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	330c      	adds	r3, #12
 8003b10:	7812      	ldrb	r2, [r2, #0]
 8003b12:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b18:	1c5a      	adds	r2, r3, #1
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b22:	b29b      	uxth	r3, r3
 8003b24:	3b01      	subs	r3, #1
 8003b26:	b29a      	uxth	r2, r3
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003b2c:	e030      	b.n	8003b90 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	689b      	ldr	r3, [r3, #8]
 8003b34:	f003 0302 	and.w	r3, r3, #2
 8003b38:	2b02      	cmp	r3, #2
 8003b3a:	d113      	bne.n	8003b64 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	330c      	adds	r3, #12
 8003b46:	7812      	ldrb	r2, [r2, #0]
 8003b48:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b4e:	1c5a      	adds	r2, r3, #1
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b58:	b29b      	uxth	r3, r3
 8003b5a:	3b01      	subs	r3, #1
 8003b5c:	b29a      	uxth	r2, r3
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	86da      	strh	r2, [r3, #54]	; 0x36
 8003b62:	e015      	b.n	8003b90 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003b64:	f7fd ff08 	bl	8001978 <HAL_GetTick>
 8003b68:	4602      	mov	r2, r0
 8003b6a:	69bb      	ldr	r3, [r7, #24]
 8003b6c:	1ad3      	subs	r3, r2, r3
 8003b6e:	683a      	ldr	r2, [r7, #0]
 8003b70:	429a      	cmp	r2, r3
 8003b72:	d803      	bhi.n	8003b7c <HAL_SPI_Transmit+0x20c>
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b7a:	d102      	bne.n	8003b82 <HAL_SPI_Transmit+0x212>
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d106      	bne.n	8003b90 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8003b82:	2303      	movs	r3, #3
 8003b84:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	2201      	movs	r2, #1
 8003b8a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8003b8e:	e029      	b.n	8003be4 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b94:	b29b      	uxth	r3, r3
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d1c9      	bne.n	8003b2e <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003b9a:	69ba      	ldr	r2, [r7, #24]
 8003b9c:	6839      	ldr	r1, [r7, #0]
 8003b9e:	68f8      	ldr	r0, [r7, #12]
 8003ba0:	f000 fbcc 	bl	800433c <SPI_EndRxTxTransaction>
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d002      	beq.n	8003bb0 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	2220      	movs	r2, #32
 8003bae:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	689b      	ldr	r3, [r3, #8]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d10a      	bne.n	8003bce <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003bb8:	2300      	movs	r3, #0
 8003bba:	613b      	str	r3, [r7, #16]
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	68db      	ldr	r3, [r3, #12]
 8003bc2:	613b      	str	r3, [r7, #16]
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	689b      	ldr	r3, [r3, #8]
 8003bca:	613b      	str	r3, [r7, #16]
 8003bcc:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d002      	beq.n	8003bdc <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	77fb      	strb	r3, [r7, #31]
 8003bda:	e003      	b.n	8003be4 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	2201      	movs	r2, #1
 8003be0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	2200      	movs	r2, #0
 8003be8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003bec:	7ffb      	ldrb	r3, [r7, #31]
}
 8003bee:	4618      	mov	r0, r3
 8003bf0:	3720      	adds	r7, #32
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bd80      	pop	{r7, pc}

08003bf6 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003bf6:	b580      	push	{r7, lr}
 8003bf8:	b088      	sub	sp, #32
 8003bfa:	af02      	add	r7, sp, #8
 8003bfc:	60f8      	str	r0, [r7, #12]
 8003bfe:	60b9      	str	r1, [r7, #8]
 8003c00:	603b      	str	r3, [r7, #0]
 8003c02:	4613      	mov	r3, r2
 8003c04:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003c06:	2300      	movs	r3, #0
 8003c08:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003c10:	b2db      	uxtb	r3, r3
 8003c12:	2b01      	cmp	r3, #1
 8003c14:	d002      	beq.n	8003c1c <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8003c16:	2302      	movs	r3, #2
 8003c18:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003c1a:	e0fb      	b.n	8003e14 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	685b      	ldr	r3, [r3, #4]
 8003c20:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003c24:	d112      	bne.n	8003c4c <HAL_SPI_Receive+0x56>
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	689b      	ldr	r3, [r3, #8]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d10e      	bne.n	8003c4c <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	2204      	movs	r2, #4
 8003c32:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003c36:	88fa      	ldrh	r2, [r7, #6]
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	9300      	str	r3, [sp, #0]
 8003c3c:	4613      	mov	r3, r2
 8003c3e:	68ba      	ldr	r2, [r7, #8]
 8003c40:	68b9      	ldr	r1, [r7, #8]
 8003c42:	68f8      	ldr	r0, [r7, #12]
 8003c44:	f000 f8ef 	bl	8003e26 <HAL_SPI_TransmitReceive>
 8003c48:	4603      	mov	r3, r0
 8003c4a:	e0e8      	b.n	8003e1e <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003c52:	2b01      	cmp	r3, #1
 8003c54:	d101      	bne.n	8003c5a <HAL_SPI_Receive+0x64>
 8003c56:	2302      	movs	r3, #2
 8003c58:	e0e1      	b.n	8003e1e <HAL_SPI_Receive+0x228>
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	2201      	movs	r2, #1
 8003c5e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003c62:	f7fd fe89 	bl	8001978 <HAL_GetTick>
 8003c66:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8003c68:	68bb      	ldr	r3, [r7, #8]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d002      	beq.n	8003c74 <HAL_SPI_Receive+0x7e>
 8003c6e:	88fb      	ldrh	r3, [r7, #6]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d102      	bne.n	8003c7a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003c74:	2301      	movs	r3, #1
 8003c76:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003c78:	e0cc      	b.n	8003e14 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	2204      	movs	r2, #4
 8003c7e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	2200      	movs	r2, #0
 8003c86:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	68ba      	ldr	r2, [r7, #8]
 8003c8c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	88fa      	ldrh	r2, [r7, #6]
 8003c92:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	88fa      	ldrh	r2, [r7, #6]
 8003c98:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	2200      	movs	r2, #0
 8003caa:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	2200      	movs	r2, #0
 8003cb0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	689b      	ldr	r3, [r3, #8]
 8003cbc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003cc0:	d10f      	bne.n	8003ce2 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	681a      	ldr	r2, [r3, #0]
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003cd0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	681a      	ldr	r2, [r3, #0]
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003ce0:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cec:	2b40      	cmp	r3, #64	; 0x40
 8003cee:	d007      	beq.n	8003d00 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	681a      	ldr	r2, [r3, #0]
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003cfe:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	68db      	ldr	r3, [r3, #12]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d16a      	bne.n	8003dde <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003d08:	e032      	b.n	8003d70 <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	689b      	ldr	r3, [r3, #8]
 8003d10:	f003 0301 	and.w	r3, r3, #1
 8003d14:	2b01      	cmp	r3, #1
 8003d16:	d115      	bne.n	8003d44 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f103 020c 	add.w	r2, r3, #12
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d24:	7812      	ldrb	r2, [r2, #0]
 8003d26:	b2d2      	uxtb	r2, r2
 8003d28:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d2e:	1c5a      	adds	r2, r3, #1
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d38:	b29b      	uxth	r3, r3
 8003d3a:	3b01      	subs	r3, #1
 8003d3c:	b29a      	uxth	r2, r3
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003d42:	e015      	b.n	8003d70 <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003d44:	f7fd fe18 	bl	8001978 <HAL_GetTick>
 8003d48:	4602      	mov	r2, r0
 8003d4a:	693b      	ldr	r3, [r7, #16]
 8003d4c:	1ad3      	subs	r3, r2, r3
 8003d4e:	683a      	ldr	r2, [r7, #0]
 8003d50:	429a      	cmp	r2, r3
 8003d52:	d803      	bhi.n	8003d5c <HAL_SPI_Receive+0x166>
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d5a:	d102      	bne.n	8003d62 <HAL_SPI_Receive+0x16c>
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d106      	bne.n	8003d70 <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 8003d62:	2303      	movs	r3, #3
 8003d64:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	2201      	movs	r2, #1
 8003d6a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8003d6e:	e051      	b.n	8003e14 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d74:	b29b      	uxth	r3, r3
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d1c7      	bne.n	8003d0a <HAL_SPI_Receive+0x114>
 8003d7a:	e035      	b.n	8003de8 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	689b      	ldr	r3, [r3, #8]
 8003d82:	f003 0301 	and.w	r3, r3, #1
 8003d86:	2b01      	cmp	r3, #1
 8003d88:	d113      	bne.n	8003db2 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	68da      	ldr	r2, [r3, #12]
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d94:	b292      	uxth	r2, r2
 8003d96:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d9c:	1c9a      	adds	r2, r3, #2
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003da6:	b29b      	uxth	r3, r3
 8003da8:	3b01      	subs	r3, #1
 8003daa:	b29a      	uxth	r2, r3
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003db0:	e015      	b.n	8003dde <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003db2:	f7fd fde1 	bl	8001978 <HAL_GetTick>
 8003db6:	4602      	mov	r2, r0
 8003db8:	693b      	ldr	r3, [r7, #16]
 8003dba:	1ad3      	subs	r3, r2, r3
 8003dbc:	683a      	ldr	r2, [r7, #0]
 8003dbe:	429a      	cmp	r2, r3
 8003dc0:	d803      	bhi.n	8003dca <HAL_SPI_Receive+0x1d4>
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dc8:	d102      	bne.n	8003dd0 <HAL_SPI_Receive+0x1da>
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d106      	bne.n	8003dde <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 8003dd0:	2303      	movs	r3, #3
 8003dd2:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	2201      	movs	r2, #1
 8003dd8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8003ddc:	e01a      	b.n	8003e14 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003de2:	b29b      	uxth	r3, r3
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d1c9      	bne.n	8003d7c <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003de8:	693a      	ldr	r2, [r7, #16]
 8003dea:	6839      	ldr	r1, [r7, #0]
 8003dec:	68f8      	ldr	r0, [r7, #12]
 8003dee:	f000 fa53 	bl	8004298 <SPI_EndRxTransaction>
 8003df2:	4603      	mov	r3, r0
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d002      	beq.n	8003dfe <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	2220      	movs	r2, #32
 8003dfc:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d002      	beq.n	8003e0c <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 8003e06:	2301      	movs	r3, #1
 8003e08:	75fb      	strb	r3, [r7, #23]
 8003e0a:	e003      	b.n	8003e14 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	2201      	movs	r2, #1
 8003e10:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	2200      	movs	r2, #0
 8003e18:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003e1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e1e:	4618      	mov	r0, r3
 8003e20:	3718      	adds	r7, #24
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bd80      	pop	{r7, pc}

08003e26 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003e26:	b580      	push	{r7, lr}
 8003e28:	b08c      	sub	sp, #48	; 0x30
 8003e2a:	af00      	add	r7, sp, #0
 8003e2c:	60f8      	str	r0, [r7, #12]
 8003e2e:	60b9      	str	r1, [r7, #8]
 8003e30:	607a      	str	r2, [r7, #4]
 8003e32:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003e34:	2301      	movs	r3, #1
 8003e36:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003e38:	2300      	movs	r3, #0
 8003e3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003e44:	2b01      	cmp	r3, #1
 8003e46:	d101      	bne.n	8003e4c <HAL_SPI_TransmitReceive+0x26>
 8003e48:	2302      	movs	r3, #2
 8003e4a:	e198      	b.n	800417e <HAL_SPI_TransmitReceive+0x358>
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	2201      	movs	r2, #1
 8003e50:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003e54:	f7fd fd90 	bl	8001978 <HAL_GetTick>
 8003e58:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003e60:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003e6a:	887b      	ldrh	r3, [r7, #2]
 8003e6c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003e6e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003e72:	2b01      	cmp	r3, #1
 8003e74:	d00f      	beq.n	8003e96 <HAL_SPI_TransmitReceive+0x70>
 8003e76:	69fb      	ldr	r3, [r7, #28]
 8003e78:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e7c:	d107      	bne.n	8003e8e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	689b      	ldr	r3, [r3, #8]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d103      	bne.n	8003e8e <HAL_SPI_TransmitReceive+0x68>
 8003e86:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003e8a:	2b04      	cmp	r3, #4
 8003e8c:	d003      	beq.n	8003e96 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003e8e:	2302      	movs	r3, #2
 8003e90:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003e94:	e16d      	b.n	8004172 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003e96:	68bb      	ldr	r3, [r7, #8]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d005      	beq.n	8003ea8 <HAL_SPI_TransmitReceive+0x82>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d002      	beq.n	8003ea8 <HAL_SPI_TransmitReceive+0x82>
 8003ea2:	887b      	ldrh	r3, [r7, #2]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d103      	bne.n	8003eb0 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003eae:	e160      	b.n	8004172 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003eb6:	b2db      	uxtb	r3, r3
 8003eb8:	2b04      	cmp	r3, #4
 8003eba:	d003      	beq.n	8003ec4 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	2205      	movs	r2, #5
 8003ec0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	687a      	ldr	r2, [r7, #4]
 8003ece:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	887a      	ldrh	r2, [r7, #2]
 8003ed4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	887a      	ldrh	r2, [r7, #2]
 8003eda:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	68ba      	ldr	r2, [r7, #8]
 8003ee0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	887a      	ldrh	r2, [r7, #2]
 8003ee6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	887a      	ldrh	r2, [r7, #2]
 8003eec:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f04:	2b40      	cmp	r3, #64	; 0x40
 8003f06:	d007      	beq.n	8003f18 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	681a      	ldr	r2, [r3, #0]
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003f16:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	68db      	ldr	r3, [r3, #12]
 8003f1c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f20:	d17c      	bne.n	800401c <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	685b      	ldr	r3, [r3, #4]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d002      	beq.n	8003f30 <HAL_SPI_TransmitReceive+0x10a>
 8003f2a:	8b7b      	ldrh	r3, [r7, #26]
 8003f2c:	2b01      	cmp	r3, #1
 8003f2e:	d16a      	bne.n	8004006 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f34:	881a      	ldrh	r2, [r3, #0]
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f40:	1c9a      	adds	r2, r3, #2
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f4a:	b29b      	uxth	r3, r3
 8003f4c:	3b01      	subs	r3, #1
 8003f4e:	b29a      	uxth	r2, r3
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003f54:	e057      	b.n	8004006 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	689b      	ldr	r3, [r3, #8]
 8003f5c:	f003 0302 	and.w	r3, r3, #2
 8003f60:	2b02      	cmp	r3, #2
 8003f62:	d11b      	bne.n	8003f9c <HAL_SPI_TransmitReceive+0x176>
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f68:	b29b      	uxth	r3, r3
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d016      	beq.n	8003f9c <HAL_SPI_TransmitReceive+0x176>
 8003f6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f70:	2b01      	cmp	r3, #1
 8003f72:	d113      	bne.n	8003f9c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f78:	881a      	ldrh	r2, [r3, #0]
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f84:	1c9a      	adds	r2, r3, #2
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f8e:	b29b      	uxth	r3, r3
 8003f90:	3b01      	subs	r3, #1
 8003f92:	b29a      	uxth	r2, r3
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003f98:	2300      	movs	r3, #0
 8003f9a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	689b      	ldr	r3, [r3, #8]
 8003fa2:	f003 0301 	and.w	r3, r3, #1
 8003fa6:	2b01      	cmp	r3, #1
 8003fa8:	d119      	bne.n	8003fde <HAL_SPI_TransmitReceive+0x1b8>
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fae:	b29b      	uxth	r3, r3
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d014      	beq.n	8003fde <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	68da      	ldr	r2, [r3, #12]
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fbe:	b292      	uxth	r2, r2
 8003fc0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fc6:	1c9a      	adds	r2, r3, #2
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fd0:	b29b      	uxth	r3, r3
 8003fd2:	3b01      	subs	r3, #1
 8003fd4:	b29a      	uxth	r2, r3
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003fda:	2301      	movs	r3, #1
 8003fdc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003fde:	f7fd fccb 	bl	8001978 <HAL_GetTick>
 8003fe2:	4602      	mov	r2, r0
 8003fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fe6:	1ad3      	subs	r3, r2, r3
 8003fe8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003fea:	429a      	cmp	r2, r3
 8003fec:	d80b      	bhi.n	8004006 <HAL_SPI_TransmitReceive+0x1e0>
 8003fee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ff0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ff4:	d007      	beq.n	8004006 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8003ff6:	2303      	movs	r3, #3
 8003ff8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	2201      	movs	r2, #1
 8004000:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8004004:	e0b5      	b.n	8004172 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800400a:	b29b      	uxth	r3, r3
 800400c:	2b00      	cmp	r3, #0
 800400e:	d1a2      	bne.n	8003f56 <HAL_SPI_TransmitReceive+0x130>
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004014:	b29b      	uxth	r3, r3
 8004016:	2b00      	cmp	r3, #0
 8004018:	d19d      	bne.n	8003f56 <HAL_SPI_TransmitReceive+0x130>
 800401a:	e080      	b.n	800411e <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	685b      	ldr	r3, [r3, #4]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d002      	beq.n	800402a <HAL_SPI_TransmitReceive+0x204>
 8004024:	8b7b      	ldrh	r3, [r7, #26]
 8004026:	2b01      	cmp	r3, #1
 8004028:	d16f      	bne.n	800410a <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	330c      	adds	r3, #12
 8004034:	7812      	ldrb	r2, [r2, #0]
 8004036:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800403c:	1c5a      	adds	r2, r3, #1
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004046:	b29b      	uxth	r3, r3
 8004048:	3b01      	subs	r3, #1
 800404a:	b29a      	uxth	r2, r3
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004050:	e05b      	b.n	800410a <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	689b      	ldr	r3, [r3, #8]
 8004058:	f003 0302 	and.w	r3, r3, #2
 800405c:	2b02      	cmp	r3, #2
 800405e:	d11c      	bne.n	800409a <HAL_SPI_TransmitReceive+0x274>
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004064:	b29b      	uxth	r3, r3
 8004066:	2b00      	cmp	r3, #0
 8004068:	d017      	beq.n	800409a <HAL_SPI_TransmitReceive+0x274>
 800406a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800406c:	2b01      	cmp	r3, #1
 800406e:	d114      	bne.n	800409a <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	330c      	adds	r3, #12
 800407a:	7812      	ldrb	r2, [r2, #0]
 800407c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004082:	1c5a      	adds	r2, r3, #1
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800408c:	b29b      	uxth	r3, r3
 800408e:	3b01      	subs	r3, #1
 8004090:	b29a      	uxth	r2, r3
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004096:	2300      	movs	r3, #0
 8004098:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	689b      	ldr	r3, [r3, #8]
 80040a0:	f003 0301 	and.w	r3, r3, #1
 80040a4:	2b01      	cmp	r3, #1
 80040a6:	d119      	bne.n	80040dc <HAL_SPI_TransmitReceive+0x2b6>
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040ac:	b29b      	uxth	r3, r3
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d014      	beq.n	80040dc <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	68da      	ldr	r2, [r3, #12]
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040bc:	b2d2      	uxtb	r2, r2
 80040be:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040c4:	1c5a      	adds	r2, r3, #1
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040ce:	b29b      	uxth	r3, r3
 80040d0:	3b01      	subs	r3, #1
 80040d2:	b29a      	uxth	r2, r3
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80040d8:	2301      	movs	r3, #1
 80040da:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80040dc:	f7fd fc4c 	bl	8001978 <HAL_GetTick>
 80040e0:	4602      	mov	r2, r0
 80040e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040e4:	1ad3      	subs	r3, r2, r3
 80040e6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80040e8:	429a      	cmp	r2, r3
 80040ea:	d803      	bhi.n	80040f4 <HAL_SPI_TransmitReceive+0x2ce>
 80040ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040f2:	d102      	bne.n	80040fa <HAL_SPI_TransmitReceive+0x2d4>
 80040f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d107      	bne.n	800410a <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 80040fa:	2303      	movs	r3, #3
 80040fc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	2201      	movs	r2, #1
 8004104:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8004108:	e033      	b.n	8004172 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800410e:	b29b      	uxth	r3, r3
 8004110:	2b00      	cmp	r3, #0
 8004112:	d19e      	bne.n	8004052 <HAL_SPI_TransmitReceive+0x22c>
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004118:	b29b      	uxth	r3, r3
 800411a:	2b00      	cmp	r3, #0
 800411c:	d199      	bne.n	8004052 <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800411e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004120:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004122:	68f8      	ldr	r0, [r7, #12]
 8004124:	f000 f90a 	bl	800433c <SPI_EndRxTxTransaction>
 8004128:	4603      	mov	r3, r0
 800412a:	2b00      	cmp	r3, #0
 800412c:	d006      	beq.n	800413c <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 800412e:	2301      	movs	r3, #1
 8004130:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	2220      	movs	r2, #32
 8004138:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800413a:	e01a      	b.n	8004172 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	689b      	ldr	r3, [r3, #8]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d10a      	bne.n	800415a <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004144:	2300      	movs	r3, #0
 8004146:	617b      	str	r3, [r7, #20]
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	68db      	ldr	r3, [r3, #12]
 800414e:	617b      	str	r3, [r7, #20]
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	689b      	ldr	r3, [r3, #8]
 8004156:	617b      	str	r3, [r7, #20]
 8004158:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800415e:	2b00      	cmp	r3, #0
 8004160:	d003      	beq.n	800416a <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8004162:	2301      	movs	r3, #1
 8004164:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004168:	e003      	b.n	8004172 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	2201      	movs	r2, #1
 800416e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	2200      	movs	r2, #0
 8004176:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800417a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800417e:	4618      	mov	r0, r3
 8004180:	3730      	adds	r7, #48	; 0x30
 8004182:	46bd      	mov	sp, r7
 8004184:	bd80      	pop	{r7, pc}
	...

08004188 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b088      	sub	sp, #32
 800418c:	af00      	add	r7, sp, #0
 800418e:	60f8      	str	r0, [r7, #12]
 8004190:	60b9      	str	r1, [r7, #8]
 8004192:	603b      	str	r3, [r7, #0]
 8004194:	4613      	mov	r3, r2
 8004196:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004198:	f7fd fbee 	bl	8001978 <HAL_GetTick>
 800419c:	4602      	mov	r2, r0
 800419e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041a0:	1a9b      	subs	r3, r3, r2
 80041a2:	683a      	ldr	r2, [r7, #0]
 80041a4:	4413      	add	r3, r2
 80041a6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80041a8:	f7fd fbe6 	bl	8001978 <HAL_GetTick>
 80041ac:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80041ae:	4b39      	ldr	r3, [pc, #228]	; (8004294 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	015b      	lsls	r3, r3, #5
 80041b4:	0d1b      	lsrs	r3, r3, #20
 80041b6:	69fa      	ldr	r2, [r7, #28]
 80041b8:	fb02 f303 	mul.w	r3, r2, r3
 80041bc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80041be:	e054      	b.n	800426a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041c6:	d050      	beq.n	800426a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80041c8:	f7fd fbd6 	bl	8001978 <HAL_GetTick>
 80041cc:	4602      	mov	r2, r0
 80041ce:	69bb      	ldr	r3, [r7, #24]
 80041d0:	1ad3      	subs	r3, r2, r3
 80041d2:	69fa      	ldr	r2, [r7, #28]
 80041d4:	429a      	cmp	r2, r3
 80041d6:	d902      	bls.n	80041de <SPI_WaitFlagStateUntilTimeout+0x56>
 80041d8:	69fb      	ldr	r3, [r7, #28]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d13d      	bne.n	800425a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	685a      	ldr	r2, [r3, #4]
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80041ec:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80041f6:	d111      	bne.n	800421c <SPI_WaitFlagStateUntilTimeout+0x94>
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	689b      	ldr	r3, [r3, #8]
 80041fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004200:	d004      	beq.n	800420c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	689b      	ldr	r3, [r3, #8]
 8004206:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800420a:	d107      	bne.n	800421c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	681a      	ldr	r2, [r3, #0]
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800421a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004220:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004224:	d10f      	bne.n	8004246 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	681a      	ldr	r2, [r3, #0]
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004234:	601a      	str	r2, [r3, #0]
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	681a      	ldr	r2, [r3, #0]
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004244:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	2201      	movs	r2, #1
 800424a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	2200      	movs	r2, #0
 8004252:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004256:	2303      	movs	r3, #3
 8004258:	e017      	b.n	800428a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800425a:	697b      	ldr	r3, [r7, #20]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d101      	bne.n	8004264 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004260:	2300      	movs	r3, #0
 8004262:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004264:	697b      	ldr	r3, [r7, #20]
 8004266:	3b01      	subs	r3, #1
 8004268:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	689a      	ldr	r2, [r3, #8]
 8004270:	68bb      	ldr	r3, [r7, #8]
 8004272:	4013      	ands	r3, r2
 8004274:	68ba      	ldr	r2, [r7, #8]
 8004276:	429a      	cmp	r2, r3
 8004278:	bf0c      	ite	eq
 800427a:	2301      	moveq	r3, #1
 800427c:	2300      	movne	r3, #0
 800427e:	b2db      	uxtb	r3, r3
 8004280:	461a      	mov	r2, r3
 8004282:	79fb      	ldrb	r3, [r7, #7]
 8004284:	429a      	cmp	r2, r3
 8004286:	d19b      	bne.n	80041c0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004288:	2300      	movs	r3, #0
}
 800428a:	4618      	mov	r0, r3
 800428c:	3720      	adds	r7, #32
 800428e:	46bd      	mov	sp, r7
 8004290:	bd80      	pop	{r7, pc}
 8004292:	bf00      	nop
 8004294:	20000004 	.word	0x20000004

08004298 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b086      	sub	sp, #24
 800429c:	af02      	add	r7, sp, #8
 800429e:	60f8      	str	r0, [r7, #12]
 80042a0:	60b9      	str	r1, [r7, #8]
 80042a2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	685b      	ldr	r3, [r3, #4]
 80042a8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80042ac:	d111      	bne.n	80042d2 <SPI_EndRxTransaction+0x3a>
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	689b      	ldr	r3, [r3, #8]
 80042b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042b6:	d004      	beq.n	80042c2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	689b      	ldr	r3, [r3, #8]
 80042bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042c0:	d107      	bne.n	80042d2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	681a      	ldr	r2, [r3, #0]
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80042d0:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	685b      	ldr	r3, [r3, #4]
 80042d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80042da:	d117      	bne.n	800430c <SPI_EndRxTransaction+0x74>
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	689b      	ldr	r3, [r3, #8]
 80042e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042e4:	d112      	bne.n	800430c <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	9300      	str	r3, [sp, #0]
 80042ea:	68bb      	ldr	r3, [r7, #8]
 80042ec:	2200      	movs	r2, #0
 80042ee:	2101      	movs	r1, #1
 80042f0:	68f8      	ldr	r0, [r7, #12]
 80042f2:	f7ff ff49 	bl	8004188 <SPI_WaitFlagStateUntilTimeout>
 80042f6:	4603      	mov	r3, r0
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d01a      	beq.n	8004332 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004300:	f043 0220 	orr.w	r2, r3, #32
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004308:	2303      	movs	r3, #3
 800430a:	e013      	b.n	8004334 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	9300      	str	r3, [sp, #0]
 8004310:	68bb      	ldr	r3, [r7, #8]
 8004312:	2200      	movs	r2, #0
 8004314:	2180      	movs	r1, #128	; 0x80
 8004316:	68f8      	ldr	r0, [r7, #12]
 8004318:	f7ff ff36 	bl	8004188 <SPI_WaitFlagStateUntilTimeout>
 800431c:	4603      	mov	r3, r0
 800431e:	2b00      	cmp	r3, #0
 8004320:	d007      	beq.n	8004332 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004326:	f043 0220 	orr.w	r2, r3, #32
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800432e:	2303      	movs	r3, #3
 8004330:	e000      	b.n	8004334 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8004332:	2300      	movs	r3, #0
}
 8004334:	4618      	mov	r0, r3
 8004336:	3710      	adds	r7, #16
 8004338:	46bd      	mov	sp, r7
 800433a:	bd80      	pop	{r7, pc}

0800433c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b086      	sub	sp, #24
 8004340:	af02      	add	r7, sp, #8
 8004342:	60f8      	str	r0, [r7, #12]
 8004344:	60b9      	str	r1, [r7, #8]
 8004346:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	9300      	str	r3, [sp, #0]
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	2200      	movs	r2, #0
 8004350:	2180      	movs	r1, #128	; 0x80
 8004352:	68f8      	ldr	r0, [r7, #12]
 8004354:	f7ff ff18 	bl	8004188 <SPI_WaitFlagStateUntilTimeout>
 8004358:	4603      	mov	r3, r0
 800435a:	2b00      	cmp	r3, #0
 800435c:	d007      	beq.n	800436e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004362:	f043 0220 	orr.w	r2, r3, #32
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800436a:	2303      	movs	r3, #3
 800436c:	e000      	b.n	8004370 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800436e:	2300      	movs	r3, #0
}
 8004370:	4618      	mov	r0, r3
 8004372:	3710      	adds	r7, #16
 8004374:	46bd      	mov	sp, r7
 8004376:	bd80      	pop	{r7, pc}

08004378 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b082      	sub	sp, #8
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d101      	bne.n	800438a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004386:	2301      	movs	r3, #1
 8004388:	e042      	b.n	8004410 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004390:	b2db      	uxtb	r3, r3
 8004392:	2b00      	cmp	r3, #0
 8004394:	d106      	bne.n	80043a4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2200      	movs	r2, #0
 800439a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800439e:	6878      	ldr	r0, [r7, #4]
 80043a0:	f7fd f99c 	bl	80016dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2224      	movs	r2, #36	; 0x24
 80043a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	68da      	ldr	r2, [r3, #12]
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80043ba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80043bc:	6878      	ldr	r0, [r7, #4]
 80043be:	f000 f91d 	bl	80045fc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	691a      	ldr	r2, [r3, #16]
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80043d0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	695a      	ldr	r2, [r3, #20]
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80043e0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	68da      	ldr	r2, [r3, #12]
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80043f0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2200      	movs	r2, #0
 80043f6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2220      	movs	r2, #32
 80043fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2220      	movs	r2, #32
 8004404:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2200      	movs	r2, #0
 800440c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800440e:	2300      	movs	r3, #0
}
 8004410:	4618      	mov	r0, r3
 8004412:	3708      	adds	r7, #8
 8004414:	46bd      	mov	sp, r7
 8004416:	bd80      	pop	{r7, pc}

08004418 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b08a      	sub	sp, #40	; 0x28
 800441c:	af02      	add	r7, sp, #8
 800441e:	60f8      	str	r0, [r7, #12]
 8004420:	60b9      	str	r1, [r7, #8]
 8004422:	603b      	str	r3, [r7, #0]
 8004424:	4613      	mov	r3, r2
 8004426:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004428:	2300      	movs	r3, #0
 800442a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004432:	b2db      	uxtb	r3, r3
 8004434:	2b20      	cmp	r3, #32
 8004436:	d16d      	bne.n	8004514 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8004438:	68bb      	ldr	r3, [r7, #8]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d002      	beq.n	8004444 <HAL_UART_Transmit+0x2c>
 800443e:	88fb      	ldrh	r3, [r7, #6]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d101      	bne.n	8004448 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004444:	2301      	movs	r3, #1
 8004446:	e066      	b.n	8004516 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	2200      	movs	r2, #0
 800444c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	2221      	movs	r2, #33	; 0x21
 8004452:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004456:	f7fd fa8f 	bl	8001978 <HAL_GetTick>
 800445a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	88fa      	ldrh	r2, [r7, #6]
 8004460:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	88fa      	ldrh	r2, [r7, #6]
 8004466:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	689b      	ldr	r3, [r3, #8]
 800446c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004470:	d108      	bne.n	8004484 <HAL_UART_Transmit+0x6c>
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	691b      	ldr	r3, [r3, #16]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d104      	bne.n	8004484 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800447a:	2300      	movs	r3, #0
 800447c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800447e:	68bb      	ldr	r3, [r7, #8]
 8004480:	61bb      	str	r3, [r7, #24]
 8004482:	e003      	b.n	800448c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004484:	68bb      	ldr	r3, [r7, #8]
 8004486:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004488:	2300      	movs	r3, #0
 800448a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800448c:	e02a      	b.n	80044e4 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	9300      	str	r3, [sp, #0]
 8004492:	697b      	ldr	r3, [r7, #20]
 8004494:	2200      	movs	r2, #0
 8004496:	2180      	movs	r1, #128	; 0x80
 8004498:	68f8      	ldr	r0, [r7, #12]
 800449a:	f000 f840 	bl	800451e <UART_WaitOnFlagUntilTimeout>
 800449e:	4603      	mov	r3, r0
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d001      	beq.n	80044a8 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80044a4:	2303      	movs	r3, #3
 80044a6:	e036      	b.n	8004516 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80044a8:	69fb      	ldr	r3, [r7, #28]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d10b      	bne.n	80044c6 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80044ae:	69bb      	ldr	r3, [r7, #24]
 80044b0:	881b      	ldrh	r3, [r3, #0]
 80044b2:	461a      	mov	r2, r3
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80044bc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80044be:	69bb      	ldr	r3, [r7, #24]
 80044c0:	3302      	adds	r3, #2
 80044c2:	61bb      	str	r3, [r7, #24]
 80044c4:	e007      	b.n	80044d6 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80044c6:	69fb      	ldr	r3, [r7, #28]
 80044c8:	781a      	ldrb	r2, [r3, #0]
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80044d0:	69fb      	ldr	r3, [r7, #28]
 80044d2:	3301      	adds	r3, #1
 80044d4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80044da:	b29b      	uxth	r3, r3
 80044dc:	3b01      	subs	r3, #1
 80044de:	b29a      	uxth	r2, r3
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80044e8:	b29b      	uxth	r3, r3
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d1cf      	bne.n	800448e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	9300      	str	r3, [sp, #0]
 80044f2:	697b      	ldr	r3, [r7, #20]
 80044f4:	2200      	movs	r2, #0
 80044f6:	2140      	movs	r1, #64	; 0x40
 80044f8:	68f8      	ldr	r0, [r7, #12]
 80044fa:	f000 f810 	bl	800451e <UART_WaitOnFlagUntilTimeout>
 80044fe:	4603      	mov	r3, r0
 8004500:	2b00      	cmp	r3, #0
 8004502:	d001      	beq.n	8004508 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8004504:	2303      	movs	r3, #3
 8004506:	e006      	b.n	8004516 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	2220      	movs	r2, #32
 800450c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8004510:	2300      	movs	r3, #0
 8004512:	e000      	b.n	8004516 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8004514:	2302      	movs	r3, #2
  }
}
 8004516:	4618      	mov	r0, r3
 8004518:	3720      	adds	r7, #32
 800451a:	46bd      	mov	sp, r7
 800451c:	bd80      	pop	{r7, pc}

0800451e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800451e:	b580      	push	{r7, lr}
 8004520:	b090      	sub	sp, #64	; 0x40
 8004522:	af00      	add	r7, sp, #0
 8004524:	60f8      	str	r0, [r7, #12]
 8004526:	60b9      	str	r1, [r7, #8]
 8004528:	603b      	str	r3, [r7, #0]
 800452a:	4613      	mov	r3, r2
 800452c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800452e:	e050      	b.n	80045d2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004530:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004532:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004536:	d04c      	beq.n	80045d2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004538:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800453a:	2b00      	cmp	r3, #0
 800453c:	d007      	beq.n	800454e <UART_WaitOnFlagUntilTimeout+0x30>
 800453e:	f7fd fa1b 	bl	8001978 <HAL_GetTick>
 8004542:	4602      	mov	r2, r0
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	1ad3      	subs	r3, r2, r3
 8004548:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800454a:	429a      	cmp	r2, r3
 800454c:	d241      	bcs.n	80045d2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	330c      	adds	r3, #12
 8004554:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004556:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004558:	e853 3f00 	ldrex	r3, [r3]
 800455c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800455e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004560:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004564:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	330c      	adds	r3, #12
 800456c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800456e:	637a      	str	r2, [r7, #52]	; 0x34
 8004570:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004572:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004574:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004576:	e841 2300 	strex	r3, r2, [r1]
 800457a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800457c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800457e:	2b00      	cmp	r3, #0
 8004580:	d1e5      	bne.n	800454e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	3314      	adds	r3, #20
 8004588:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800458a:	697b      	ldr	r3, [r7, #20]
 800458c:	e853 3f00 	ldrex	r3, [r3]
 8004590:	613b      	str	r3, [r7, #16]
   return(result);
 8004592:	693b      	ldr	r3, [r7, #16]
 8004594:	f023 0301 	bic.w	r3, r3, #1
 8004598:	63bb      	str	r3, [r7, #56]	; 0x38
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	3314      	adds	r3, #20
 80045a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80045a2:	623a      	str	r2, [r7, #32]
 80045a4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045a6:	69f9      	ldr	r1, [r7, #28]
 80045a8:	6a3a      	ldr	r2, [r7, #32]
 80045aa:	e841 2300 	strex	r3, r2, [r1]
 80045ae:	61bb      	str	r3, [r7, #24]
   return(result);
 80045b0:	69bb      	ldr	r3, [r7, #24]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d1e5      	bne.n	8004582 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	2220      	movs	r2, #32
 80045ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	2220      	movs	r2, #32
 80045c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	2200      	movs	r2, #0
 80045ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80045ce:	2303      	movs	r3, #3
 80045d0:	e00f      	b.n	80045f2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	681a      	ldr	r2, [r3, #0]
 80045d8:	68bb      	ldr	r3, [r7, #8]
 80045da:	4013      	ands	r3, r2
 80045dc:	68ba      	ldr	r2, [r7, #8]
 80045de:	429a      	cmp	r2, r3
 80045e0:	bf0c      	ite	eq
 80045e2:	2301      	moveq	r3, #1
 80045e4:	2300      	movne	r3, #0
 80045e6:	b2db      	uxtb	r3, r3
 80045e8:	461a      	mov	r2, r3
 80045ea:	79fb      	ldrb	r3, [r7, #7]
 80045ec:	429a      	cmp	r2, r3
 80045ee:	d09f      	beq.n	8004530 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80045f0:	2300      	movs	r3, #0
}
 80045f2:	4618      	mov	r0, r3
 80045f4:	3740      	adds	r7, #64	; 0x40
 80045f6:	46bd      	mov	sp, r7
 80045f8:	bd80      	pop	{r7, pc}
	...

080045fc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b084      	sub	sp, #16
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	691b      	ldr	r3, [r3, #16]
 800460a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	68da      	ldr	r2, [r3, #12]
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	430a      	orrs	r2, r1
 8004618:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	689a      	ldr	r2, [r3, #8]
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	691b      	ldr	r3, [r3, #16]
 8004622:	431a      	orrs	r2, r3
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	695b      	ldr	r3, [r3, #20]
 8004628:	4313      	orrs	r3, r2
 800462a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	68db      	ldr	r3, [r3, #12]
 8004632:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004636:	f023 030c 	bic.w	r3, r3, #12
 800463a:	687a      	ldr	r2, [r7, #4]
 800463c:	6812      	ldr	r2, [r2, #0]
 800463e:	68b9      	ldr	r1, [r7, #8]
 8004640:	430b      	orrs	r3, r1
 8004642:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	695b      	ldr	r3, [r3, #20]
 800464a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	699a      	ldr	r2, [r3, #24]
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	430a      	orrs	r2, r1
 8004658:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4a2c      	ldr	r2, [pc, #176]	; (8004710 <UART_SetConfig+0x114>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d103      	bne.n	800466c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004664:	f7ff f8ce 	bl	8003804 <HAL_RCC_GetPCLK2Freq>
 8004668:	60f8      	str	r0, [r7, #12]
 800466a:	e002      	b.n	8004672 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800466c:	f7ff f8b6 	bl	80037dc <HAL_RCC_GetPCLK1Freq>
 8004670:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004672:	68fa      	ldr	r2, [r7, #12]
 8004674:	4613      	mov	r3, r2
 8004676:	009b      	lsls	r3, r3, #2
 8004678:	4413      	add	r3, r2
 800467a:	009a      	lsls	r2, r3, #2
 800467c:	441a      	add	r2, r3
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	685b      	ldr	r3, [r3, #4]
 8004682:	009b      	lsls	r3, r3, #2
 8004684:	fbb2 f3f3 	udiv	r3, r2, r3
 8004688:	4a22      	ldr	r2, [pc, #136]	; (8004714 <UART_SetConfig+0x118>)
 800468a:	fba2 2303 	umull	r2, r3, r2, r3
 800468e:	095b      	lsrs	r3, r3, #5
 8004690:	0119      	lsls	r1, r3, #4
 8004692:	68fa      	ldr	r2, [r7, #12]
 8004694:	4613      	mov	r3, r2
 8004696:	009b      	lsls	r3, r3, #2
 8004698:	4413      	add	r3, r2
 800469a:	009a      	lsls	r2, r3, #2
 800469c:	441a      	add	r2, r3
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	685b      	ldr	r3, [r3, #4]
 80046a2:	009b      	lsls	r3, r3, #2
 80046a4:	fbb2 f2f3 	udiv	r2, r2, r3
 80046a8:	4b1a      	ldr	r3, [pc, #104]	; (8004714 <UART_SetConfig+0x118>)
 80046aa:	fba3 0302 	umull	r0, r3, r3, r2
 80046ae:	095b      	lsrs	r3, r3, #5
 80046b0:	2064      	movs	r0, #100	; 0x64
 80046b2:	fb00 f303 	mul.w	r3, r0, r3
 80046b6:	1ad3      	subs	r3, r2, r3
 80046b8:	011b      	lsls	r3, r3, #4
 80046ba:	3332      	adds	r3, #50	; 0x32
 80046bc:	4a15      	ldr	r2, [pc, #84]	; (8004714 <UART_SetConfig+0x118>)
 80046be:	fba2 2303 	umull	r2, r3, r2, r3
 80046c2:	095b      	lsrs	r3, r3, #5
 80046c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80046c8:	4419      	add	r1, r3
 80046ca:	68fa      	ldr	r2, [r7, #12]
 80046cc:	4613      	mov	r3, r2
 80046ce:	009b      	lsls	r3, r3, #2
 80046d0:	4413      	add	r3, r2
 80046d2:	009a      	lsls	r2, r3, #2
 80046d4:	441a      	add	r2, r3
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	685b      	ldr	r3, [r3, #4]
 80046da:	009b      	lsls	r3, r3, #2
 80046dc:	fbb2 f2f3 	udiv	r2, r2, r3
 80046e0:	4b0c      	ldr	r3, [pc, #48]	; (8004714 <UART_SetConfig+0x118>)
 80046e2:	fba3 0302 	umull	r0, r3, r3, r2
 80046e6:	095b      	lsrs	r3, r3, #5
 80046e8:	2064      	movs	r0, #100	; 0x64
 80046ea:	fb00 f303 	mul.w	r3, r0, r3
 80046ee:	1ad3      	subs	r3, r2, r3
 80046f0:	011b      	lsls	r3, r3, #4
 80046f2:	3332      	adds	r3, #50	; 0x32
 80046f4:	4a07      	ldr	r2, [pc, #28]	; (8004714 <UART_SetConfig+0x118>)
 80046f6:	fba2 2303 	umull	r2, r3, r2, r3
 80046fa:	095b      	lsrs	r3, r3, #5
 80046fc:	f003 020f 	and.w	r2, r3, #15
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	440a      	add	r2, r1
 8004706:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004708:	bf00      	nop
 800470a:	3710      	adds	r7, #16
 800470c:	46bd      	mov	sp, r7
 800470e:	bd80      	pop	{r7, pc}
 8004710:	40013800 	.word	0x40013800
 8004714:	51eb851f 	.word	0x51eb851f

08004718 <__errno>:
 8004718:	4b01      	ldr	r3, [pc, #4]	; (8004720 <__errno+0x8>)
 800471a:	6818      	ldr	r0, [r3, #0]
 800471c:	4770      	bx	lr
 800471e:	bf00      	nop
 8004720:	20000010 	.word	0x20000010

08004724 <__libc_init_array>:
 8004724:	b570      	push	{r4, r5, r6, lr}
 8004726:	2600      	movs	r6, #0
 8004728:	4d0c      	ldr	r5, [pc, #48]	; (800475c <__libc_init_array+0x38>)
 800472a:	4c0d      	ldr	r4, [pc, #52]	; (8004760 <__libc_init_array+0x3c>)
 800472c:	1b64      	subs	r4, r4, r5
 800472e:	10a4      	asrs	r4, r4, #2
 8004730:	42a6      	cmp	r6, r4
 8004732:	d109      	bne.n	8004748 <__libc_init_array+0x24>
 8004734:	f000 fcb6 	bl	80050a4 <_init>
 8004738:	2600      	movs	r6, #0
 800473a:	4d0a      	ldr	r5, [pc, #40]	; (8004764 <__libc_init_array+0x40>)
 800473c:	4c0a      	ldr	r4, [pc, #40]	; (8004768 <__libc_init_array+0x44>)
 800473e:	1b64      	subs	r4, r4, r5
 8004740:	10a4      	asrs	r4, r4, #2
 8004742:	42a6      	cmp	r6, r4
 8004744:	d105      	bne.n	8004752 <__libc_init_array+0x2e>
 8004746:	bd70      	pop	{r4, r5, r6, pc}
 8004748:	f855 3b04 	ldr.w	r3, [r5], #4
 800474c:	4798      	blx	r3
 800474e:	3601      	adds	r6, #1
 8004750:	e7ee      	b.n	8004730 <__libc_init_array+0xc>
 8004752:	f855 3b04 	ldr.w	r3, [r5], #4
 8004756:	4798      	blx	r3
 8004758:	3601      	adds	r6, #1
 800475a:	e7f2      	b.n	8004742 <__libc_init_array+0x1e>
 800475c:	08005210 	.word	0x08005210
 8004760:	08005210 	.word	0x08005210
 8004764:	08005210 	.word	0x08005210
 8004768:	08005214 	.word	0x08005214

0800476c <memset>:
 800476c:	4603      	mov	r3, r0
 800476e:	4402      	add	r2, r0
 8004770:	4293      	cmp	r3, r2
 8004772:	d100      	bne.n	8004776 <memset+0xa>
 8004774:	4770      	bx	lr
 8004776:	f803 1b01 	strb.w	r1, [r3], #1
 800477a:	e7f9      	b.n	8004770 <memset+0x4>

0800477c <_vsniprintf_r>:
 800477c:	b530      	push	{r4, r5, lr}
 800477e:	4614      	mov	r4, r2
 8004780:	2c00      	cmp	r4, #0
 8004782:	4605      	mov	r5, r0
 8004784:	461a      	mov	r2, r3
 8004786:	b09b      	sub	sp, #108	; 0x6c
 8004788:	da05      	bge.n	8004796 <_vsniprintf_r+0x1a>
 800478a:	238b      	movs	r3, #139	; 0x8b
 800478c:	6003      	str	r3, [r0, #0]
 800478e:	f04f 30ff 	mov.w	r0, #4294967295
 8004792:	b01b      	add	sp, #108	; 0x6c
 8004794:	bd30      	pop	{r4, r5, pc}
 8004796:	f44f 7302 	mov.w	r3, #520	; 0x208
 800479a:	f8ad 300c 	strh.w	r3, [sp, #12]
 800479e:	bf0c      	ite	eq
 80047a0:	4623      	moveq	r3, r4
 80047a2:	f104 33ff 	addne.w	r3, r4, #4294967295
 80047a6:	9302      	str	r3, [sp, #8]
 80047a8:	9305      	str	r3, [sp, #20]
 80047aa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80047ae:	9100      	str	r1, [sp, #0]
 80047b0:	9104      	str	r1, [sp, #16]
 80047b2:	f8ad 300e 	strh.w	r3, [sp, #14]
 80047b6:	4669      	mov	r1, sp
 80047b8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80047ba:	f000 f875 	bl	80048a8 <_svfiprintf_r>
 80047be:	1c43      	adds	r3, r0, #1
 80047c0:	bfbc      	itt	lt
 80047c2:	238b      	movlt	r3, #139	; 0x8b
 80047c4:	602b      	strlt	r3, [r5, #0]
 80047c6:	2c00      	cmp	r4, #0
 80047c8:	d0e3      	beq.n	8004792 <_vsniprintf_r+0x16>
 80047ca:	2200      	movs	r2, #0
 80047cc:	9b00      	ldr	r3, [sp, #0]
 80047ce:	701a      	strb	r2, [r3, #0]
 80047d0:	e7df      	b.n	8004792 <_vsniprintf_r+0x16>
	...

080047d4 <vsniprintf>:
 80047d4:	b507      	push	{r0, r1, r2, lr}
 80047d6:	9300      	str	r3, [sp, #0]
 80047d8:	4613      	mov	r3, r2
 80047da:	460a      	mov	r2, r1
 80047dc:	4601      	mov	r1, r0
 80047de:	4803      	ldr	r0, [pc, #12]	; (80047ec <vsniprintf+0x18>)
 80047e0:	6800      	ldr	r0, [r0, #0]
 80047e2:	f7ff ffcb 	bl	800477c <_vsniprintf_r>
 80047e6:	b003      	add	sp, #12
 80047e8:	f85d fb04 	ldr.w	pc, [sp], #4
 80047ec:	20000010 	.word	0x20000010

080047f0 <__ssputs_r>:
 80047f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80047f4:	688e      	ldr	r6, [r1, #8]
 80047f6:	4682      	mov	sl, r0
 80047f8:	429e      	cmp	r6, r3
 80047fa:	460c      	mov	r4, r1
 80047fc:	4690      	mov	r8, r2
 80047fe:	461f      	mov	r7, r3
 8004800:	d838      	bhi.n	8004874 <__ssputs_r+0x84>
 8004802:	898a      	ldrh	r2, [r1, #12]
 8004804:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004808:	d032      	beq.n	8004870 <__ssputs_r+0x80>
 800480a:	6825      	ldr	r5, [r4, #0]
 800480c:	6909      	ldr	r1, [r1, #16]
 800480e:	3301      	adds	r3, #1
 8004810:	eba5 0901 	sub.w	r9, r5, r1
 8004814:	6965      	ldr	r5, [r4, #20]
 8004816:	444b      	add	r3, r9
 8004818:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800481c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004820:	106d      	asrs	r5, r5, #1
 8004822:	429d      	cmp	r5, r3
 8004824:	bf38      	it	cc
 8004826:	461d      	movcc	r5, r3
 8004828:	0553      	lsls	r3, r2, #21
 800482a:	d531      	bpl.n	8004890 <__ssputs_r+0xa0>
 800482c:	4629      	mov	r1, r5
 800482e:	f000 fb6f 	bl	8004f10 <_malloc_r>
 8004832:	4606      	mov	r6, r0
 8004834:	b950      	cbnz	r0, 800484c <__ssputs_r+0x5c>
 8004836:	230c      	movs	r3, #12
 8004838:	f04f 30ff 	mov.w	r0, #4294967295
 800483c:	f8ca 3000 	str.w	r3, [sl]
 8004840:	89a3      	ldrh	r3, [r4, #12]
 8004842:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004846:	81a3      	strh	r3, [r4, #12]
 8004848:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800484c:	464a      	mov	r2, r9
 800484e:	6921      	ldr	r1, [r4, #16]
 8004850:	f000 face 	bl	8004df0 <memcpy>
 8004854:	89a3      	ldrh	r3, [r4, #12]
 8004856:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800485a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800485e:	81a3      	strh	r3, [r4, #12]
 8004860:	6126      	str	r6, [r4, #16]
 8004862:	444e      	add	r6, r9
 8004864:	6026      	str	r6, [r4, #0]
 8004866:	463e      	mov	r6, r7
 8004868:	6165      	str	r5, [r4, #20]
 800486a:	eba5 0509 	sub.w	r5, r5, r9
 800486e:	60a5      	str	r5, [r4, #8]
 8004870:	42be      	cmp	r6, r7
 8004872:	d900      	bls.n	8004876 <__ssputs_r+0x86>
 8004874:	463e      	mov	r6, r7
 8004876:	4632      	mov	r2, r6
 8004878:	4641      	mov	r1, r8
 800487a:	6820      	ldr	r0, [r4, #0]
 800487c:	f000 fac6 	bl	8004e0c <memmove>
 8004880:	68a3      	ldr	r3, [r4, #8]
 8004882:	2000      	movs	r0, #0
 8004884:	1b9b      	subs	r3, r3, r6
 8004886:	60a3      	str	r3, [r4, #8]
 8004888:	6823      	ldr	r3, [r4, #0]
 800488a:	4433      	add	r3, r6
 800488c:	6023      	str	r3, [r4, #0]
 800488e:	e7db      	b.n	8004848 <__ssputs_r+0x58>
 8004890:	462a      	mov	r2, r5
 8004892:	f000 fbb1 	bl	8004ff8 <_realloc_r>
 8004896:	4606      	mov	r6, r0
 8004898:	2800      	cmp	r0, #0
 800489a:	d1e1      	bne.n	8004860 <__ssputs_r+0x70>
 800489c:	4650      	mov	r0, sl
 800489e:	6921      	ldr	r1, [r4, #16]
 80048a0:	f000 face 	bl	8004e40 <_free_r>
 80048a4:	e7c7      	b.n	8004836 <__ssputs_r+0x46>
	...

080048a8 <_svfiprintf_r>:
 80048a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048ac:	4698      	mov	r8, r3
 80048ae:	898b      	ldrh	r3, [r1, #12]
 80048b0:	4607      	mov	r7, r0
 80048b2:	061b      	lsls	r3, r3, #24
 80048b4:	460d      	mov	r5, r1
 80048b6:	4614      	mov	r4, r2
 80048b8:	b09d      	sub	sp, #116	; 0x74
 80048ba:	d50e      	bpl.n	80048da <_svfiprintf_r+0x32>
 80048bc:	690b      	ldr	r3, [r1, #16]
 80048be:	b963      	cbnz	r3, 80048da <_svfiprintf_r+0x32>
 80048c0:	2140      	movs	r1, #64	; 0x40
 80048c2:	f000 fb25 	bl	8004f10 <_malloc_r>
 80048c6:	6028      	str	r0, [r5, #0]
 80048c8:	6128      	str	r0, [r5, #16]
 80048ca:	b920      	cbnz	r0, 80048d6 <_svfiprintf_r+0x2e>
 80048cc:	230c      	movs	r3, #12
 80048ce:	603b      	str	r3, [r7, #0]
 80048d0:	f04f 30ff 	mov.w	r0, #4294967295
 80048d4:	e0d1      	b.n	8004a7a <_svfiprintf_r+0x1d2>
 80048d6:	2340      	movs	r3, #64	; 0x40
 80048d8:	616b      	str	r3, [r5, #20]
 80048da:	2300      	movs	r3, #0
 80048dc:	9309      	str	r3, [sp, #36]	; 0x24
 80048de:	2320      	movs	r3, #32
 80048e0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80048e4:	2330      	movs	r3, #48	; 0x30
 80048e6:	f04f 0901 	mov.w	r9, #1
 80048ea:	f8cd 800c 	str.w	r8, [sp, #12]
 80048ee:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004a94 <_svfiprintf_r+0x1ec>
 80048f2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80048f6:	4623      	mov	r3, r4
 80048f8:	469a      	mov	sl, r3
 80048fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80048fe:	b10a      	cbz	r2, 8004904 <_svfiprintf_r+0x5c>
 8004900:	2a25      	cmp	r2, #37	; 0x25
 8004902:	d1f9      	bne.n	80048f8 <_svfiprintf_r+0x50>
 8004904:	ebba 0b04 	subs.w	fp, sl, r4
 8004908:	d00b      	beq.n	8004922 <_svfiprintf_r+0x7a>
 800490a:	465b      	mov	r3, fp
 800490c:	4622      	mov	r2, r4
 800490e:	4629      	mov	r1, r5
 8004910:	4638      	mov	r0, r7
 8004912:	f7ff ff6d 	bl	80047f0 <__ssputs_r>
 8004916:	3001      	adds	r0, #1
 8004918:	f000 80aa 	beq.w	8004a70 <_svfiprintf_r+0x1c8>
 800491c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800491e:	445a      	add	r2, fp
 8004920:	9209      	str	r2, [sp, #36]	; 0x24
 8004922:	f89a 3000 	ldrb.w	r3, [sl]
 8004926:	2b00      	cmp	r3, #0
 8004928:	f000 80a2 	beq.w	8004a70 <_svfiprintf_r+0x1c8>
 800492c:	2300      	movs	r3, #0
 800492e:	f04f 32ff 	mov.w	r2, #4294967295
 8004932:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004936:	f10a 0a01 	add.w	sl, sl, #1
 800493a:	9304      	str	r3, [sp, #16]
 800493c:	9307      	str	r3, [sp, #28]
 800493e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004942:	931a      	str	r3, [sp, #104]	; 0x68
 8004944:	4654      	mov	r4, sl
 8004946:	2205      	movs	r2, #5
 8004948:	f814 1b01 	ldrb.w	r1, [r4], #1
 800494c:	4851      	ldr	r0, [pc, #324]	; (8004a94 <_svfiprintf_r+0x1ec>)
 800494e:	f000 fa41 	bl	8004dd4 <memchr>
 8004952:	9a04      	ldr	r2, [sp, #16]
 8004954:	b9d8      	cbnz	r0, 800498e <_svfiprintf_r+0xe6>
 8004956:	06d0      	lsls	r0, r2, #27
 8004958:	bf44      	itt	mi
 800495a:	2320      	movmi	r3, #32
 800495c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004960:	0711      	lsls	r1, r2, #28
 8004962:	bf44      	itt	mi
 8004964:	232b      	movmi	r3, #43	; 0x2b
 8004966:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800496a:	f89a 3000 	ldrb.w	r3, [sl]
 800496e:	2b2a      	cmp	r3, #42	; 0x2a
 8004970:	d015      	beq.n	800499e <_svfiprintf_r+0xf6>
 8004972:	4654      	mov	r4, sl
 8004974:	2000      	movs	r0, #0
 8004976:	f04f 0c0a 	mov.w	ip, #10
 800497a:	9a07      	ldr	r2, [sp, #28]
 800497c:	4621      	mov	r1, r4
 800497e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004982:	3b30      	subs	r3, #48	; 0x30
 8004984:	2b09      	cmp	r3, #9
 8004986:	d94e      	bls.n	8004a26 <_svfiprintf_r+0x17e>
 8004988:	b1b0      	cbz	r0, 80049b8 <_svfiprintf_r+0x110>
 800498a:	9207      	str	r2, [sp, #28]
 800498c:	e014      	b.n	80049b8 <_svfiprintf_r+0x110>
 800498e:	eba0 0308 	sub.w	r3, r0, r8
 8004992:	fa09 f303 	lsl.w	r3, r9, r3
 8004996:	4313      	orrs	r3, r2
 8004998:	46a2      	mov	sl, r4
 800499a:	9304      	str	r3, [sp, #16]
 800499c:	e7d2      	b.n	8004944 <_svfiprintf_r+0x9c>
 800499e:	9b03      	ldr	r3, [sp, #12]
 80049a0:	1d19      	adds	r1, r3, #4
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	9103      	str	r1, [sp, #12]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	bfbb      	ittet	lt
 80049aa:	425b      	neglt	r3, r3
 80049ac:	f042 0202 	orrlt.w	r2, r2, #2
 80049b0:	9307      	strge	r3, [sp, #28]
 80049b2:	9307      	strlt	r3, [sp, #28]
 80049b4:	bfb8      	it	lt
 80049b6:	9204      	strlt	r2, [sp, #16]
 80049b8:	7823      	ldrb	r3, [r4, #0]
 80049ba:	2b2e      	cmp	r3, #46	; 0x2e
 80049bc:	d10c      	bne.n	80049d8 <_svfiprintf_r+0x130>
 80049be:	7863      	ldrb	r3, [r4, #1]
 80049c0:	2b2a      	cmp	r3, #42	; 0x2a
 80049c2:	d135      	bne.n	8004a30 <_svfiprintf_r+0x188>
 80049c4:	9b03      	ldr	r3, [sp, #12]
 80049c6:	3402      	adds	r4, #2
 80049c8:	1d1a      	adds	r2, r3, #4
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	9203      	str	r2, [sp, #12]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	bfb8      	it	lt
 80049d2:	f04f 33ff 	movlt.w	r3, #4294967295
 80049d6:	9305      	str	r3, [sp, #20]
 80049d8:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8004a98 <_svfiprintf_r+0x1f0>
 80049dc:	2203      	movs	r2, #3
 80049de:	4650      	mov	r0, sl
 80049e0:	7821      	ldrb	r1, [r4, #0]
 80049e2:	f000 f9f7 	bl	8004dd4 <memchr>
 80049e6:	b140      	cbz	r0, 80049fa <_svfiprintf_r+0x152>
 80049e8:	2340      	movs	r3, #64	; 0x40
 80049ea:	eba0 000a 	sub.w	r0, r0, sl
 80049ee:	fa03 f000 	lsl.w	r0, r3, r0
 80049f2:	9b04      	ldr	r3, [sp, #16]
 80049f4:	3401      	adds	r4, #1
 80049f6:	4303      	orrs	r3, r0
 80049f8:	9304      	str	r3, [sp, #16]
 80049fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80049fe:	2206      	movs	r2, #6
 8004a00:	4826      	ldr	r0, [pc, #152]	; (8004a9c <_svfiprintf_r+0x1f4>)
 8004a02:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004a06:	f000 f9e5 	bl	8004dd4 <memchr>
 8004a0a:	2800      	cmp	r0, #0
 8004a0c:	d038      	beq.n	8004a80 <_svfiprintf_r+0x1d8>
 8004a0e:	4b24      	ldr	r3, [pc, #144]	; (8004aa0 <_svfiprintf_r+0x1f8>)
 8004a10:	bb1b      	cbnz	r3, 8004a5a <_svfiprintf_r+0x1b2>
 8004a12:	9b03      	ldr	r3, [sp, #12]
 8004a14:	3307      	adds	r3, #7
 8004a16:	f023 0307 	bic.w	r3, r3, #7
 8004a1a:	3308      	adds	r3, #8
 8004a1c:	9303      	str	r3, [sp, #12]
 8004a1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a20:	4433      	add	r3, r6
 8004a22:	9309      	str	r3, [sp, #36]	; 0x24
 8004a24:	e767      	b.n	80048f6 <_svfiprintf_r+0x4e>
 8004a26:	460c      	mov	r4, r1
 8004a28:	2001      	movs	r0, #1
 8004a2a:	fb0c 3202 	mla	r2, ip, r2, r3
 8004a2e:	e7a5      	b.n	800497c <_svfiprintf_r+0xd4>
 8004a30:	2300      	movs	r3, #0
 8004a32:	f04f 0c0a 	mov.w	ip, #10
 8004a36:	4619      	mov	r1, r3
 8004a38:	3401      	adds	r4, #1
 8004a3a:	9305      	str	r3, [sp, #20]
 8004a3c:	4620      	mov	r0, r4
 8004a3e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004a42:	3a30      	subs	r2, #48	; 0x30
 8004a44:	2a09      	cmp	r2, #9
 8004a46:	d903      	bls.n	8004a50 <_svfiprintf_r+0x1a8>
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d0c5      	beq.n	80049d8 <_svfiprintf_r+0x130>
 8004a4c:	9105      	str	r1, [sp, #20]
 8004a4e:	e7c3      	b.n	80049d8 <_svfiprintf_r+0x130>
 8004a50:	4604      	mov	r4, r0
 8004a52:	2301      	movs	r3, #1
 8004a54:	fb0c 2101 	mla	r1, ip, r1, r2
 8004a58:	e7f0      	b.n	8004a3c <_svfiprintf_r+0x194>
 8004a5a:	ab03      	add	r3, sp, #12
 8004a5c:	9300      	str	r3, [sp, #0]
 8004a5e:	462a      	mov	r2, r5
 8004a60:	4638      	mov	r0, r7
 8004a62:	4b10      	ldr	r3, [pc, #64]	; (8004aa4 <_svfiprintf_r+0x1fc>)
 8004a64:	a904      	add	r1, sp, #16
 8004a66:	f3af 8000 	nop.w
 8004a6a:	1c42      	adds	r2, r0, #1
 8004a6c:	4606      	mov	r6, r0
 8004a6e:	d1d6      	bne.n	8004a1e <_svfiprintf_r+0x176>
 8004a70:	89ab      	ldrh	r3, [r5, #12]
 8004a72:	065b      	lsls	r3, r3, #25
 8004a74:	f53f af2c 	bmi.w	80048d0 <_svfiprintf_r+0x28>
 8004a78:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004a7a:	b01d      	add	sp, #116	; 0x74
 8004a7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a80:	ab03      	add	r3, sp, #12
 8004a82:	9300      	str	r3, [sp, #0]
 8004a84:	462a      	mov	r2, r5
 8004a86:	4638      	mov	r0, r7
 8004a88:	4b06      	ldr	r3, [pc, #24]	; (8004aa4 <_svfiprintf_r+0x1fc>)
 8004a8a:	a904      	add	r1, sp, #16
 8004a8c:	f000 f87c 	bl	8004b88 <_printf_i>
 8004a90:	e7eb      	b.n	8004a6a <_svfiprintf_r+0x1c2>
 8004a92:	bf00      	nop
 8004a94:	080051da 	.word	0x080051da
 8004a98:	080051e0 	.word	0x080051e0
 8004a9c:	080051e4 	.word	0x080051e4
 8004aa0:	00000000 	.word	0x00000000
 8004aa4:	080047f1 	.word	0x080047f1

08004aa8 <_printf_common>:
 8004aa8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004aac:	4616      	mov	r6, r2
 8004aae:	4699      	mov	r9, r3
 8004ab0:	688a      	ldr	r2, [r1, #8]
 8004ab2:	690b      	ldr	r3, [r1, #16]
 8004ab4:	4607      	mov	r7, r0
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	bfb8      	it	lt
 8004aba:	4613      	movlt	r3, r2
 8004abc:	6033      	str	r3, [r6, #0]
 8004abe:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004ac2:	460c      	mov	r4, r1
 8004ac4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004ac8:	b10a      	cbz	r2, 8004ace <_printf_common+0x26>
 8004aca:	3301      	adds	r3, #1
 8004acc:	6033      	str	r3, [r6, #0]
 8004ace:	6823      	ldr	r3, [r4, #0]
 8004ad0:	0699      	lsls	r1, r3, #26
 8004ad2:	bf42      	ittt	mi
 8004ad4:	6833      	ldrmi	r3, [r6, #0]
 8004ad6:	3302      	addmi	r3, #2
 8004ad8:	6033      	strmi	r3, [r6, #0]
 8004ada:	6825      	ldr	r5, [r4, #0]
 8004adc:	f015 0506 	ands.w	r5, r5, #6
 8004ae0:	d106      	bne.n	8004af0 <_printf_common+0x48>
 8004ae2:	f104 0a19 	add.w	sl, r4, #25
 8004ae6:	68e3      	ldr	r3, [r4, #12]
 8004ae8:	6832      	ldr	r2, [r6, #0]
 8004aea:	1a9b      	subs	r3, r3, r2
 8004aec:	42ab      	cmp	r3, r5
 8004aee:	dc28      	bgt.n	8004b42 <_printf_common+0x9a>
 8004af0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004af4:	1e13      	subs	r3, r2, #0
 8004af6:	6822      	ldr	r2, [r4, #0]
 8004af8:	bf18      	it	ne
 8004afa:	2301      	movne	r3, #1
 8004afc:	0692      	lsls	r2, r2, #26
 8004afe:	d42d      	bmi.n	8004b5c <_printf_common+0xb4>
 8004b00:	4649      	mov	r1, r9
 8004b02:	4638      	mov	r0, r7
 8004b04:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004b08:	47c0      	blx	r8
 8004b0a:	3001      	adds	r0, #1
 8004b0c:	d020      	beq.n	8004b50 <_printf_common+0xa8>
 8004b0e:	6823      	ldr	r3, [r4, #0]
 8004b10:	68e5      	ldr	r5, [r4, #12]
 8004b12:	f003 0306 	and.w	r3, r3, #6
 8004b16:	2b04      	cmp	r3, #4
 8004b18:	bf18      	it	ne
 8004b1a:	2500      	movne	r5, #0
 8004b1c:	6832      	ldr	r2, [r6, #0]
 8004b1e:	f04f 0600 	mov.w	r6, #0
 8004b22:	68a3      	ldr	r3, [r4, #8]
 8004b24:	bf08      	it	eq
 8004b26:	1aad      	subeq	r5, r5, r2
 8004b28:	6922      	ldr	r2, [r4, #16]
 8004b2a:	bf08      	it	eq
 8004b2c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004b30:	4293      	cmp	r3, r2
 8004b32:	bfc4      	itt	gt
 8004b34:	1a9b      	subgt	r3, r3, r2
 8004b36:	18ed      	addgt	r5, r5, r3
 8004b38:	341a      	adds	r4, #26
 8004b3a:	42b5      	cmp	r5, r6
 8004b3c:	d11a      	bne.n	8004b74 <_printf_common+0xcc>
 8004b3e:	2000      	movs	r0, #0
 8004b40:	e008      	b.n	8004b54 <_printf_common+0xac>
 8004b42:	2301      	movs	r3, #1
 8004b44:	4652      	mov	r2, sl
 8004b46:	4649      	mov	r1, r9
 8004b48:	4638      	mov	r0, r7
 8004b4a:	47c0      	blx	r8
 8004b4c:	3001      	adds	r0, #1
 8004b4e:	d103      	bne.n	8004b58 <_printf_common+0xb0>
 8004b50:	f04f 30ff 	mov.w	r0, #4294967295
 8004b54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b58:	3501      	adds	r5, #1
 8004b5a:	e7c4      	b.n	8004ae6 <_printf_common+0x3e>
 8004b5c:	2030      	movs	r0, #48	; 0x30
 8004b5e:	18e1      	adds	r1, r4, r3
 8004b60:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004b64:	1c5a      	adds	r2, r3, #1
 8004b66:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004b6a:	4422      	add	r2, r4
 8004b6c:	3302      	adds	r3, #2
 8004b6e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004b72:	e7c5      	b.n	8004b00 <_printf_common+0x58>
 8004b74:	2301      	movs	r3, #1
 8004b76:	4622      	mov	r2, r4
 8004b78:	4649      	mov	r1, r9
 8004b7a:	4638      	mov	r0, r7
 8004b7c:	47c0      	blx	r8
 8004b7e:	3001      	adds	r0, #1
 8004b80:	d0e6      	beq.n	8004b50 <_printf_common+0xa8>
 8004b82:	3601      	adds	r6, #1
 8004b84:	e7d9      	b.n	8004b3a <_printf_common+0x92>
	...

08004b88 <_printf_i>:
 8004b88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004b8c:	7e0f      	ldrb	r7, [r1, #24]
 8004b8e:	4691      	mov	r9, r2
 8004b90:	2f78      	cmp	r7, #120	; 0x78
 8004b92:	4680      	mov	r8, r0
 8004b94:	460c      	mov	r4, r1
 8004b96:	469a      	mov	sl, r3
 8004b98:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004b9a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004b9e:	d807      	bhi.n	8004bb0 <_printf_i+0x28>
 8004ba0:	2f62      	cmp	r7, #98	; 0x62
 8004ba2:	d80a      	bhi.n	8004bba <_printf_i+0x32>
 8004ba4:	2f00      	cmp	r7, #0
 8004ba6:	f000 80d9 	beq.w	8004d5c <_printf_i+0x1d4>
 8004baa:	2f58      	cmp	r7, #88	; 0x58
 8004bac:	f000 80a4 	beq.w	8004cf8 <_printf_i+0x170>
 8004bb0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004bb4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004bb8:	e03a      	b.n	8004c30 <_printf_i+0xa8>
 8004bba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004bbe:	2b15      	cmp	r3, #21
 8004bc0:	d8f6      	bhi.n	8004bb0 <_printf_i+0x28>
 8004bc2:	a101      	add	r1, pc, #4	; (adr r1, 8004bc8 <_printf_i+0x40>)
 8004bc4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004bc8:	08004c21 	.word	0x08004c21
 8004bcc:	08004c35 	.word	0x08004c35
 8004bd0:	08004bb1 	.word	0x08004bb1
 8004bd4:	08004bb1 	.word	0x08004bb1
 8004bd8:	08004bb1 	.word	0x08004bb1
 8004bdc:	08004bb1 	.word	0x08004bb1
 8004be0:	08004c35 	.word	0x08004c35
 8004be4:	08004bb1 	.word	0x08004bb1
 8004be8:	08004bb1 	.word	0x08004bb1
 8004bec:	08004bb1 	.word	0x08004bb1
 8004bf0:	08004bb1 	.word	0x08004bb1
 8004bf4:	08004d43 	.word	0x08004d43
 8004bf8:	08004c65 	.word	0x08004c65
 8004bfc:	08004d25 	.word	0x08004d25
 8004c00:	08004bb1 	.word	0x08004bb1
 8004c04:	08004bb1 	.word	0x08004bb1
 8004c08:	08004d65 	.word	0x08004d65
 8004c0c:	08004bb1 	.word	0x08004bb1
 8004c10:	08004c65 	.word	0x08004c65
 8004c14:	08004bb1 	.word	0x08004bb1
 8004c18:	08004bb1 	.word	0x08004bb1
 8004c1c:	08004d2d 	.word	0x08004d2d
 8004c20:	682b      	ldr	r3, [r5, #0]
 8004c22:	1d1a      	adds	r2, r3, #4
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	602a      	str	r2, [r5, #0]
 8004c28:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004c2c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004c30:	2301      	movs	r3, #1
 8004c32:	e0a4      	b.n	8004d7e <_printf_i+0x1f6>
 8004c34:	6820      	ldr	r0, [r4, #0]
 8004c36:	6829      	ldr	r1, [r5, #0]
 8004c38:	0606      	lsls	r6, r0, #24
 8004c3a:	f101 0304 	add.w	r3, r1, #4
 8004c3e:	d50a      	bpl.n	8004c56 <_printf_i+0xce>
 8004c40:	680e      	ldr	r6, [r1, #0]
 8004c42:	602b      	str	r3, [r5, #0]
 8004c44:	2e00      	cmp	r6, #0
 8004c46:	da03      	bge.n	8004c50 <_printf_i+0xc8>
 8004c48:	232d      	movs	r3, #45	; 0x2d
 8004c4a:	4276      	negs	r6, r6
 8004c4c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004c50:	230a      	movs	r3, #10
 8004c52:	485e      	ldr	r0, [pc, #376]	; (8004dcc <_printf_i+0x244>)
 8004c54:	e019      	b.n	8004c8a <_printf_i+0x102>
 8004c56:	680e      	ldr	r6, [r1, #0]
 8004c58:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004c5c:	602b      	str	r3, [r5, #0]
 8004c5e:	bf18      	it	ne
 8004c60:	b236      	sxthne	r6, r6
 8004c62:	e7ef      	b.n	8004c44 <_printf_i+0xbc>
 8004c64:	682b      	ldr	r3, [r5, #0]
 8004c66:	6820      	ldr	r0, [r4, #0]
 8004c68:	1d19      	adds	r1, r3, #4
 8004c6a:	6029      	str	r1, [r5, #0]
 8004c6c:	0601      	lsls	r1, r0, #24
 8004c6e:	d501      	bpl.n	8004c74 <_printf_i+0xec>
 8004c70:	681e      	ldr	r6, [r3, #0]
 8004c72:	e002      	b.n	8004c7a <_printf_i+0xf2>
 8004c74:	0646      	lsls	r6, r0, #25
 8004c76:	d5fb      	bpl.n	8004c70 <_printf_i+0xe8>
 8004c78:	881e      	ldrh	r6, [r3, #0]
 8004c7a:	2f6f      	cmp	r7, #111	; 0x6f
 8004c7c:	bf0c      	ite	eq
 8004c7e:	2308      	moveq	r3, #8
 8004c80:	230a      	movne	r3, #10
 8004c82:	4852      	ldr	r0, [pc, #328]	; (8004dcc <_printf_i+0x244>)
 8004c84:	2100      	movs	r1, #0
 8004c86:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004c8a:	6865      	ldr	r5, [r4, #4]
 8004c8c:	2d00      	cmp	r5, #0
 8004c8e:	bfa8      	it	ge
 8004c90:	6821      	ldrge	r1, [r4, #0]
 8004c92:	60a5      	str	r5, [r4, #8]
 8004c94:	bfa4      	itt	ge
 8004c96:	f021 0104 	bicge.w	r1, r1, #4
 8004c9a:	6021      	strge	r1, [r4, #0]
 8004c9c:	b90e      	cbnz	r6, 8004ca2 <_printf_i+0x11a>
 8004c9e:	2d00      	cmp	r5, #0
 8004ca0:	d04d      	beq.n	8004d3e <_printf_i+0x1b6>
 8004ca2:	4615      	mov	r5, r2
 8004ca4:	fbb6 f1f3 	udiv	r1, r6, r3
 8004ca8:	fb03 6711 	mls	r7, r3, r1, r6
 8004cac:	5dc7      	ldrb	r7, [r0, r7]
 8004cae:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004cb2:	4637      	mov	r7, r6
 8004cb4:	42bb      	cmp	r3, r7
 8004cb6:	460e      	mov	r6, r1
 8004cb8:	d9f4      	bls.n	8004ca4 <_printf_i+0x11c>
 8004cba:	2b08      	cmp	r3, #8
 8004cbc:	d10b      	bne.n	8004cd6 <_printf_i+0x14e>
 8004cbe:	6823      	ldr	r3, [r4, #0]
 8004cc0:	07de      	lsls	r6, r3, #31
 8004cc2:	d508      	bpl.n	8004cd6 <_printf_i+0x14e>
 8004cc4:	6923      	ldr	r3, [r4, #16]
 8004cc6:	6861      	ldr	r1, [r4, #4]
 8004cc8:	4299      	cmp	r1, r3
 8004cca:	bfde      	ittt	le
 8004ccc:	2330      	movle	r3, #48	; 0x30
 8004cce:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004cd2:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004cd6:	1b52      	subs	r2, r2, r5
 8004cd8:	6122      	str	r2, [r4, #16]
 8004cda:	464b      	mov	r3, r9
 8004cdc:	4621      	mov	r1, r4
 8004cde:	4640      	mov	r0, r8
 8004ce0:	f8cd a000 	str.w	sl, [sp]
 8004ce4:	aa03      	add	r2, sp, #12
 8004ce6:	f7ff fedf 	bl	8004aa8 <_printf_common>
 8004cea:	3001      	adds	r0, #1
 8004cec:	d14c      	bne.n	8004d88 <_printf_i+0x200>
 8004cee:	f04f 30ff 	mov.w	r0, #4294967295
 8004cf2:	b004      	add	sp, #16
 8004cf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004cf8:	4834      	ldr	r0, [pc, #208]	; (8004dcc <_printf_i+0x244>)
 8004cfa:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004cfe:	6829      	ldr	r1, [r5, #0]
 8004d00:	6823      	ldr	r3, [r4, #0]
 8004d02:	f851 6b04 	ldr.w	r6, [r1], #4
 8004d06:	6029      	str	r1, [r5, #0]
 8004d08:	061d      	lsls	r5, r3, #24
 8004d0a:	d514      	bpl.n	8004d36 <_printf_i+0x1ae>
 8004d0c:	07df      	lsls	r7, r3, #31
 8004d0e:	bf44      	itt	mi
 8004d10:	f043 0320 	orrmi.w	r3, r3, #32
 8004d14:	6023      	strmi	r3, [r4, #0]
 8004d16:	b91e      	cbnz	r6, 8004d20 <_printf_i+0x198>
 8004d18:	6823      	ldr	r3, [r4, #0]
 8004d1a:	f023 0320 	bic.w	r3, r3, #32
 8004d1e:	6023      	str	r3, [r4, #0]
 8004d20:	2310      	movs	r3, #16
 8004d22:	e7af      	b.n	8004c84 <_printf_i+0xfc>
 8004d24:	6823      	ldr	r3, [r4, #0]
 8004d26:	f043 0320 	orr.w	r3, r3, #32
 8004d2a:	6023      	str	r3, [r4, #0]
 8004d2c:	2378      	movs	r3, #120	; 0x78
 8004d2e:	4828      	ldr	r0, [pc, #160]	; (8004dd0 <_printf_i+0x248>)
 8004d30:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004d34:	e7e3      	b.n	8004cfe <_printf_i+0x176>
 8004d36:	0659      	lsls	r1, r3, #25
 8004d38:	bf48      	it	mi
 8004d3a:	b2b6      	uxthmi	r6, r6
 8004d3c:	e7e6      	b.n	8004d0c <_printf_i+0x184>
 8004d3e:	4615      	mov	r5, r2
 8004d40:	e7bb      	b.n	8004cba <_printf_i+0x132>
 8004d42:	682b      	ldr	r3, [r5, #0]
 8004d44:	6826      	ldr	r6, [r4, #0]
 8004d46:	1d18      	adds	r0, r3, #4
 8004d48:	6961      	ldr	r1, [r4, #20]
 8004d4a:	6028      	str	r0, [r5, #0]
 8004d4c:	0635      	lsls	r5, r6, #24
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	d501      	bpl.n	8004d56 <_printf_i+0x1ce>
 8004d52:	6019      	str	r1, [r3, #0]
 8004d54:	e002      	b.n	8004d5c <_printf_i+0x1d4>
 8004d56:	0670      	lsls	r0, r6, #25
 8004d58:	d5fb      	bpl.n	8004d52 <_printf_i+0x1ca>
 8004d5a:	8019      	strh	r1, [r3, #0]
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	4615      	mov	r5, r2
 8004d60:	6123      	str	r3, [r4, #16]
 8004d62:	e7ba      	b.n	8004cda <_printf_i+0x152>
 8004d64:	682b      	ldr	r3, [r5, #0]
 8004d66:	2100      	movs	r1, #0
 8004d68:	1d1a      	adds	r2, r3, #4
 8004d6a:	602a      	str	r2, [r5, #0]
 8004d6c:	681d      	ldr	r5, [r3, #0]
 8004d6e:	6862      	ldr	r2, [r4, #4]
 8004d70:	4628      	mov	r0, r5
 8004d72:	f000 f82f 	bl	8004dd4 <memchr>
 8004d76:	b108      	cbz	r0, 8004d7c <_printf_i+0x1f4>
 8004d78:	1b40      	subs	r0, r0, r5
 8004d7a:	6060      	str	r0, [r4, #4]
 8004d7c:	6863      	ldr	r3, [r4, #4]
 8004d7e:	6123      	str	r3, [r4, #16]
 8004d80:	2300      	movs	r3, #0
 8004d82:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d86:	e7a8      	b.n	8004cda <_printf_i+0x152>
 8004d88:	462a      	mov	r2, r5
 8004d8a:	4649      	mov	r1, r9
 8004d8c:	4640      	mov	r0, r8
 8004d8e:	6923      	ldr	r3, [r4, #16]
 8004d90:	47d0      	blx	sl
 8004d92:	3001      	adds	r0, #1
 8004d94:	d0ab      	beq.n	8004cee <_printf_i+0x166>
 8004d96:	6823      	ldr	r3, [r4, #0]
 8004d98:	079b      	lsls	r3, r3, #30
 8004d9a:	d413      	bmi.n	8004dc4 <_printf_i+0x23c>
 8004d9c:	68e0      	ldr	r0, [r4, #12]
 8004d9e:	9b03      	ldr	r3, [sp, #12]
 8004da0:	4298      	cmp	r0, r3
 8004da2:	bfb8      	it	lt
 8004da4:	4618      	movlt	r0, r3
 8004da6:	e7a4      	b.n	8004cf2 <_printf_i+0x16a>
 8004da8:	2301      	movs	r3, #1
 8004daa:	4632      	mov	r2, r6
 8004dac:	4649      	mov	r1, r9
 8004dae:	4640      	mov	r0, r8
 8004db0:	47d0      	blx	sl
 8004db2:	3001      	adds	r0, #1
 8004db4:	d09b      	beq.n	8004cee <_printf_i+0x166>
 8004db6:	3501      	adds	r5, #1
 8004db8:	68e3      	ldr	r3, [r4, #12]
 8004dba:	9903      	ldr	r1, [sp, #12]
 8004dbc:	1a5b      	subs	r3, r3, r1
 8004dbe:	42ab      	cmp	r3, r5
 8004dc0:	dcf2      	bgt.n	8004da8 <_printf_i+0x220>
 8004dc2:	e7eb      	b.n	8004d9c <_printf_i+0x214>
 8004dc4:	2500      	movs	r5, #0
 8004dc6:	f104 0619 	add.w	r6, r4, #25
 8004dca:	e7f5      	b.n	8004db8 <_printf_i+0x230>
 8004dcc:	080051eb 	.word	0x080051eb
 8004dd0:	080051fc 	.word	0x080051fc

08004dd4 <memchr>:
 8004dd4:	4603      	mov	r3, r0
 8004dd6:	b510      	push	{r4, lr}
 8004dd8:	b2c9      	uxtb	r1, r1
 8004dda:	4402      	add	r2, r0
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	4618      	mov	r0, r3
 8004de0:	d101      	bne.n	8004de6 <memchr+0x12>
 8004de2:	2000      	movs	r0, #0
 8004de4:	e003      	b.n	8004dee <memchr+0x1a>
 8004de6:	7804      	ldrb	r4, [r0, #0]
 8004de8:	3301      	adds	r3, #1
 8004dea:	428c      	cmp	r4, r1
 8004dec:	d1f6      	bne.n	8004ddc <memchr+0x8>
 8004dee:	bd10      	pop	{r4, pc}

08004df0 <memcpy>:
 8004df0:	440a      	add	r2, r1
 8004df2:	4291      	cmp	r1, r2
 8004df4:	f100 33ff 	add.w	r3, r0, #4294967295
 8004df8:	d100      	bne.n	8004dfc <memcpy+0xc>
 8004dfa:	4770      	bx	lr
 8004dfc:	b510      	push	{r4, lr}
 8004dfe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004e02:	4291      	cmp	r1, r2
 8004e04:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004e08:	d1f9      	bne.n	8004dfe <memcpy+0xe>
 8004e0a:	bd10      	pop	{r4, pc}

08004e0c <memmove>:
 8004e0c:	4288      	cmp	r0, r1
 8004e0e:	b510      	push	{r4, lr}
 8004e10:	eb01 0402 	add.w	r4, r1, r2
 8004e14:	d902      	bls.n	8004e1c <memmove+0x10>
 8004e16:	4284      	cmp	r4, r0
 8004e18:	4623      	mov	r3, r4
 8004e1a:	d807      	bhi.n	8004e2c <memmove+0x20>
 8004e1c:	1e43      	subs	r3, r0, #1
 8004e1e:	42a1      	cmp	r1, r4
 8004e20:	d008      	beq.n	8004e34 <memmove+0x28>
 8004e22:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004e26:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004e2a:	e7f8      	b.n	8004e1e <memmove+0x12>
 8004e2c:	4601      	mov	r1, r0
 8004e2e:	4402      	add	r2, r0
 8004e30:	428a      	cmp	r2, r1
 8004e32:	d100      	bne.n	8004e36 <memmove+0x2a>
 8004e34:	bd10      	pop	{r4, pc}
 8004e36:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004e3a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004e3e:	e7f7      	b.n	8004e30 <memmove+0x24>

08004e40 <_free_r>:
 8004e40:	b538      	push	{r3, r4, r5, lr}
 8004e42:	4605      	mov	r5, r0
 8004e44:	2900      	cmp	r1, #0
 8004e46:	d040      	beq.n	8004eca <_free_r+0x8a>
 8004e48:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004e4c:	1f0c      	subs	r4, r1, #4
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	bfb8      	it	lt
 8004e52:	18e4      	addlt	r4, r4, r3
 8004e54:	f000 f910 	bl	8005078 <__malloc_lock>
 8004e58:	4a1c      	ldr	r2, [pc, #112]	; (8004ecc <_free_r+0x8c>)
 8004e5a:	6813      	ldr	r3, [r2, #0]
 8004e5c:	b933      	cbnz	r3, 8004e6c <_free_r+0x2c>
 8004e5e:	6063      	str	r3, [r4, #4]
 8004e60:	6014      	str	r4, [r2, #0]
 8004e62:	4628      	mov	r0, r5
 8004e64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004e68:	f000 b90c 	b.w	8005084 <__malloc_unlock>
 8004e6c:	42a3      	cmp	r3, r4
 8004e6e:	d908      	bls.n	8004e82 <_free_r+0x42>
 8004e70:	6820      	ldr	r0, [r4, #0]
 8004e72:	1821      	adds	r1, r4, r0
 8004e74:	428b      	cmp	r3, r1
 8004e76:	bf01      	itttt	eq
 8004e78:	6819      	ldreq	r1, [r3, #0]
 8004e7a:	685b      	ldreq	r3, [r3, #4]
 8004e7c:	1809      	addeq	r1, r1, r0
 8004e7e:	6021      	streq	r1, [r4, #0]
 8004e80:	e7ed      	b.n	8004e5e <_free_r+0x1e>
 8004e82:	461a      	mov	r2, r3
 8004e84:	685b      	ldr	r3, [r3, #4]
 8004e86:	b10b      	cbz	r3, 8004e8c <_free_r+0x4c>
 8004e88:	42a3      	cmp	r3, r4
 8004e8a:	d9fa      	bls.n	8004e82 <_free_r+0x42>
 8004e8c:	6811      	ldr	r1, [r2, #0]
 8004e8e:	1850      	adds	r0, r2, r1
 8004e90:	42a0      	cmp	r0, r4
 8004e92:	d10b      	bne.n	8004eac <_free_r+0x6c>
 8004e94:	6820      	ldr	r0, [r4, #0]
 8004e96:	4401      	add	r1, r0
 8004e98:	1850      	adds	r0, r2, r1
 8004e9a:	4283      	cmp	r3, r0
 8004e9c:	6011      	str	r1, [r2, #0]
 8004e9e:	d1e0      	bne.n	8004e62 <_free_r+0x22>
 8004ea0:	6818      	ldr	r0, [r3, #0]
 8004ea2:	685b      	ldr	r3, [r3, #4]
 8004ea4:	4401      	add	r1, r0
 8004ea6:	6011      	str	r1, [r2, #0]
 8004ea8:	6053      	str	r3, [r2, #4]
 8004eaa:	e7da      	b.n	8004e62 <_free_r+0x22>
 8004eac:	d902      	bls.n	8004eb4 <_free_r+0x74>
 8004eae:	230c      	movs	r3, #12
 8004eb0:	602b      	str	r3, [r5, #0]
 8004eb2:	e7d6      	b.n	8004e62 <_free_r+0x22>
 8004eb4:	6820      	ldr	r0, [r4, #0]
 8004eb6:	1821      	adds	r1, r4, r0
 8004eb8:	428b      	cmp	r3, r1
 8004eba:	bf01      	itttt	eq
 8004ebc:	6819      	ldreq	r1, [r3, #0]
 8004ebe:	685b      	ldreq	r3, [r3, #4]
 8004ec0:	1809      	addeq	r1, r1, r0
 8004ec2:	6021      	streq	r1, [r4, #0]
 8004ec4:	6063      	str	r3, [r4, #4]
 8004ec6:	6054      	str	r4, [r2, #4]
 8004ec8:	e7cb      	b.n	8004e62 <_free_r+0x22>
 8004eca:	bd38      	pop	{r3, r4, r5, pc}
 8004ecc:	200002fc 	.word	0x200002fc

08004ed0 <sbrk_aligned>:
 8004ed0:	b570      	push	{r4, r5, r6, lr}
 8004ed2:	4e0e      	ldr	r6, [pc, #56]	; (8004f0c <sbrk_aligned+0x3c>)
 8004ed4:	460c      	mov	r4, r1
 8004ed6:	6831      	ldr	r1, [r6, #0]
 8004ed8:	4605      	mov	r5, r0
 8004eda:	b911      	cbnz	r1, 8004ee2 <sbrk_aligned+0x12>
 8004edc:	f000 f8bc 	bl	8005058 <_sbrk_r>
 8004ee0:	6030      	str	r0, [r6, #0]
 8004ee2:	4621      	mov	r1, r4
 8004ee4:	4628      	mov	r0, r5
 8004ee6:	f000 f8b7 	bl	8005058 <_sbrk_r>
 8004eea:	1c43      	adds	r3, r0, #1
 8004eec:	d00a      	beq.n	8004f04 <sbrk_aligned+0x34>
 8004eee:	1cc4      	adds	r4, r0, #3
 8004ef0:	f024 0403 	bic.w	r4, r4, #3
 8004ef4:	42a0      	cmp	r0, r4
 8004ef6:	d007      	beq.n	8004f08 <sbrk_aligned+0x38>
 8004ef8:	1a21      	subs	r1, r4, r0
 8004efa:	4628      	mov	r0, r5
 8004efc:	f000 f8ac 	bl	8005058 <_sbrk_r>
 8004f00:	3001      	adds	r0, #1
 8004f02:	d101      	bne.n	8004f08 <sbrk_aligned+0x38>
 8004f04:	f04f 34ff 	mov.w	r4, #4294967295
 8004f08:	4620      	mov	r0, r4
 8004f0a:	bd70      	pop	{r4, r5, r6, pc}
 8004f0c:	20000300 	.word	0x20000300

08004f10 <_malloc_r>:
 8004f10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f14:	1ccd      	adds	r5, r1, #3
 8004f16:	f025 0503 	bic.w	r5, r5, #3
 8004f1a:	3508      	adds	r5, #8
 8004f1c:	2d0c      	cmp	r5, #12
 8004f1e:	bf38      	it	cc
 8004f20:	250c      	movcc	r5, #12
 8004f22:	2d00      	cmp	r5, #0
 8004f24:	4607      	mov	r7, r0
 8004f26:	db01      	blt.n	8004f2c <_malloc_r+0x1c>
 8004f28:	42a9      	cmp	r1, r5
 8004f2a:	d905      	bls.n	8004f38 <_malloc_r+0x28>
 8004f2c:	230c      	movs	r3, #12
 8004f2e:	2600      	movs	r6, #0
 8004f30:	603b      	str	r3, [r7, #0]
 8004f32:	4630      	mov	r0, r6
 8004f34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004f38:	4e2e      	ldr	r6, [pc, #184]	; (8004ff4 <_malloc_r+0xe4>)
 8004f3a:	f000 f89d 	bl	8005078 <__malloc_lock>
 8004f3e:	6833      	ldr	r3, [r6, #0]
 8004f40:	461c      	mov	r4, r3
 8004f42:	bb34      	cbnz	r4, 8004f92 <_malloc_r+0x82>
 8004f44:	4629      	mov	r1, r5
 8004f46:	4638      	mov	r0, r7
 8004f48:	f7ff ffc2 	bl	8004ed0 <sbrk_aligned>
 8004f4c:	1c43      	adds	r3, r0, #1
 8004f4e:	4604      	mov	r4, r0
 8004f50:	d14d      	bne.n	8004fee <_malloc_r+0xde>
 8004f52:	6834      	ldr	r4, [r6, #0]
 8004f54:	4626      	mov	r6, r4
 8004f56:	2e00      	cmp	r6, #0
 8004f58:	d140      	bne.n	8004fdc <_malloc_r+0xcc>
 8004f5a:	6823      	ldr	r3, [r4, #0]
 8004f5c:	4631      	mov	r1, r6
 8004f5e:	4638      	mov	r0, r7
 8004f60:	eb04 0803 	add.w	r8, r4, r3
 8004f64:	f000 f878 	bl	8005058 <_sbrk_r>
 8004f68:	4580      	cmp	r8, r0
 8004f6a:	d13a      	bne.n	8004fe2 <_malloc_r+0xd2>
 8004f6c:	6821      	ldr	r1, [r4, #0]
 8004f6e:	3503      	adds	r5, #3
 8004f70:	1a6d      	subs	r5, r5, r1
 8004f72:	f025 0503 	bic.w	r5, r5, #3
 8004f76:	3508      	adds	r5, #8
 8004f78:	2d0c      	cmp	r5, #12
 8004f7a:	bf38      	it	cc
 8004f7c:	250c      	movcc	r5, #12
 8004f7e:	4638      	mov	r0, r7
 8004f80:	4629      	mov	r1, r5
 8004f82:	f7ff ffa5 	bl	8004ed0 <sbrk_aligned>
 8004f86:	3001      	adds	r0, #1
 8004f88:	d02b      	beq.n	8004fe2 <_malloc_r+0xd2>
 8004f8a:	6823      	ldr	r3, [r4, #0]
 8004f8c:	442b      	add	r3, r5
 8004f8e:	6023      	str	r3, [r4, #0]
 8004f90:	e00e      	b.n	8004fb0 <_malloc_r+0xa0>
 8004f92:	6822      	ldr	r2, [r4, #0]
 8004f94:	1b52      	subs	r2, r2, r5
 8004f96:	d41e      	bmi.n	8004fd6 <_malloc_r+0xc6>
 8004f98:	2a0b      	cmp	r2, #11
 8004f9a:	d916      	bls.n	8004fca <_malloc_r+0xba>
 8004f9c:	1961      	adds	r1, r4, r5
 8004f9e:	42a3      	cmp	r3, r4
 8004fa0:	6025      	str	r5, [r4, #0]
 8004fa2:	bf18      	it	ne
 8004fa4:	6059      	strne	r1, [r3, #4]
 8004fa6:	6863      	ldr	r3, [r4, #4]
 8004fa8:	bf08      	it	eq
 8004faa:	6031      	streq	r1, [r6, #0]
 8004fac:	5162      	str	r2, [r4, r5]
 8004fae:	604b      	str	r3, [r1, #4]
 8004fb0:	4638      	mov	r0, r7
 8004fb2:	f104 060b 	add.w	r6, r4, #11
 8004fb6:	f000 f865 	bl	8005084 <__malloc_unlock>
 8004fba:	f026 0607 	bic.w	r6, r6, #7
 8004fbe:	1d23      	adds	r3, r4, #4
 8004fc0:	1af2      	subs	r2, r6, r3
 8004fc2:	d0b6      	beq.n	8004f32 <_malloc_r+0x22>
 8004fc4:	1b9b      	subs	r3, r3, r6
 8004fc6:	50a3      	str	r3, [r4, r2]
 8004fc8:	e7b3      	b.n	8004f32 <_malloc_r+0x22>
 8004fca:	6862      	ldr	r2, [r4, #4]
 8004fcc:	42a3      	cmp	r3, r4
 8004fce:	bf0c      	ite	eq
 8004fd0:	6032      	streq	r2, [r6, #0]
 8004fd2:	605a      	strne	r2, [r3, #4]
 8004fd4:	e7ec      	b.n	8004fb0 <_malloc_r+0xa0>
 8004fd6:	4623      	mov	r3, r4
 8004fd8:	6864      	ldr	r4, [r4, #4]
 8004fda:	e7b2      	b.n	8004f42 <_malloc_r+0x32>
 8004fdc:	4634      	mov	r4, r6
 8004fde:	6876      	ldr	r6, [r6, #4]
 8004fe0:	e7b9      	b.n	8004f56 <_malloc_r+0x46>
 8004fe2:	230c      	movs	r3, #12
 8004fe4:	4638      	mov	r0, r7
 8004fe6:	603b      	str	r3, [r7, #0]
 8004fe8:	f000 f84c 	bl	8005084 <__malloc_unlock>
 8004fec:	e7a1      	b.n	8004f32 <_malloc_r+0x22>
 8004fee:	6025      	str	r5, [r4, #0]
 8004ff0:	e7de      	b.n	8004fb0 <_malloc_r+0xa0>
 8004ff2:	bf00      	nop
 8004ff4:	200002fc 	.word	0x200002fc

08004ff8 <_realloc_r>:
 8004ff8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ffc:	4680      	mov	r8, r0
 8004ffe:	4614      	mov	r4, r2
 8005000:	460e      	mov	r6, r1
 8005002:	b921      	cbnz	r1, 800500e <_realloc_r+0x16>
 8005004:	4611      	mov	r1, r2
 8005006:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800500a:	f7ff bf81 	b.w	8004f10 <_malloc_r>
 800500e:	b92a      	cbnz	r2, 800501c <_realloc_r+0x24>
 8005010:	f7ff ff16 	bl	8004e40 <_free_r>
 8005014:	4625      	mov	r5, r4
 8005016:	4628      	mov	r0, r5
 8005018:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800501c:	f000 f838 	bl	8005090 <_malloc_usable_size_r>
 8005020:	4284      	cmp	r4, r0
 8005022:	4607      	mov	r7, r0
 8005024:	d802      	bhi.n	800502c <_realloc_r+0x34>
 8005026:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800502a:	d812      	bhi.n	8005052 <_realloc_r+0x5a>
 800502c:	4621      	mov	r1, r4
 800502e:	4640      	mov	r0, r8
 8005030:	f7ff ff6e 	bl	8004f10 <_malloc_r>
 8005034:	4605      	mov	r5, r0
 8005036:	2800      	cmp	r0, #0
 8005038:	d0ed      	beq.n	8005016 <_realloc_r+0x1e>
 800503a:	42bc      	cmp	r4, r7
 800503c:	4622      	mov	r2, r4
 800503e:	4631      	mov	r1, r6
 8005040:	bf28      	it	cs
 8005042:	463a      	movcs	r2, r7
 8005044:	f7ff fed4 	bl	8004df0 <memcpy>
 8005048:	4631      	mov	r1, r6
 800504a:	4640      	mov	r0, r8
 800504c:	f7ff fef8 	bl	8004e40 <_free_r>
 8005050:	e7e1      	b.n	8005016 <_realloc_r+0x1e>
 8005052:	4635      	mov	r5, r6
 8005054:	e7df      	b.n	8005016 <_realloc_r+0x1e>
	...

08005058 <_sbrk_r>:
 8005058:	b538      	push	{r3, r4, r5, lr}
 800505a:	2300      	movs	r3, #0
 800505c:	4d05      	ldr	r5, [pc, #20]	; (8005074 <_sbrk_r+0x1c>)
 800505e:	4604      	mov	r4, r0
 8005060:	4608      	mov	r0, r1
 8005062:	602b      	str	r3, [r5, #0]
 8005064:	f7fc fbce 	bl	8001804 <_sbrk>
 8005068:	1c43      	adds	r3, r0, #1
 800506a:	d102      	bne.n	8005072 <_sbrk_r+0x1a>
 800506c:	682b      	ldr	r3, [r5, #0]
 800506e:	b103      	cbz	r3, 8005072 <_sbrk_r+0x1a>
 8005070:	6023      	str	r3, [r4, #0]
 8005072:	bd38      	pop	{r3, r4, r5, pc}
 8005074:	20000304 	.word	0x20000304

08005078 <__malloc_lock>:
 8005078:	4801      	ldr	r0, [pc, #4]	; (8005080 <__malloc_lock+0x8>)
 800507a:	f000 b811 	b.w	80050a0 <__retarget_lock_acquire_recursive>
 800507e:	bf00      	nop
 8005080:	20000308 	.word	0x20000308

08005084 <__malloc_unlock>:
 8005084:	4801      	ldr	r0, [pc, #4]	; (800508c <__malloc_unlock+0x8>)
 8005086:	f000 b80c 	b.w	80050a2 <__retarget_lock_release_recursive>
 800508a:	bf00      	nop
 800508c:	20000308 	.word	0x20000308

08005090 <_malloc_usable_size_r>:
 8005090:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005094:	1f18      	subs	r0, r3, #4
 8005096:	2b00      	cmp	r3, #0
 8005098:	bfbc      	itt	lt
 800509a:	580b      	ldrlt	r3, [r1, r0]
 800509c:	18c0      	addlt	r0, r0, r3
 800509e:	4770      	bx	lr

080050a0 <__retarget_lock_acquire_recursive>:
 80050a0:	4770      	bx	lr

080050a2 <__retarget_lock_release_recursive>:
 80050a2:	4770      	bx	lr

080050a4 <_init>:
 80050a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050a6:	bf00      	nop
 80050a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050aa:	bc08      	pop	{r3}
 80050ac:	469e      	mov	lr, r3
 80050ae:	4770      	bx	lr

080050b0 <_fini>:
 80050b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050b2:	bf00      	nop
 80050b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050b6:	bc08      	pop	{r3}
 80050b8:	469e      	mov	lr, r3
 80050ba:	4770      	bx	lr
